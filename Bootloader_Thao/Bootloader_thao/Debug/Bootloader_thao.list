
Bootloader_thao.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c8c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000254  08003e2c  08003e2c  00013e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004080  08004080  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08004080  08004080  00014080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004088  08004088  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004088  08004088  00014088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800408c  0800408c  0001408c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004090  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000630  20000068  080040f8  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000698  080040f8  00020698  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   000093bf  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d26  00000000  00000000  0002949a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000890  00000000  00000000  0002b1c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000686  00000000  00000000  0002ba50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016b7e  00000000  00000000  0002c0d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ab0c  00000000  00000000  00042c54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087c0f  00000000  00000000  0004d760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000291c  00000000  00000000  000d5370  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000d7c8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003e14 	.word	0x08003e14

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08003e14 	.word	0x08003e14

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <etx_ota_download_and_flash>:
  * @brief Download the application from UART and flash it.
  * @param None
  * @retval ETX_OTA_EX_
  */
ETX_OTA_EX_ etx_ota_download_and_flash( void )
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
  ETX_OTA_EX_ ret  = ETX_OTA_EX_OK;
 8000582:	2300      	movs	r3, #0
 8000584:	71fb      	strb	r3, [r7, #7]
  uint16_t    len;

  printf("Waiting for the OTA data...\r\n");
 8000586:	481f      	ldr	r0, [pc, #124]	; (8000604 <etx_ota_download_and_flash+0x88>)
 8000588:	f002 fddc 	bl	8003144 <puts>

  /* Reset the variables */
  ota_fw_total_size    = 0u;
 800058c:	4b1e      	ldr	r3, [pc, #120]	; (8000608 <etx_ota_download_and_flash+0x8c>)
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
  ota_fw_received_size = 0u;
 8000592:	4b1e      	ldr	r3, [pc, #120]	; (800060c <etx_ota_download_and_flash+0x90>)
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
  ota_fw_crc           = 0u;
 8000598:	4b1d      	ldr	r3, [pc, #116]	; (8000610 <etx_ota_download_and_flash+0x94>)
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
  ota_state            = ETX_OTA_STATE_START;
 800059e:	4b1d      	ldr	r3, [pc, #116]	; (8000614 <etx_ota_download_and_flash+0x98>)
 80005a0:	2201      	movs	r2, #1
 80005a2:	701a      	strb	r2, [r3, #0]

  do
  {
    //clear the buffer
    memset( Rx_Buffer, 0, ETX_OTA_PACKET_MAX_SIZE );
 80005a4:	f240 4209 	movw	r2, #1033	; 0x409
 80005a8:	2100      	movs	r1, #0
 80005aa:	481b      	ldr	r0, [pc, #108]	; (8000618 <etx_ota_download_and_flash+0x9c>)
 80005ac:	f002 feaa 	bl	8003304 <memset>

    len = etx_receive_chunk( Rx_Buffer, ETX_OTA_PACKET_MAX_SIZE );
 80005b0:	f240 4109 	movw	r1, #1033	; 0x409
 80005b4:	4818      	ldr	r0, [pc, #96]	; (8000618 <etx_ota_download_and_flash+0x9c>)
 80005b6:	f000 f905 	bl	80007c4 <etx_receive_chunk>
 80005ba:	4603      	mov	r3, r0
 80005bc:	80bb      	strh	r3, [r7, #4]

    if( len != 0u )
 80005be:	88bb      	ldrh	r3, [r7, #4]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d007      	beq.n	80005d4 <etx_ota_download_and_flash+0x58>
    {
      ret = etx_process_data( Rx_Buffer, len );
 80005c4:	88bb      	ldrh	r3, [r7, #4]
 80005c6:	4619      	mov	r1, r3
 80005c8:	4813      	ldr	r0, [pc, #76]	; (8000618 <etx_ota_download_and_flash+0x9c>)
 80005ca:	f000 f829 	bl	8000620 <etx_process_data>
 80005ce:	4603      	mov	r3, r0
 80005d0:	71fb      	strb	r3, [r7, #7]
 80005d2:	e001      	b.n	80005d8 <etx_ota_download_and_flash+0x5c>
    }
    else
    {
      //didn't received data. break.
      ret = ETX_OTA_EX_ERR;
 80005d4:	2301      	movs	r3, #1
 80005d6:	71fb      	strb	r3, [r7, #7]
    }

    //Send ACK or NACK
    if( ret != ETX_OTA_EX_OK )
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d006      	beq.n	80005ec <etx_ota_download_and_flash+0x70>
    {
      printf("Sending NACK\r\n");
 80005de:	480f      	ldr	r0, [pc, #60]	; (800061c <etx_ota_download_and_flash+0xa0>)
 80005e0:	f002 fdb0 	bl	8003144 <puts>
      etx_ota_send_resp( ETX_OTA_NACK );
 80005e4:	2001      	movs	r0, #1
 80005e6:	f000 f9a9 	bl	800093c <etx_ota_send_resp>
      break;
 80005ea:	e006      	b.n	80005fa <etx_ota_download_and_flash+0x7e>
    }
    else
    {
      //printf("Sending ACK\r\n");
      etx_ota_send_resp( ETX_OTA_ACK );
 80005ec:	2000      	movs	r0, #0
 80005ee:	f000 f9a5 	bl	800093c <etx_ota_send_resp>
    }

  }while( ota_state != ETX_OTA_STATE_IDLE );
 80005f2:	4b08      	ldr	r3, [pc, #32]	; (8000614 <etx_ota_download_and_flash+0x98>)
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d1d4      	bne.n	80005a4 <etx_ota_download_and_flash+0x28>

  return ret;
 80005fa:	79fb      	ldrb	r3, [r7, #7]
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	08003e2c 	.word	0x08003e2c
 8000608:	200004d4 	.word	0x200004d4
 800060c:	200004dc 	.word	0x200004dc
 8000610:	200004d8 	.word	0x200004d8
 8000614:	200004d1 	.word	0x200004d1
 8000618:	200000c8 	.word	0x200000c8
 800061c:	08003e4c 	.word	0x08003e4c

08000620 <etx_process_data>:
  * @param buf buffer to store the received data
  * @param max_len maximum length to receive
  * @retval ETX_OTA_EX_
  */
static ETX_OTA_EX_ etx_process_data( uint8_t *buf, uint16_t len )
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b08a      	sub	sp, #40	; 0x28
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
 8000628:	460b      	mov	r3, r1
 800062a:	807b      	strh	r3, [r7, #2]
  ETX_OTA_EX_ ret = ETX_OTA_EX_ERR;
 800062c:	2301      	movs	r3, #1
 800062e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  do
  {
    if( ( buf == NULL ) || ( len == 0u) )
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	2b00      	cmp	r3, #0
 8000636:	f000 80ad 	beq.w	8000794 <etx_process_data+0x174>
 800063a:	887b      	ldrh	r3, [r7, #2]
 800063c:	2b00      	cmp	r3, #0
 800063e:	f000 80a9 	beq.w	8000794 <etx_process_data+0x174>
    {
      break;
    }

    //Check we received OTA Abort command
    ETX_OTA_COMMAND_ *cmd = (ETX_OTA_COMMAND_*)buf;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	623b      	str	r3, [r7, #32]
    if( cmd->packet_type == ETX_OTA_PACKET_TYPE_CMD )
 8000646:	6a3b      	ldr	r3, [r7, #32]
 8000648:	785b      	ldrb	r3, [r3, #1]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d104      	bne.n	8000658 <etx_process_data+0x38>
    {
      if( cmd->cmd == ETX_OTA_CMD_ABORT )
 800064e:	6a3b      	ldr	r3, [r7, #32]
 8000650:	791b      	ldrb	r3, [r3, #4]
 8000652:	2b02      	cmp	r3, #2
 8000654:	f000 8095 	beq.w	8000782 <etx_process_data+0x162>
        //received OTA Abort command. Stop the process
        break;
      }
    }

    switch( ota_state )
 8000658:	4b51      	ldr	r3, [pc, #324]	; (80007a0 <etx_process_data+0x180>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	2b04      	cmp	r3, #4
 800065e:	f200 808c 	bhi.w	800077a <etx_process_data+0x15a>
 8000662:	a201      	add	r2, pc, #4	; (adr r2, 8000668 <etx_process_data+0x48>)
 8000664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000668:	0800067d 	.word	0x0800067d
 800066c:	0800068b 	.word	0x0800068b
 8000670:	080006b3 	.word	0x080006b3
 8000674:	080006e9 	.word	0x080006e9
 8000678:	08000753 	.word	0x08000753
    {
      case ETX_OTA_STATE_IDLE:
      {
        printf("ETX_OTA_STATE_IDLE...\r\n");
 800067c:	4849      	ldr	r0, [pc, #292]	; (80007a4 <etx_process_data+0x184>)
 800067e:	f002 fd61 	bl	8003144 <puts>
        ret = ETX_OTA_EX_OK;
 8000682:	2300      	movs	r3, #0
 8000684:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8000688:	e084      	b.n	8000794 <etx_process_data+0x174>

      case ETX_OTA_STATE_START:
      {
        ETX_OTA_COMMAND_ *cmd = (ETX_OTA_COMMAND_*)buf;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	60fb      	str	r3, [r7, #12]

        if( cmd->packet_type == ETX_OTA_PACKET_TYPE_CMD )
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	785b      	ldrb	r3, [r3, #1]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d177      	bne.n	8000786 <etx_process_data+0x166>
        {
          if( cmd->cmd == ETX_OTA_CMD_START )
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	791b      	ldrb	r3, [r3, #4]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d173      	bne.n	8000786 <etx_process_data+0x166>
          {
            printf("Received OTA START Command\r\n");
 800069e:	4842      	ldr	r0, [pc, #264]	; (80007a8 <etx_process_data+0x188>)
 80006a0:	f002 fd50 	bl	8003144 <puts>
            ota_state = ETX_OTA_STATE_HEADER;
 80006a4:	4b3e      	ldr	r3, [pc, #248]	; (80007a0 <etx_process_data+0x180>)
 80006a6:	2202      	movs	r2, #2
 80006a8:	701a      	strb	r2, [r3, #0]
            ret = ETX_OTA_EX_OK;
 80006aa:	2300      	movs	r3, #0
 80006ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          }
        }
      }
      break;
 80006b0:	e069      	b.n	8000786 <etx_process_data+0x166>

      case ETX_OTA_STATE_HEADER:
      {
        ETX_OTA_HEADER_ *header = (ETX_OTA_HEADER_*)buf;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	613b      	str	r3, [r7, #16]
        if( header->packet_type == ETX_OTA_PACKET_TYPE_HEADER )
 80006b6:	693b      	ldr	r3, [r7, #16]
 80006b8:	785b      	ldrb	r3, [r3, #1]
 80006ba:	2b02      	cmp	r3, #2
 80006bc:	d165      	bne.n	800078a <etx_process_data+0x16a>
        {
          ota_fw_total_size = header->meta_data.package_size;
 80006be:	693b      	ldr	r3, [r7, #16]
 80006c0:	685b      	ldr	r3, [r3, #4]
 80006c2:	4a3a      	ldr	r2, [pc, #232]	; (80007ac <etx_process_data+0x18c>)
 80006c4:	6013      	str	r3, [r2, #0]
          ota_fw_crc        = header->meta_data.package_crc;
 80006c6:	693b      	ldr	r3, [r7, #16]
 80006c8:	689b      	ldr	r3, [r3, #8]
 80006ca:	4a39      	ldr	r2, [pc, #228]	; (80007b0 <etx_process_data+0x190>)
 80006cc:	6013      	str	r3, [r2, #0]
          printf("Received OTA Header. FW Size = %ld\r\n", ota_fw_total_size);
 80006ce:	4b37      	ldr	r3, [pc, #220]	; (80007ac <etx_process_data+0x18c>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4619      	mov	r1, r3
 80006d4:	4837      	ldr	r0, [pc, #220]	; (80007b4 <etx_process_data+0x194>)
 80006d6:	f002 fccf 	bl	8003078 <iprintf>
          ota_state = ETX_OTA_STATE_DATA;
 80006da:	4b31      	ldr	r3, [pc, #196]	; (80007a0 <etx_process_data+0x180>)
 80006dc:	2203      	movs	r2, #3
 80006de:	701a      	strb	r2, [r3, #0]
          ret = ETX_OTA_EX_OK;
 80006e0:	2300      	movs	r3, #0
 80006e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
      break;
 80006e6:	e050      	b.n	800078a <etx_process_data+0x16a>

      case ETX_OTA_STATE_DATA:
      {
        ETX_OTA_DATA_     *data     = (ETX_OTA_DATA_*)buf;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	61bb      	str	r3, [r7, #24]
        uint16_t          data_len = data->data_len;
 80006ec:	69bb      	ldr	r3, [r7, #24]
 80006ee:	789a      	ldrb	r2, [r3, #2]
 80006f0:	78db      	ldrb	r3, [r3, #3]
 80006f2:	021b      	lsls	r3, r3, #8
 80006f4:	4313      	orrs	r3, r2
 80006f6:	82fb      	strh	r3, [r7, #22]
        HAL_StatusTypeDef ex;

        if( data->packet_type == ETX_OTA_PACKET_TYPE_DATA )
 80006f8:	69bb      	ldr	r3, [r7, #24]
 80006fa:	785b      	ldrb	r3, [r3, #1]
 80006fc:	2b01      	cmp	r3, #1
 80006fe:	d146      	bne.n	800078e <etx_process_data+0x16e>
        {
          /* write the chunk to the Flash (App location) */
          ex = write_data_to_flash_app( buf+4, data_len, ( ota_fw_received_size == 0) );
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	1d18      	adds	r0, r3, #4
 8000704:	4b2c      	ldr	r3, [pc, #176]	; (80007b8 <etx_process_data+0x198>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	2b00      	cmp	r3, #0
 800070a:	bf0c      	ite	eq
 800070c:	2301      	moveq	r3, #1
 800070e:	2300      	movne	r3, #0
 8000710:	b2da      	uxtb	r2, r3
 8000712:	8afb      	ldrh	r3, [r7, #22]
 8000714:	4619      	mov	r1, r3
 8000716:	f000 f937 	bl	8000988 <write_data_to_flash_app>
 800071a:	4603      	mov	r3, r0
 800071c:	757b      	strb	r3, [r7, #21]

          if( ex == HAL_OK )
 800071e:	7d7b      	ldrb	r3, [r7, #21]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d134      	bne.n	800078e <etx_process_data+0x16e>
          {
            printf("[%ld/%ld]\r\n", ota_fw_received_size/ETX_OTA_DATA_MAX_SIZE, ota_fw_total_size/ETX_OTA_DATA_MAX_SIZE);
 8000724:	4b24      	ldr	r3, [pc, #144]	; (80007b8 <etx_process_data+0x198>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	0a99      	lsrs	r1, r3, #10
 800072a:	4b20      	ldr	r3, [pc, #128]	; (80007ac <etx_process_data+0x18c>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	0a9b      	lsrs	r3, r3, #10
 8000730:	461a      	mov	r2, r3
 8000732:	4822      	ldr	r0, [pc, #136]	; (80007bc <etx_process_data+0x19c>)
 8000734:	f002 fca0 	bl	8003078 <iprintf>
            if( ota_fw_received_size >= ota_fw_total_size )
 8000738:	4b1f      	ldr	r3, [pc, #124]	; (80007b8 <etx_process_data+0x198>)
 800073a:	681a      	ldr	r2, [r3, #0]
 800073c:	4b1b      	ldr	r3, [pc, #108]	; (80007ac <etx_process_data+0x18c>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	429a      	cmp	r2, r3
 8000742:	d302      	bcc.n	800074a <etx_process_data+0x12a>
            {
              //received the full data. So, move to end
              ota_state = ETX_OTA_STATE_END;
 8000744:	4b16      	ldr	r3, [pc, #88]	; (80007a0 <etx_process_data+0x180>)
 8000746:	2204      	movs	r2, #4
 8000748:	701a      	strb	r2, [r3, #0]
            }
            ret = ETX_OTA_EX_OK;
 800074a:	2300      	movs	r3, #0
 800074c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          }
        }
      }
      break;
 8000750:	e01d      	b.n	800078e <etx_process_data+0x16e>

      case ETX_OTA_STATE_END:
      {

        ETX_OTA_COMMAND_ *cmd = (ETX_OTA_COMMAND_*)buf;
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	61fb      	str	r3, [r7, #28]

        if( cmd->packet_type == ETX_OTA_PACKET_TYPE_CMD )
 8000756:	69fb      	ldr	r3, [r7, #28]
 8000758:	785b      	ldrb	r3, [r3, #1]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d119      	bne.n	8000792 <etx_process_data+0x172>
        {
          if( cmd->cmd == ETX_OTA_CMD_END )
 800075e:	69fb      	ldr	r3, [r7, #28]
 8000760:	791b      	ldrb	r3, [r3, #4]
 8000762:	2b01      	cmp	r3, #1
 8000764:	d115      	bne.n	8000792 <etx_process_data+0x172>
          {
            printf("Received OTA END Command\r\n");
 8000766:	4816      	ldr	r0, [pc, #88]	; (80007c0 <etx_process_data+0x1a0>)
 8000768:	f002 fcec 	bl	8003144 <puts>

            //TODO: Very full package CRC

            ota_state = ETX_OTA_STATE_IDLE;
 800076c:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <etx_process_data+0x180>)
 800076e:	2200      	movs	r2, #0
 8000770:	701a      	strb	r2, [r3, #0]
            ret = ETX_OTA_EX_OK;
 8000772:	2300      	movs	r3, #0
 8000774:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          }
        }
      }
      break;
 8000778:	e00b      	b.n	8000792 <etx_process_data+0x172>

      default:
      {
        /* Should not come here */
        ret = ETX_OTA_EX_ERR;
 800077a:	2301      	movs	r3, #1
 800077c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8000780:	e008      	b.n	8000794 <etx_process_data+0x174>
        break;
 8000782:	bf00      	nop
 8000784:	e006      	b.n	8000794 <etx_process_data+0x174>
      break;
 8000786:	bf00      	nop
 8000788:	e004      	b.n	8000794 <etx_process_data+0x174>
      break;
 800078a:	bf00      	nop
 800078c:	e002      	b.n	8000794 <etx_process_data+0x174>
      break;
 800078e:	bf00      	nop
 8000790:	e000      	b.n	8000794 <etx_process_data+0x174>
      break;
 8000792:	bf00      	nop
    };
  }while( false );

  return ret;
 8000794:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000798:	4618      	mov	r0, r3
 800079a:	3728      	adds	r7, #40	; 0x28
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	200004d1 	.word	0x200004d1
 80007a4:	08003e5c 	.word	0x08003e5c
 80007a8:	08003e74 	.word	0x08003e74
 80007ac:	200004d4 	.word	0x200004d4
 80007b0:	200004d8 	.word	0x200004d8
 80007b4:	08003e90 	.word	0x08003e90
 80007b8:	200004dc 	.word	0x200004dc
 80007bc:	08003eb8 	.word	0x08003eb8
 80007c0:	08003ec4 	.word	0x08003ec4

080007c4 <etx_receive_chunk>:
  * @param buf buffer to store the received data
  * @param max_len maximum length to receive
  * @retval ETX_OTA_EX_
  */
static uint16_t etx_receive_chunk( uint8_t *buf, uint16_t max_len )
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	460b      	mov	r3, r1
 80007ce:	807b      	strh	r3, [r7, #2]
  int16_t  ret;
  uint16_t index     = 0u;
 80007d0:	2300      	movs	r3, #0
 80007d2:	81bb      	strh	r3, [r7, #12]
  uint16_t data_len;

  do
  {
    //receive SOF byte (1byte)
    ret = HAL_UART_Receive( &huart2, &buf[index], 1, HAL_MAX_DELAY );
 80007d4:	89bb      	ldrh	r3, [r7, #12]
 80007d6:	687a      	ldr	r2, [r7, #4]
 80007d8:	18d1      	adds	r1, r2, r3
 80007da:	f04f 33ff 	mov.w	r3, #4294967295
 80007de:	2201      	movs	r2, #1
 80007e0:	4854      	ldr	r0, [pc, #336]	; (8000934 <etx_receive_chunk+0x170>)
 80007e2:	f002 f814 	bl	800280e <HAL_UART_Receive>
 80007e6:	4603      	mov	r3, r0
 80007e8:	81fb      	strh	r3, [r7, #14]
    if( ret != HAL_OK )
 80007ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d17f      	bne.n	80008f2 <etx_receive_chunk+0x12e>
    {
      break;
    }

    if( buf[index++] != ETX_OTA_SOF )
 80007f2:	89bb      	ldrh	r3, [r7, #12]
 80007f4:	1c5a      	adds	r2, r3, #1
 80007f6:	81ba      	strh	r2, [r7, #12]
 80007f8:	461a      	mov	r2, r3
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	4413      	add	r3, r2
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	2baa      	cmp	r3, #170	; 0xaa
 8000802:	d002      	beq.n	800080a <etx_receive_chunk+0x46>
    {
      //Not received start of frame
      ret = ETX_OTA_EX_ERR;
 8000804:	2301      	movs	r3, #1
 8000806:	81fb      	strh	r3, [r7, #14]
      break;
 8000808:	e07c      	b.n	8000904 <etx_receive_chunk+0x140>
    }

    //Receive the packet type (1byte).
    ret = HAL_UART_Receive( &huart2, &buf[index++], 1, HAL_MAX_DELAY );
 800080a:	89bb      	ldrh	r3, [r7, #12]
 800080c:	1c5a      	adds	r2, r3, #1
 800080e:	81ba      	strh	r2, [r7, #12]
 8000810:	461a      	mov	r2, r3
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	1899      	adds	r1, r3, r2
 8000816:	f04f 33ff 	mov.w	r3, #4294967295
 800081a:	2201      	movs	r2, #1
 800081c:	4845      	ldr	r0, [pc, #276]	; (8000934 <etx_receive_chunk+0x170>)
 800081e:	f001 fff6 	bl	800280e <HAL_UART_Receive>
 8000822:	4603      	mov	r3, r0
 8000824:	81fb      	strh	r3, [r7, #14]
    if( ret != HAL_OK )
 8000826:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d163      	bne.n	80008f6 <etx_receive_chunk+0x132>
    {
      break;
    }

    //Get the data length (2bytes).
    ret = HAL_UART_Receive( &huart2, &buf[index], 2, HAL_MAX_DELAY );
 800082e:	89bb      	ldrh	r3, [r7, #12]
 8000830:	687a      	ldr	r2, [r7, #4]
 8000832:	18d1      	adds	r1, r2, r3
 8000834:	f04f 33ff 	mov.w	r3, #4294967295
 8000838:	2202      	movs	r2, #2
 800083a:	483e      	ldr	r0, [pc, #248]	; (8000934 <etx_receive_chunk+0x170>)
 800083c:	f001 ffe7 	bl	800280e <HAL_UART_Receive>
 8000840:	4603      	mov	r3, r0
 8000842:	81fb      	strh	r3, [r7, #14]
    if( ret != HAL_OK )
 8000844:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d156      	bne.n	80008fa <etx_receive_chunk+0x136>
    {
      break;
    }
    data_len = *(uint16_t *)&buf[index];
 800084c:	89bb      	ldrh	r3, [r7, #12]
 800084e:	687a      	ldr	r2, [r7, #4]
 8000850:	4413      	add	r3, r2
 8000852:	881b      	ldrh	r3, [r3, #0]
 8000854:	813b      	strh	r3, [r7, #8]
    index += 2u;
 8000856:	89bb      	ldrh	r3, [r7, #12]
 8000858:	3302      	adds	r3, #2
 800085a:	81bb      	strh	r3, [r7, #12]

    for( uint16_t i = 0u; i < data_len; i++ )
 800085c:	2300      	movs	r3, #0
 800085e:	817b      	strh	r3, [r7, #10]
 8000860:	e014      	b.n	800088c <etx_receive_chunk+0xc8>
    {
      ret = HAL_UART_Receive( &huart2, &buf[index++], 1, HAL_MAX_DELAY );
 8000862:	89bb      	ldrh	r3, [r7, #12]
 8000864:	1c5a      	adds	r2, r3, #1
 8000866:	81ba      	strh	r2, [r7, #12]
 8000868:	461a      	mov	r2, r3
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	1899      	adds	r1, r3, r2
 800086e:	f04f 33ff 	mov.w	r3, #4294967295
 8000872:	2201      	movs	r2, #1
 8000874:	482f      	ldr	r0, [pc, #188]	; (8000934 <etx_receive_chunk+0x170>)
 8000876:	f001 ffca 	bl	800280e <HAL_UART_Receive>
 800087a:	4603      	mov	r3, r0
 800087c:	81fb      	strh	r3, [r7, #14]
      if( ret != HAL_OK )
 800087e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d107      	bne.n	8000896 <etx_receive_chunk+0xd2>
    for( uint16_t i = 0u; i < data_len; i++ )
 8000886:	897b      	ldrh	r3, [r7, #10]
 8000888:	3301      	adds	r3, #1
 800088a:	817b      	strh	r3, [r7, #10]
 800088c:	897a      	ldrh	r2, [r7, #10]
 800088e:	893b      	ldrh	r3, [r7, #8]
 8000890:	429a      	cmp	r2, r3
 8000892:	d3e6      	bcc.n	8000862 <etx_receive_chunk+0x9e>
 8000894:	e000      	b.n	8000898 <etx_receive_chunk+0xd4>
      {
        break;
 8000896:	bf00      	nop
      }
    }

    //Get the CRC.
    ret = HAL_UART_Receive( &huart2, &buf[index], 4, HAL_MAX_DELAY );
 8000898:	89bb      	ldrh	r3, [r7, #12]
 800089a:	687a      	ldr	r2, [r7, #4]
 800089c:	18d1      	adds	r1, r2, r3
 800089e:	f04f 33ff 	mov.w	r3, #4294967295
 80008a2:	2204      	movs	r2, #4
 80008a4:	4823      	ldr	r0, [pc, #140]	; (8000934 <etx_receive_chunk+0x170>)
 80008a6:	f001 ffb2 	bl	800280e <HAL_UART_Receive>
 80008aa:	4603      	mov	r3, r0
 80008ac:	81fb      	strh	r3, [r7, #14]
    if( ret != HAL_OK )
 80008ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d123      	bne.n	80008fe <etx_receive_chunk+0x13a>
    {
      break;
    }
    index += 4u;
 80008b6:	89bb      	ldrh	r3, [r7, #12]
 80008b8:	3304      	adds	r3, #4
 80008ba:	81bb      	strh	r3, [r7, #12]

    //TODO: Add CRC verification

    //receive EOF byte (1byte)
    ret = HAL_UART_Receive( &huart2, &buf[index], 1, HAL_MAX_DELAY );
 80008bc:	89bb      	ldrh	r3, [r7, #12]
 80008be:	687a      	ldr	r2, [r7, #4]
 80008c0:	18d1      	adds	r1, r2, r3
 80008c2:	f04f 33ff 	mov.w	r3, #4294967295
 80008c6:	2201      	movs	r2, #1
 80008c8:	481a      	ldr	r0, [pc, #104]	; (8000934 <etx_receive_chunk+0x170>)
 80008ca:	f001 ffa0 	bl	800280e <HAL_UART_Receive>
 80008ce:	4603      	mov	r3, r0
 80008d0:	81fb      	strh	r3, [r7, #14]
    if( ret != HAL_OK )
 80008d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d113      	bne.n	8000902 <etx_receive_chunk+0x13e>
    {
      break;
    }

    if( buf[index++] != ETX_OTA_EOF )
 80008da:	89bb      	ldrh	r3, [r7, #12]
 80008dc:	1c5a      	adds	r2, r3, #1
 80008de:	81ba      	strh	r2, [r7, #12]
 80008e0:	461a      	mov	r2, r3
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	4413      	add	r3, r2
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	2bbb      	cmp	r3, #187	; 0xbb
 80008ea:	d00b      	beq.n	8000904 <etx_receive_chunk+0x140>
    {
      //Not received end of frame
      ret = ETX_OTA_EX_ERR;
 80008ec:	2301      	movs	r3, #1
 80008ee:	81fb      	strh	r3, [r7, #14]
      break;
 80008f0:	e008      	b.n	8000904 <etx_receive_chunk+0x140>
      break;
 80008f2:	bf00      	nop
 80008f4:	e006      	b.n	8000904 <etx_receive_chunk+0x140>
      break;
 80008f6:	bf00      	nop
 80008f8:	e004      	b.n	8000904 <etx_receive_chunk+0x140>
      break;
 80008fa:	bf00      	nop
 80008fc:	e002      	b.n	8000904 <etx_receive_chunk+0x140>
      break;
 80008fe:	bf00      	nop
 8000900:	e000      	b.n	8000904 <etx_receive_chunk+0x140>
      break;
 8000902:	bf00      	nop
    }

  }while( false );

  if( ret != HAL_OK )
 8000904:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <etx_receive_chunk+0x14c>
  {
    //clear the index if error
    index = 0u;
 800090c:	2300      	movs	r3, #0
 800090e:	81bb      	strh	r3, [r7, #12]
  }

  if( max_len < index )
 8000910:	887a      	ldrh	r2, [r7, #2]
 8000912:	89bb      	ldrh	r3, [r7, #12]
 8000914:	429a      	cmp	r2, r3
 8000916:	d207      	bcs.n	8000928 <etx_receive_chunk+0x164>
  {
    printf("Received more data than expected. Expected = %d, Received = %d\r\n",
 8000918:	887b      	ldrh	r3, [r7, #2]
 800091a:	89ba      	ldrh	r2, [r7, #12]
 800091c:	4619      	mov	r1, r3
 800091e:	4806      	ldr	r0, [pc, #24]	; (8000938 <etx_receive_chunk+0x174>)
 8000920:	f002 fbaa 	bl	8003078 <iprintf>
                                                              max_len, index );
    index = 0u;
 8000924:	2300      	movs	r3, #0
 8000926:	81bb      	strh	r3, [r7, #12]
  }

  return index;
 8000928:	89bb      	ldrh	r3, [r7, #12]
}
 800092a:	4618      	mov	r0, r3
 800092c:	3710      	adds	r7, #16
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	20000084 	.word	0x20000084
 8000938:	08003ee0 	.word	0x08003ee0

0800093c <etx_ota_send_resp>:
  * @brief Send the response.
  * @param type ACK or NACK
  * @retval none
  */
static void etx_ota_send_resp( uint8_t type )
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b086      	sub	sp, #24
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	71fb      	strb	r3, [r7, #7]
  ETX_OTA_RESP_ rsp =
 8000946:	23aa      	movs	r3, #170	; 0xaa
 8000948:	733b      	strb	r3, [r7, #12]
 800094a:	2303      	movs	r3, #3
 800094c:	737b      	strb	r3, [r7, #13]
 800094e:	2301      	movs	r3, #1
 8000950:	81fb      	strh	r3, [r7, #14]
 8000952:	79fb      	ldrb	r3, [r7, #7]
 8000954:	743b      	strb	r3, [r7, #16]
 8000956:	2300      	movs	r3, #0
 8000958:	747b      	strb	r3, [r7, #17]
 800095a:	2300      	movs	r3, #0
 800095c:	74bb      	strb	r3, [r7, #18]
 800095e:	2300      	movs	r3, #0
 8000960:	74fb      	strb	r3, [r7, #19]
 8000962:	2300      	movs	r3, #0
 8000964:	753b      	strb	r3, [r7, #20]
 8000966:	23bb      	movs	r3, #187	; 0xbb
 8000968:	757b      	strb	r3, [r7, #21]
    .crc         = 0u,                //TODO: Add CRC
    .eof         = ETX_OTA_EOF
  };

  //send response
  HAL_UART_Transmit(&huart2, (uint8_t *)&rsp, sizeof(ETX_OTA_RESP_), HAL_MAX_DELAY);
 800096a:	f107 010c 	add.w	r1, r7, #12
 800096e:	f04f 33ff 	mov.w	r3, #4294967295
 8000972:	220a      	movs	r2, #10
 8000974:	4803      	ldr	r0, [pc, #12]	; (8000984 <etx_ota_send_resp+0x48>)
 8000976:	f001 feb8 	bl	80026ea <HAL_UART_Transmit>
}
 800097a:	bf00      	nop
 800097c:	3718      	adds	r7, #24
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20000084 	.word	0x20000084

08000988 <write_data_to_flash_app>:
  * @is_first_block true - if this is first block, false - not first block
  * @retval HAL_StatusTypeDef
  */
static HAL_StatusTypeDef write_data_to_flash_app( uint8_t *data,
                                        uint16_t data_len, bool is_first_block )
{
 8000988:	b5b0      	push	{r4, r5, r7, lr}
 800098a:	b08a      	sub	sp, #40	; 0x28
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
 8000990:	460b      	mov	r3, r1
 8000992:	807b      	strh	r3, [r7, #2]
 8000994:	4613      	mov	r3, r2
 8000996:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret;

  do
  {
    ret = HAL_FLASH_Unlock();
 8000998:	f000 fdb8 	bl	800150c <HAL_FLASH_Unlock>
 800099c:	4603      	mov	r3, r0
 800099e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( ret != HAL_OK )
 80009a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d159      	bne.n	8000a5e <write_data_to_flash_app+0xd6>
    {
      break;
    }

    //No need to erase every time. Erase only the first time.
    if( is_first_block )
 80009aa:	787b      	ldrb	r3, [r7, #1]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d019      	beq.n	80009e4 <write_data_to_flash_app+0x5c>
    {

      printf("Erasing the Flash memory...\r\n");
 80009b0:	4830      	ldr	r0, [pc, #192]	; (8000a74 <write_data_to_flash_app+0xec>)
 80009b2:	f002 fbc7 	bl	8003144 <puts>
      //Erase the Flash
      FLASH_EraseInitTypeDef EraseInitStruct;
      uint32_t SectorError;

      EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 80009b6:	2300      	movs	r3, #0
 80009b8:	60fb      	str	r3, [r7, #12]
      EraseInitStruct.Sector        = FLASH_SECTOR_5;
 80009ba:	2305      	movs	r3, #5
 80009bc:	617b      	str	r3, [r7, #20]
      EraseInitStruct.NbSectors     = 2;                    //erase 2 sectors(5,6)
 80009be:	2302      	movs	r3, #2
 80009c0:	61bb      	str	r3, [r7, #24]
      EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 80009c2:	2302      	movs	r3, #2
 80009c4:	61fb      	str	r3, [r7, #28]

      ret = HAL_FLASHEx_Erase( &EraseInitStruct, &SectorError );
 80009c6:	f107 0208 	add.w	r2, r7, #8
 80009ca:	f107 030c 	add.w	r3, r7, #12
 80009ce:	4611      	mov	r1, r2
 80009d0:	4618      	mov	r0, r3
 80009d2:	f000 ff0d 	bl	80017f0 <HAL_FLASHEx_Erase>
 80009d6:	4603      	mov	r3, r0
 80009d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      if( ret != HAL_OK )
 80009dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d13e      	bne.n	8000a62 <write_data_to_flash_app+0xda>
      {
        break;
      }
    }

    for(int i = 0; i < data_len; i++ )
 80009e4:	2300      	movs	r3, #0
 80009e6:	623b      	str	r3, [r7, #32]
 80009e8:	e028      	b.n	8000a3c <write_data_to_flash_app+0xb4>
    {
      ret = HAL_FLASH_Program( FLASH_TYPEPROGRAM_BYTE,
 80009ea:	4b23      	ldr	r3, [pc, #140]	; (8000a78 <write_data_to_flash_app+0xf0>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 80009f2:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
                               (ETX_APP_FLASH_ADDR + ota_fw_received_size),
                               data[4+i]
 80009f6:	6a3b      	ldr	r3, [r7, #32]
 80009f8:	3304      	adds	r3, #4
 80009fa:	461a      	mov	r2, r3
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	4413      	add	r3, r2
 8000a00:	781b      	ldrb	r3, [r3, #0]
      ret = HAL_FLASH_Program( FLASH_TYPEPROGRAM_BYTE,
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	2200      	movs	r2, #0
 8000a06:	461c      	mov	r4, r3
 8000a08:	4615      	mov	r5, r2
 8000a0a:	4622      	mov	r2, r4
 8000a0c:	462b      	mov	r3, r5
 8000a0e:	2000      	movs	r0, #0
 8000a10:	f000 fd28 	bl	8001464 <HAL_FLASH_Program>
 8000a14:	4603      	mov	r3, r0
 8000a16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                             );
      if( ret == HAL_OK )
 8000a1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d105      	bne.n	8000a2e <write_data_to_flash_app+0xa6>
      {
        //update the data count
        ota_fw_received_size += 1;
 8000a22:	4b15      	ldr	r3, [pc, #84]	; (8000a78 <write_data_to_flash_app+0xf0>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	3301      	adds	r3, #1
 8000a28:	4a13      	ldr	r2, [pc, #76]	; (8000a78 <write_data_to_flash_app+0xf0>)
 8000a2a:	6013      	str	r3, [r2, #0]
 8000a2c:	e003      	b.n	8000a36 <write_data_to_flash_app+0xae>
      }
      else
      {
        printf("Flash Write Error\r\n");
 8000a2e:	4813      	ldr	r0, [pc, #76]	; (8000a7c <write_data_to_flash_app+0xf4>)
 8000a30:	f002 fb88 	bl	8003144 <puts>
        break;
 8000a34:	e006      	b.n	8000a44 <write_data_to_flash_app+0xbc>
    for(int i = 0; i < data_len; i++ )
 8000a36:	6a3b      	ldr	r3, [r7, #32]
 8000a38:	3301      	adds	r3, #1
 8000a3a:	623b      	str	r3, [r7, #32]
 8000a3c:	887b      	ldrh	r3, [r7, #2]
 8000a3e:	6a3a      	ldr	r2, [r7, #32]
 8000a40:	429a      	cmp	r2, r3
 8000a42:	dbd2      	blt.n	80009ea <write_data_to_flash_app+0x62>
      }
    }

    if( ret != HAL_OK )
 8000a44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d10c      	bne.n	8000a66 <write_data_to_flash_app+0xde>
    {
      break;
    }

    ret = HAL_FLASH_Lock();
 8000a4c:	f000 fd80 	bl	8001550 <HAL_FLASH_Lock>
 8000a50:	4603      	mov	r3, r0
 8000a52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( ret != HAL_OK )
 8000a56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	e004      	b.n	8000a68 <write_data_to_flash_app+0xe0>
      break;
 8000a5e:	bf00      	nop
 8000a60:	e002      	b.n	8000a68 <write_data_to_flash_app+0xe0>
        break;
 8000a62:	bf00      	nop
 8000a64:	e000      	b.n	8000a68 <write_data_to_flash_app+0xe0>
      break;
 8000a66:	bf00      	nop
    {
      break;
    }
  }while( false );

  return ret;
 8000a68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	3728      	adds	r7, #40	; 0x28
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bdb0      	pop	{r4, r5, r7, pc}
 8000a74:	08003f24 	.word	0x08003f24
 8000a78:	200004dc 	.word	0x200004dc
 8000a7c:	08003f44 	.word	0x08003f44

08000a80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a86:	f000 fb57 	bl	8001138 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a8a:	f000 f855 	bl	8000b38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a8e:	f000 f905 	bl	8000c9c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000a92:	f000 f8af 	bl	8000bf4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000a96:	f000 f8d7 	bl	8000c48 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Starting Bootloader(%d.%d)\r\n", BL_Version[0], BL_Version[1] );
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	481e      	ldr	r0, [pc, #120]	; (8000b1c <main+0x9c>)
 8000aa2:	f002 fae9 	bl	8003078 <iprintf>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	2101      	movs	r1, #1
 8000aaa:	481d      	ldr	r0, [pc, #116]	; (8000b20 <main+0xa0>)
 8000aac:	f001 f95e 	bl	8001d6c <HAL_GPIO_WritePin>
  HAL_Delay(2000);
 8000ab0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ab4:	f000 fbb2 	bl	800121c <HAL_Delay>

  /* Check the GPIO for 3 seconds */
    GPIO_PinState OTA_Pin_State;
    uint32_t end_tick = HAL_GetTick() + 3000;
 8000ab8:	f000 fba4 	bl	8001204 <HAL_GetTick>
 8000abc:	4603      	mov	r3, r0
 8000abe:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8000ac2:	60fb      	str	r3, [r7, #12]

    printf("Press the user Button PC13 to trigger OTA Update...\r\n");
 8000ac4:	4817      	ldr	r0, [pc, #92]	; (8000b24 <main+0xa4>)
 8000ac6:	f002 fb3d 	bl	8003144 <puts>
    do
    {
  	  OTA_Pin_State = HAL_GPIO_ReadPin(Button_GPIO_Port, Button_Pin);
 8000aca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ace:	4816      	ldr	r0, [pc, #88]	; (8000b28 <main+0xa8>)
 8000ad0:	f001 f934 	bl	8001d3c <HAL_GPIO_ReadPin>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	72fb      	strb	r3, [r7, #11]
  	  uint32_t current_tick = HAL_GetTick();
 8000ad8:	f000 fb94 	bl	8001204 <HAL_GetTick>
 8000adc:	6078      	str	r0, [r7, #4]

  	  /* Check the button is pressed or not for 3 seconds */
  	  if((OTA_Pin_State != GPIO_PIN_RESET) || current_tick > end_tick)
 8000ade:	7afb      	ldrb	r3, [r7, #11]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d104      	bne.n	8000aee <main+0x6e>
 8000ae4:	687a      	ldr	r2, [r7, #4]
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	d800      	bhi.n	8000aee <main+0x6e>
    {
 8000aec:	e7ed      	b.n	8000aca <main+0x4a>
  		  break; // Time out
    } while (1);

    /* Start the firmware or application update */
    if(OTA_Pin_State == GPIO_PIN_SET)
 8000aee:	7afb      	ldrb	r3, [r7, #11]
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d110      	bne.n	8000b16 <main+0x96>
    {
  	  printf("Starting Firmware Download !!! \r\n");
 8000af4:	480d      	ldr	r0, [pc, #52]	; (8000b2c <main+0xac>)
 8000af6:	f002 fb25 	bl	8003144 <puts>
  	  /* OTA request, receive the data from uart and flash */
  	  if(etx_ota_download_and_flash() != ETX_OTA_EX_OK)
 8000afa:	f7ff fd3f 	bl	800057c <etx_ota_download_and_flash>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d003      	beq.n	8000b0c <main+0x8c>
  	  {
  		  /* Error, don't process */
  		  printf("OTA Update: ERROR! HALT \r\n");
 8000b04:	480a      	ldr	r0, [pc, #40]	; (8000b30 <main+0xb0>)
 8000b06:	f002 fb1d 	bl	8003144 <puts>
  		  while (1);
 8000b0a:	e7fe      	b.n	8000b0a <main+0x8a>
  	  }
  	  else
  	  {
  		  /* Reset to load the new applicaiton */
  		  printf("Firmware update is done! Rebooting... \r\n");
 8000b0c:	4809      	ldr	r0, [pc, #36]	; (8000b34 <main+0xb4>)
 8000b0e:	f002 fb19 	bl	8003144 <puts>
  		  HAL_NVIC_SystemReset();
 8000b12:	f000 fc96 	bl	8001442 <HAL_NVIC_SystemReset>
  	  }
    }

  goto_application();
 8000b16:	f000 f941 	bl	8000d9c <goto_application>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b1a:	e7fe      	b.n	8000b1a <main+0x9a>
 8000b1c:	08003f58 	.word	0x08003f58
 8000b20:	40020400 	.word	0x40020400
 8000b24:	08003f78 	.word	0x08003f78
 8000b28:	40020800 	.word	0x40020800
 8000b2c:	08003fb0 	.word	0x08003fb0
 8000b30:	08003fd4 	.word	0x08003fd4
 8000b34:	08003ff0 	.word	0x08003ff0

08000b38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b094      	sub	sp, #80	; 0x50
 8000b3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b3e:	f107 0320 	add.w	r3, r7, #32
 8000b42:	2230      	movs	r2, #48	; 0x30
 8000b44:	2100      	movs	r1, #0
 8000b46:	4618      	mov	r0, r3
 8000b48:	f002 fbdc 	bl	8003304 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b4c:	f107 030c 	add.w	r3, r7, #12
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	605a      	str	r2, [r3, #4]
 8000b56:	609a      	str	r2, [r3, #8]
 8000b58:	60da      	str	r2, [r3, #12]
 8000b5a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	60bb      	str	r3, [r7, #8]
 8000b60:	4b22      	ldr	r3, [pc, #136]	; (8000bec <SystemClock_Config+0xb4>)
 8000b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b64:	4a21      	ldr	r2, [pc, #132]	; (8000bec <SystemClock_Config+0xb4>)
 8000b66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b6a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b6c:	4b1f      	ldr	r3, [pc, #124]	; (8000bec <SystemClock_Config+0xb4>)
 8000b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b74:	60bb      	str	r3, [r7, #8]
 8000b76:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b78:	2300      	movs	r3, #0
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	4b1c      	ldr	r3, [pc, #112]	; (8000bf0 <SystemClock_Config+0xb8>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a1b      	ldr	r2, [pc, #108]	; (8000bf0 <SystemClock_Config+0xb8>)
 8000b82:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b86:	6013      	str	r3, [r2, #0]
 8000b88:	4b19      	ldr	r3, [pc, #100]	; (8000bf0 <SystemClock_Config+0xb8>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b90:	607b      	str	r3, [r7, #4]
 8000b92:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b94:	2302      	movs	r3, #2
 8000b96:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b9c:	2310      	movs	r3, #16
 8000b9e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba4:	f107 0320 	add.w	r3, r7, #32
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f001 f8f9 	bl	8001da0 <HAL_RCC_OscConfig>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000bb4:	f000 f90c 	bl	8000dd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bb8:	230f      	movs	r3, #15
 8000bba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bcc:	f107 030c 	add.w	r3, r7, #12
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f001 fb5c 	bl	8002290 <HAL_RCC_ClockConfig>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000bde:	f000 f8f7 	bl	8000dd0 <Error_Handler>
  }
}
 8000be2:	bf00      	nop
 8000be4:	3750      	adds	r7, #80	; 0x50
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40023800 	.word	0x40023800
 8000bf0:	40007000 	.word	0x40007000

08000bf4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bf8:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <MX_USART1_UART_Init+0x4c>)
 8000bfa:	4a12      	ldr	r2, [pc, #72]	; (8000c44 <MX_USART1_UART_Init+0x50>)
 8000bfc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000bfe:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <MX_USART1_UART_Init+0x4c>)
 8000c00:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000c04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c06:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <MX_USART1_UART_Init+0x4c>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <MX_USART1_UART_Init+0x4c>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c12:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <MX_USART1_UART_Init+0x4c>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c18:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <MX_USART1_UART_Init+0x4c>)
 8000c1a:	220c      	movs	r2, #12
 8000c1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c1e:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <MX_USART1_UART_Init+0x4c>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c24:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <MX_USART1_UART_Init+0x4c>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c2a:	4805      	ldr	r0, [pc, #20]	; (8000c40 <MX_USART1_UART_Init+0x4c>)
 8000c2c:	f001 fd10 	bl	8002650 <HAL_UART_Init>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c36:	f000 f8cb 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	200004e0 	.word	0x200004e0
 8000c44:	40011000 	.word	0x40011000

08000c48 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c4c:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <MX_USART2_UART_Init+0x4c>)
 8000c4e:	4a12      	ldr	r2, [pc, #72]	; (8000c98 <MX_USART2_UART_Init+0x50>)
 8000c50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000c52:	4b10      	ldr	r3, [pc, #64]	; (8000c94 <MX_USART2_UART_Init+0x4c>)
 8000c54:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000c58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c5a:	4b0e      	ldr	r3, [pc, #56]	; (8000c94 <MX_USART2_UART_Init+0x4c>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c60:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <MX_USART2_UART_Init+0x4c>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c66:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <MX_USART2_UART_Init+0x4c>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c6c:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <MX_USART2_UART_Init+0x4c>)
 8000c6e:	220c      	movs	r2, #12
 8000c70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c72:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <MX_USART2_UART_Init+0x4c>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <MX_USART2_UART_Init+0x4c>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c7e:	4805      	ldr	r0, [pc, #20]	; (8000c94 <MX_USART2_UART_Init+0x4c>)
 8000c80:	f001 fce6 	bl	8002650 <HAL_UART_Init>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c8a:	f000 f8a1 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	20000084 	.word	0x20000084
 8000c98:	40004400 	.word	0x40004400

08000c9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08a      	sub	sp, #40	; 0x28
 8000ca0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca2:	f107 0314 	add.w	r3, r7, #20
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
 8000caa:	605a      	str	r2, [r3, #4]
 8000cac:	609a      	str	r2, [r3, #8]
 8000cae:	60da      	str	r2, [r3, #12]
 8000cb0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	613b      	str	r3, [r7, #16]
 8000cb6:	4b2d      	ldr	r3, [pc, #180]	; (8000d6c <MX_GPIO_Init+0xd0>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	4a2c      	ldr	r2, [pc, #176]	; (8000d6c <MX_GPIO_Init+0xd0>)
 8000cbc:	f043 0304 	orr.w	r3, r3, #4
 8000cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc2:	4b2a      	ldr	r3, [pc, #168]	; (8000d6c <MX_GPIO_Init+0xd0>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	f003 0304 	and.w	r3, r3, #4
 8000cca:	613b      	str	r3, [r7, #16]
 8000ccc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60fb      	str	r3, [r7, #12]
 8000cd2:	4b26      	ldr	r3, [pc, #152]	; (8000d6c <MX_GPIO_Init+0xd0>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	4a25      	ldr	r2, [pc, #148]	; (8000d6c <MX_GPIO_Init+0xd0>)
 8000cd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cde:	4b23      	ldr	r3, [pc, #140]	; (8000d6c <MX_GPIO_Init+0xd0>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	60bb      	str	r3, [r7, #8]
 8000cee:	4b1f      	ldr	r3, [pc, #124]	; (8000d6c <MX_GPIO_Init+0xd0>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a1e      	ldr	r2, [pc, #120]	; (8000d6c <MX_GPIO_Init+0xd0>)
 8000cf4:	f043 0301 	orr.w	r3, r3, #1
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b1c      	ldr	r3, [pc, #112]	; (8000d6c <MX_GPIO_Init+0xd0>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	60bb      	str	r3, [r7, #8]
 8000d04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	4b18      	ldr	r3, [pc, #96]	; (8000d6c <MX_GPIO_Init+0xd0>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	4a17      	ldr	r2, [pc, #92]	; (8000d6c <MX_GPIO_Init+0xd0>)
 8000d10:	f043 0302 	orr.w	r3, r3, #2
 8000d14:	6313      	str	r3, [r2, #48]	; 0x30
 8000d16:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <MX_GPIO_Init+0xd0>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	f003 0302 	and.w	r3, r3, #2
 8000d1e:	607b      	str	r3, [r7, #4]
 8000d20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000d22:	2200      	movs	r2, #0
 8000d24:	2101      	movs	r1, #1
 8000d26:	4812      	ldr	r0, [pc, #72]	; (8000d70 <MX_GPIO_Init+0xd4>)
 8000d28:	f001 f820 	bl	8001d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8000d2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d32:	2300      	movs	r3, #0
 8000d34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8000d3a:	f107 0314 	add.w	r3, r7, #20
 8000d3e:	4619      	mov	r1, r3
 8000d40:	480c      	ldr	r0, [pc, #48]	; (8000d74 <MX_GPIO_Init+0xd8>)
 8000d42:	f000 fe77 	bl	8001a34 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000d46:	2301      	movs	r3, #1
 8000d48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d52:	2300      	movs	r3, #0
 8000d54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000d56:	f107 0314 	add.w	r3, r7, #20
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4804      	ldr	r0, [pc, #16]	; (8000d70 <MX_GPIO_Init+0xd4>)
 8000d5e:	f000 fe69 	bl	8001a34 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d62:	bf00      	nop
 8000d64:	3728      	adds	r7, #40	; 0x28
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40023800 	.word	0x40023800
 8000d70:	40020400 	.word	0x40020400
 8000d74:	40020800 	.word	0x40020800

08000d78 <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000d80:	1d39      	adds	r1, r7, #4
 8000d82:	f04f 33ff 	mov.w	r3, #4294967295
 8000d86:	2201      	movs	r2, #1
 8000d88:	4803      	ldr	r0, [pc, #12]	; (8000d98 <__io_putchar+0x20>)
 8000d8a:	f001 fcae 	bl	80026ea <HAL_UART_Transmit>
  return ch;
 8000d8e:	687b      	ldr	r3, [r7, #4]
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	200004e0 	.word	0x200004e0

08000d9c <goto_application>:

static void goto_application(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
  printf("Gonna Jump to Application\r\n");
 8000da2:	4808      	ldr	r0, [pc, #32]	; (8000dc4 <goto_application+0x28>)
 8000da4:	f002 f9ce 	bl	8003144 <puts>

  void (*app_reset_handler)(void) = (void*)(*((volatile uint32_t*) (0x08040000 + 4U)));
 8000da8:	4b07      	ldr	r3, [pc, #28]	; (8000dc8 <goto_application+0x2c>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	607b      	str	r3, [r7, #4]

  //__set_MSP(*(volatile uint32_t*) ETX_APP_FLASH_ADDR);

  // Turn OFF the Green Led to tell the user that Bootloader is not running
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET );    //Green LED OFF
 8000dae:	2200      	movs	r2, #0
 8000db0:	2101      	movs	r1, #1
 8000db2:	4806      	ldr	r0, [pc, #24]	; (8000dcc <goto_application+0x30>)
 8000db4:	f000 ffda 	bl	8001d6c <HAL_GPIO_WritePin>
  app_reset_handler();    //call the app reset handler
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	4798      	blx	r3
}
 8000dbc:	bf00      	nop
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	08004018 	.word	0x08004018
 8000dc8:	08040004 	.word	0x08040004
 8000dcc:	40020400 	.word	0x40020400

08000dd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dd4:	b672      	cpsid	i
}
 8000dd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dd8:	e7fe      	b.n	8000dd8 <Error_Handler+0x8>
	...

08000ddc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	607b      	str	r3, [r7, #4]
 8000de6:	4b10      	ldr	r3, [pc, #64]	; (8000e28 <HAL_MspInit+0x4c>)
 8000de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dea:	4a0f      	ldr	r2, [pc, #60]	; (8000e28 <HAL_MspInit+0x4c>)
 8000dec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000df0:	6453      	str	r3, [r2, #68]	; 0x44
 8000df2:	4b0d      	ldr	r3, [pc, #52]	; (8000e28 <HAL_MspInit+0x4c>)
 8000df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dfa:	607b      	str	r3, [r7, #4]
 8000dfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	603b      	str	r3, [r7, #0]
 8000e02:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <HAL_MspInit+0x4c>)
 8000e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e06:	4a08      	ldr	r2, [pc, #32]	; (8000e28 <HAL_MspInit+0x4c>)
 8000e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e0e:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <HAL_MspInit+0x4c>)
 8000e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e16:	603b      	str	r3, [r7, #0]
 8000e18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	370c      	adds	r7, #12
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	40023800 	.word	0x40023800

08000e2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b08c      	sub	sp, #48	; 0x30
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e34:	f107 031c 	add.w	r3, r7, #28
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]
 8000e42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a32      	ldr	r2, [pc, #200]	; (8000f14 <HAL_UART_MspInit+0xe8>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d12d      	bne.n	8000eaa <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61bb      	str	r3, [r7, #24]
 8000e52:	4b31      	ldr	r3, [pc, #196]	; (8000f18 <HAL_UART_MspInit+0xec>)
 8000e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e56:	4a30      	ldr	r2, [pc, #192]	; (8000f18 <HAL_UART_MspInit+0xec>)
 8000e58:	f043 0310 	orr.w	r3, r3, #16
 8000e5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e5e:	4b2e      	ldr	r3, [pc, #184]	; (8000f18 <HAL_UART_MspInit+0xec>)
 8000e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e62:	f003 0310 	and.w	r3, r3, #16
 8000e66:	61bb      	str	r3, [r7, #24]
 8000e68:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	617b      	str	r3, [r7, #20]
 8000e6e:	4b2a      	ldr	r3, [pc, #168]	; (8000f18 <HAL_UART_MspInit+0xec>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	4a29      	ldr	r2, [pc, #164]	; (8000f18 <HAL_UART_MspInit+0xec>)
 8000e74:	f043 0301 	orr.w	r3, r3, #1
 8000e78:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7a:	4b27      	ldr	r3, [pc, #156]	; (8000f18 <HAL_UART_MspInit+0xec>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	617b      	str	r3, [r7, #20]
 8000e84:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e86:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e94:	2303      	movs	r3, #3
 8000e96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e98:	2307      	movs	r3, #7
 8000e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9c:	f107 031c 	add.w	r3, r7, #28
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	481e      	ldr	r0, [pc, #120]	; (8000f1c <HAL_UART_MspInit+0xf0>)
 8000ea4:	f000 fdc6 	bl	8001a34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ea8:	e030      	b.n	8000f0c <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a1c      	ldr	r2, [pc, #112]	; (8000f20 <HAL_UART_MspInit+0xf4>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d12b      	bne.n	8000f0c <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	613b      	str	r3, [r7, #16]
 8000eb8:	4b17      	ldr	r3, [pc, #92]	; (8000f18 <HAL_UART_MspInit+0xec>)
 8000eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebc:	4a16      	ldr	r2, [pc, #88]	; (8000f18 <HAL_UART_MspInit+0xec>)
 8000ebe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ec2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ec4:	4b14      	ldr	r3, [pc, #80]	; (8000f18 <HAL_UART_MspInit+0xec>)
 8000ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ecc:	613b      	str	r3, [r7, #16]
 8000ece:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	4b10      	ldr	r3, [pc, #64]	; (8000f18 <HAL_UART_MspInit+0xec>)
 8000ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed8:	4a0f      	ldr	r2, [pc, #60]	; (8000f18 <HAL_UART_MspInit+0xec>)
 8000eda:	f043 0301 	orr.w	r3, r3, #1
 8000ede:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee0:	4b0d      	ldr	r3, [pc, #52]	; (8000f18 <HAL_UART_MspInit+0xec>)
 8000ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee4:	f003 0301 	and.w	r3, r3, #1
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000eec:	230c      	movs	r3, #12
 8000eee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000efc:	2307      	movs	r3, #7
 8000efe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f00:	f107 031c 	add.w	r3, r7, #28
 8000f04:	4619      	mov	r1, r3
 8000f06:	4805      	ldr	r0, [pc, #20]	; (8000f1c <HAL_UART_MspInit+0xf0>)
 8000f08:	f000 fd94 	bl	8001a34 <HAL_GPIO_Init>
}
 8000f0c:	bf00      	nop
 8000f0e:	3730      	adds	r7, #48	; 0x30
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40011000 	.word	0x40011000
 8000f18:	40023800 	.word	0x40023800
 8000f1c:	40020000 	.word	0x40020000
 8000f20:	40004400 	.word	0x40004400

08000f24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f28:	e7fe      	b.n	8000f28 <NMI_Handler+0x4>

08000f2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f2e:	e7fe      	b.n	8000f2e <HardFault_Handler+0x4>

08000f30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f34:	e7fe      	b.n	8000f34 <MemManage_Handler+0x4>

08000f36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f36:	b480      	push	{r7}
 8000f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f3a:	e7fe      	b.n	8000f3a <BusFault_Handler+0x4>

08000f3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f40:	e7fe      	b.n	8000f40 <UsageFault_Handler+0x4>

08000f42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f42:	b480      	push	{r7}
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr

08000f5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f70:	f000 f934 	bl	80011dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f74:	bf00      	nop
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f84:	2300      	movs	r3, #0
 8000f86:	617b      	str	r3, [r7, #20]
 8000f88:	e00a      	b.n	8000fa0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f8a:	f3af 8000 	nop.w
 8000f8e:	4601      	mov	r1, r0
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	1c5a      	adds	r2, r3, #1
 8000f94:	60ba      	str	r2, [r7, #8]
 8000f96:	b2ca      	uxtb	r2, r1
 8000f98:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	617b      	str	r3, [r7, #20]
 8000fa0:	697a      	ldr	r2, [r7, #20]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	dbf0      	blt.n	8000f8a <_read+0x12>
  }

  return len;
 8000fa8:	687b      	ldr	r3, [r7, #4]
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3718      	adds	r7, #24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b086      	sub	sp, #24
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	60f8      	str	r0, [r7, #12]
 8000fba:	60b9      	str	r1, [r7, #8]
 8000fbc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	617b      	str	r3, [r7, #20]
 8000fc2:	e009      	b.n	8000fd8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	1c5a      	adds	r2, r3, #1
 8000fc8:	60ba      	str	r2, [r7, #8]
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff fed3 	bl	8000d78 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	617b      	str	r3, [r7, #20]
 8000fd8:	697a      	ldr	r2, [r7, #20]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	dbf1      	blt.n	8000fc4 <_write+0x12>
  }
  return len;
 8000fe0:	687b      	ldr	r3, [r7, #4]
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3718      	adds	r7, #24
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <_close>:

int _close(int file)
{
 8000fea:	b480      	push	{r7}
 8000fec:	b083      	sub	sp, #12
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ff2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr

08001002 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001002:	b480      	push	{r7}
 8001004:	b083      	sub	sp, #12
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
 800100a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001012:	605a      	str	r2, [r3, #4]
  return 0;
 8001014:	2300      	movs	r3, #0
}
 8001016:	4618      	mov	r0, r3
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr

08001022 <_isatty>:

int _isatty(int file)
{
 8001022:	b480      	push	{r7}
 8001024:	b083      	sub	sp, #12
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800102a:	2301      	movs	r3, #1
}
 800102c:	4618      	mov	r0, r3
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001038:	b480      	push	{r7}
 800103a:	b085      	sub	sp, #20
 800103c:	af00      	add	r7, sp, #0
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001044:	2300      	movs	r3, #0
}
 8001046:	4618      	mov	r0, r3
 8001048:	3714      	adds	r7, #20
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
	...

08001054 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b086      	sub	sp, #24
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800105c:	4a14      	ldr	r2, [pc, #80]	; (80010b0 <_sbrk+0x5c>)
 800105e:	4b15      	ldr	r3, [pc, #84]	; (80010b4 <_sbrk+0x60>)
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001068:	4b13      	ldr	r3, [pc, #76]	; (80010b8 <_sbrk+0x64>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d102      	bne.n	8001076 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001070:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <_sbrk+0x64>)
 8001072:	4a12      	ldr	r2, [pc, #72]	; (80010bc <_sbrk+0x68>)
 8001074:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001076:	4b10      	ldr	r3, [pc, #64]	; (80010b8 <_sbrk+0x64>)
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4413      	add	r3, r2
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	429a      	cmp	r2, r3
 8001082:	d207      	bcs.n	8001094 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001084:	f002 f98c 	bl	80033a0 <__errno>
 8001088:	4603      	mov	r3, r0
 800108a:	220c      	movs	r2, #12
 800108c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800108e:	f04f 33ff 	mov.w	r3, #4294967295
 8001092:	e009      	b.n	80010a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001094:	4b08      	ldr	r3, [pc, #32]	; (80010b8 <_sbrk+0x64>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800109a:	4b07      	ldr	r3, [pc, #28]	; (80010b8 <_sbrk+0x64>)
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4413      	add	r3, r2
 80010a2:	4a05      	ldr	r2, [pc, #20]	; (80010b8 <_sbrk+0x64>)
 80010a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010a6:	68fb      	ldr	r3, [r7, #12]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3718      	adds	r7, #24
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	20020000 	.word	0x20020000
 80010b4:	00000400 	.word	0x00000400
 80010b8:	20000524 	.word	0x20000524
 80010bc:	20000698 	.word	0x20000698

080010c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010c4:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <SystemInit+0x20>)
 80010c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010ca:	4a05      	ldr	r2, [pc, #20]	; (80010e0 <SystemInit+0x20>)
 80010cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80010e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800111c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010e8:	480d      	ldr	r0, [pc, #52]	; (8001120 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010ea:	490e      	ldr	r1, [pc, #56]	; (8001124 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010ec:	4a0e      	ldr	r2, [pc, #56]	; (8001128 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010f0:	e002      	b.n	80010f8 <LoopCopyDataInit>

080010f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010f6:	3304      	adds	r3, #4

080010f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010fc:	d3f9      	bcc.n	80010f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010fe:	4a0b      	ldr	r2, [pc, #44]	; (800112c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001100:	4c0b      	ldr	r4, [pc, #44]	; (8001130 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001102:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001104:	e001      	b.n	800110a <LoopFillZerobss>

08001106 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001106:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001108:	3204      	adds	r2, #4

0800110a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800110a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800110c:	d3fb      	bcc.n	8001106 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800110e:	f7ff ffd7 	bl	80010c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001112:	f002 f94b 	bl	80033ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001116:	f7ff fcb3 	bl	8000a80 <main>
  bx  lr    
 800111a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800111c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001120:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001124:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001128:	08004090 	.word	0x08004090
  ldr r2, =_sbss
 800112c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001130:	20000698 	.word	0x20000698

08001134 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001134:	e7fe      	b.n	8001134 <ADC_IRQHandler>
	...

08001138 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800113c:	4b0e      	ldr	r3, [pc, #56]	; (8001178 <HAL_Init+0x40>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a0d      	ldr	r2, [pc, #52]	; (8001178 <HAL_Init+0x40>)
 8001142:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001146:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001148:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <HAL_Init+0x40>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a0a      	ldr	r2, [pc, #40]	; (8001178 <HAL_Init+0x40>)
 800114e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001152:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001154:	4b08      	ldr	r3, [pc, #32]	; (8001178 <HAL_Init+0x40>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a07      	ldr	r2, [pc, #28]	; (8001178 <HAL_Init+0x40>)
 800115a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800115e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001160:	2003      	movs	r0, #3
 8001162:	f000 f947 	bl	80013f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001166:	200f      	movs	r0, #15
 8001168:	f000 f808 	bl	800117c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800116c:	f7ff fe36 	bl	8000ddc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40023c00 	.word	0x40023c00

0800117c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001184:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <HAL_InitTick+0x54>)
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	4b12      	ldr	r3, [pc, #72]	; (80011d4 <HAL_InitTick+0x58>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	4619      	mov	r1, r3
 800118e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001192:	fbb3 f3f1 	udiv	r3, r3, r1
 8001196:	fbb2 f3f3 	udiv	r3, r2, r3
 800119a:	4618      	mov	r0, r3
 800119c:	f000 f955 	bl	800144a <HAL_SYSTICK_Config>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e00e      	b.n	80011c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2b0f      	cmp	r3, #15
 80011ae:	d80a      	bhi.n	80011c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011b0:	2200      	movs	r2, #0
 80011b2:	6879      	ldr	r1, [r7, #4]
 80011b4:	f04f 30ff 	mov.w	r0, #4294967295
 80011b8:	f000 f927 	bl	800140a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011bc:	4a06      	ldr	r2, [pc, #24]	; (80011d8 <HAL_InitTick+0x5c>)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011c2:	2300      	movs	r3, #0
 80011c4:	e000      	b.n	80011c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	20000000 	.word	0x20000000
 80011d4:	20000008 	.word	0x20000008
 80011d8:	20000004 	.word	0x20000004

080011dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011e0:	4b06      	ldr	r3, [pc, #24]	; (80011fc <HAL_IncTick+0x20>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	461a      	mov	r2, r3
 80011e6:	4b06      	ldr	r3, [pc, #24]	; (8001200 <HAL_IncTick+0x24>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4413      	add	r3, r2
 80011ec:	4a04      	ldr	r2, [pc, #16]	; (8001200 <HAL_IncTick+0x24>)
 80011ee:	6013      	str	r3, [r2, #0]
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	20000008 	.word	0x20000008
 8001200:	20000528 	.word	0x20000528

08001204 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  return uwTick;
 8001208:	4b03      	ldr	r3, [pc, #12]	; (8001218 <HAL_GetTick+0x14>)
 800120a:	681b      	ldr	r3, [r3, #0]
}
 800120c:	4618      	mov	r0, r3
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	20000528 	.word	0x20000528

0800121c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001224:	f7ff ffee 	bl	8001204 <HAL_GetTick>
 8001228:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001234:	d005      	beq.n	8001242 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001236:	4b0a      	ldr	r3, [pc, #40]	; (8001260 <HAL_Delay+0x44>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	461a      	mov	r2, r3
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	4413      	add	r3, r2
 8001240:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001242:	bf00      	nop
 8001244:	f7ff ffde 	bl	8001204 <HAL_GetTick>
 8001248:	4602      	mov	r2, r0
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	68fa      	ldr	r2, [r7, #12]
 8001250:	429a      	cmp	r2, r3
 8001252:	d8f7      	bhi.n	8001244 <HAL_Delay+0x28>
  {
  }
}
 8001254:	bf00      	nop
 8001256:	bf00      	nop
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	20000008 	.word	0x20000008

08001264 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f003 0307 	and.w	r3, r3, #7
 8001272:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001274:	4b0c      	ldr	r3, [pc, #48]	; (80012a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800127a:	68ba      	ldr	r2, [r7, #8]
 800127c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001280:	4013      	ands	r3, r2
 8001282:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800128c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001290:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001294:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001296:	4a04      	ldr	r2, [pc, #16]	; (80012a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	60d3      	str	r3, [r2, #12]
}
 800129c:	bf00      	nop
 800129e:	3714      	adds	r7, #20
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr
 80012a8:	e000ed00 	.word	0xe000ed00

080012ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012b0:	4b04      	ldr	r3, [pc, #16]	; (80012c4 <__NVIC_GetPriorityGrouping+0x18>)
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	0a1b      	lsrs	r3, r3, #8
 80012b6:	f003 0307 	and.w	r3, r3, #7
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	e000ed00 	.word	0xe000ed00

080012c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	6039      	str	r1, [r7, #0]
 80012d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	db0a      	blt.n	80012f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	b2da      	uxtb	r2, r3
 80012e0:	490c      	ldr	r1, [pc, #48]	; (8001314 <__NVIC_SetPriority+0x4c>)
 80012e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e6:	0112      	lsls	r2, r2, #4
 80012e8:	b2d2      	uxtb	r2, r2
 80012ea:	440b      	add	r3, r1
 80012ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012f0:	e00a      	b.n	8001308 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	b2da      	uxtb	r2, r3
 80012f6:	4908      	ldr	r1, [pc, #32]	; (8001318 <__NVIC_SetPriority+0x50>)
 80012f8:	79fb      	ldrb	r3, [r7, #7]
 80012fa:	f003 030f 	and.w	r3, r3, #15
 80012fe:	3b04      	subs	r3, #4
 8001300:	0112      	lsls	r2, r2, #4
 8001302:	b2d2      	uxtb	r2, r2
 8001304:	440b      	add	r3, r1
 8001306:	761a      	strb	r2, [r3, #24]
}
 8001308:	bf00      	nop
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	e000e100 	.word	0xe000e100
 8001318:	e000ed00 	.word	0xe000ed00

0800131c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800131c:	b480      	push	{r7}
 800131e:	b089      	sub	sp, #36	; 0x24
 8001320:	af00      	add	r7, sp, #0
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	60b9      	str	r1, [r7, #8]
 8001326:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	f003 0307 	and.w	r3, r3, #7
 800132e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	f1c3 0307 	rsb	r3, r3, #7
 8001336:	2b04      	cmp	r3, #4
 8001338:	bf28      	it	cs
 800133a:	2304      	movcs	r3, #4
 800133c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	3304      	adds	r3, #4
 8001342:	2b06      	cmp	r3, #6
 8001344:	d902      	bls.n	800134c <NVIC_EncodePriority+0x30>
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	3b03      	subs	r3, #3
 800134a:	e000      	b.n	800134e <NVIC_EncodePriority+0x32>
 800134c:	2300      	movs	r3, #0
 800134e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001350:	f04f 32ff 	mov.w	r2, #4294967295
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	43da      	mvns	r2, r3
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	401a      	ands	r2, r3
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001364:	f04f 31ff 	mov.w	r1, #4294967295
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	fa01 f303 	lsl.w	r3, r1, r3
 800136e:	43d9      	mvns	r1, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001374:	4313      	orrs	r3, r2
         );
}
 8001376:	4618      	mov	r0, r3
 8001378:	3724      	adds	r7, #36	; 0x24
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
	...

08001384 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001388:	f3bf 8f4f 	dsb	sy
}
 800138c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800138e:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <__NVIC_SystemReset+0x24>)
 8001390:	68db      	ldr	r3, [r3, #12]
 8001392:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001396:	4904      	ldr	r1, [pc, #16]	; (80013a8 <__NVIC_SystemReset+0x24>)
 8001398:	4b04      	ldr	r3, [pc, #16]	; (80013ac <__NVIC_SystemReset+0x28>)
 800139a:	4313      	orrs	r3, r2
 800139c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800139e:	f3bf 8f4f 	dsb	sy
}
 80013a2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80013a4:	bf00      	nop
 80013a6:	e7fd      	b.n	80013a4 <__NVIC_SystemReset+0x20>
 80013a8:	e000ed00 	.word	0xe000ed00
 80013ac:	05fa0004 	.word	0x05fa0004

080013b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	3b01      	subs	r3, #1
 80013bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013c0:	d301      	bcc.n	80013c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013c2:	2301      	movs	r3, #1
 80013c4:	e00f      	b.n	80013e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013c6:	4a0a      	ldr	r2, [pc, #40]	; (80013f0 <SysTick_Config+0x40>)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	3b01      	subs	r3, #1
 80013cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ce:	210f      	movs	r1, #15
 80013d0:	f04f 30ff 	mov.w	r0, #4294967295
 80013d4:	f7ff ff78 	bl	80012c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013d8:	4b05      	ldr	r3, [pc, #20]	; (80013f0 <SysTick_Config+0x40>)
 80013da:	2200      	movs	r2, #0
 80013dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013de:	4b04      	ldr	r3, [pc, #16]	; (80013f0 <SysTick_Config+0x40>)
 80013e0:	2207      	movs	r2, #7
 80013e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013e4:	2300      	movs	r3, #0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	e000e010 	.word	0xe000e010

080013f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f7ff ff31 	bl	8001264 <__NVIC_SetPriorityGrouping>
}
 8001402:	bf00      	nop
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800140a:	b580      	push	{r7, lr}
 800140c:	b086      	sub	sp, #24
 800140e:	af00      	add	r7, sp, #0
 8001410:	4603      	mov	r3, r0
 8001412:	60b9      	str	r1, [r7, #8]
 8001414:	607a      	str	r2, [r7, #4]
 8001416:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001418:	2300      	movs	r3, #0
 800141a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800141c:	f7ff ff46 	bl	80012ac <__NVIC_GetPriorityGrouping>
 8001420:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	68b9      	ldr	r1, [r7, #8]
 8001426:	6978      	ldr	r0, [r7, #20]
 8001428:	f7ff ff78 	bl	800131c <NVIC_EncodePriority>
 800142c:	4602      	mov	r2, r0
 800142e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001432:	4611      	mov	r1, r2
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff ff47 	bl	80012c8 <__NVIC_SetPriority>
}
 800143a:	bf00      	nop
 800143c:	3718      	adds	r7, #24
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8001446:	f7ff ff9d 	bl	8001384 <__NVIC_SystemReset>

0800144a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b082      	sub	sp, #8
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f7ff ffac 	bl	80013b0 <SysTick_Config>
 8001458:	4603      	mov	r3, r0
}
 800145a:	4618      	mov	r0, r3
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
	...

08001464 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001476:	4b23      	ldr	r3, [pc, #140]	; (8001504 <HAL_FLASH_Program+0xa0>)
 8001478:	7e1b      	ldrb	r3, [r3, #24]
 800147a:	2b01      	cmp	r3, #1
 800147c:	d101      	bne.n	8001482 <HAL_FLASH_Program+0x1e>
 800147e:	2302      	movs	r3, #2
 8001480:	e03b      	b.n	80014fa <HAL_FLASH_Program+0x96>
 8001482:	4b20      	ldr	r3, [pc, #128]	; (8001504 <HAL_FLASH_Program+0xa0>)
 8001484:	2201      	movs	r2, #1
 8001486:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001488:	f24c 3050 	movw	r0, #50000	; 0xc350
 800148c:	f000 f870 	bl	8001570 <FLASH_WaitForLastOperation>
 8001490:	4603      	mov	r3, r0
 8001492:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001494:	7dfb      	ldrb	r3, [r7, #23]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d12b      	bne.n	80014f2 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d105      	bne.n	80014ac <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80014a0:	783b      	ldrb	r3, [r7, #0]
 80014a2:	4619      	mov	r1, r3
 80014a4:	68b8      	ldr	r0, [r7, #8]
 80014a6:	f000 f91b 	bl	80016e0 <FLASH_Program_Byte>
 80014aa:	e016      	b.n	80014da <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d105      	bne.n	80014be <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80014b2:	883b      	ldrh	r3, [r7, #0]
 80014b4:	4619      	mov	r1, r3
 80014b6:	68b8      	ldr	r0, [r7, #8]
 80014b8:	f000 f8ee 	bl	8001698 <FLASH_Program_HalfWord>
 80014bc:	e00d      	b.n	80014da <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d105      	bne.n	80014d0 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	4619      	mov	r1, r3
 80014c8:	68b8      	ldr	r0, [r7, #8]
 80014ca:	f000 f8c3 	bl	8001654 <FLASH_Program_Word>
 80014ce:	e004      	b.n	80014da <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80014d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80014d4:	68b8      	ldr	r0, [r7, #8]
 80014d6:	f000 f88b 	bl	80015f0 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80014da:	f24c 3050 	movw	r0, #50000	; 0xc350
 80014de:	f000 f847 	bl	8001570 <FLASH_WaitForLastOperation>
 80014e2:	4603      	mov	r3, r0
 80014e4:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80014e6:	4b08      	ldr	r3, [pc, #32]	; (8001508 <HAL_FLASH_Program+0xa4>)
 80014e8:	691b      	ldr	r3, [r3, #16]
 80014ea:	4a07      	ldr	r2, [pc, #28]	; (8001508 <HAL_FLASH_Program+0xa4>)
 80014ec:	f023 0301 	bic.w	r3, r3, #1
 80014f0:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80014f2:	4b04      	ldr	r3, [pc, #16]	; (8001504 <HAL_FLASH_Program+0xa0>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	761a      	strb	r2, [r3, #24]
  
  return status;
 80014f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3718      	adds	r7, #24
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	2000052c 	.word	0x2000052c
 8001508:	40023c00 	.word	0x40023c00

0800150c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001512:	2300      	movs	r3, #0
 8001514:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001516:	4b0b      	ldr	r3, [pc, #44]	; (8001544 <HAL_FLASH_Unlock+0x38>)
 8001518:	691b      	ldr	r3, [r3, #16]
 800151a:	2b00      	cmp	r3, #0
 800151c:	da0b      	bge.n	8001536 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800151e:	4b09      	ldr	r3, [pc, #36]	; (8001544 <HAL_FLASH_Unlock+0x38>)
 8001520:	4a09      	ldr	r2, [pc, #36]	; (8001548 <HAL_FLASH_Unlock+0x3c>)
 8001522:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001524:	4b07      	ldr	r3, [pc, #28]	; (8001544 <HAL_FLASH_Unlock+0x38>)
 8001526:	4a09      	ldr	r2, [pc, #36]	; (800154c <HAL_FLASH_Unlock+0x40>)
 8001528:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800152a:	4b06      	ldr	r3, [pc, #24]	; (8001544 <HAL_FLASH_Unlock+0x38>)
 800152c:	691b      	ldr	r3, [r3, #16]
 800152e:	2b00      	cmp	r3, #0
 8001530:	da01      	bge.n	8001536 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001536:	79fb      	ldrb	r3, [r7, #7]
}
 8001538:	4618      	mov	r0, r3
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	40023c00 	.word	0x40023c00
 8001548:	45670123 	.word	0x45670123
 800154c:	cdef89ab 	.word	0xcdef89ab

08001550 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001554:	4b05      	ldr	r3, [pc, #20]	; (800156c <HAL_FLASH_Lock+0x1c>)
 8001556:	691b      	ldr	r3, [r3, #16]
 8001558:	4a04      	ldr	r2, [pc, #16]	; (800156c <HAL_FLASH_Lock+0x1c>)
 800155a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800155e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001560:	2300      	movs	r3, #0
}
 8001562:	4618      	mov	r0, r3
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	40023c00 	.word	0x40023c00

08001570 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001578:	2300      	movs	r3, #0
 800157a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800157c:	4b1a      	ldr	r3, [pc, #104]	; (80015e8 <FLASH_WaitForLastOperation+0x78>)
 800157e:	2200      	movs	r2, #0
 8001580:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001582:	f7ff fe3f 	bl	8001204 <HAL_GetTick>
 8001586:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001588:	e010      	b.n	80015ac <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001590:	d00c      	beq.n	80015ac <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d007      	beq.n	80015a8 <FLASH_WaitForLastOperation+0x38>
 8001598:	f7ff fe34 	bl	8001204 <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d201      	bcs.n	80015ac <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e019      	b.n	80015e0 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80015ac:	4b0f      	ldr	r3, [pc, #60]	; (80015ec <FLASH_WaitForLastOperation+0x7c>)
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d1e8      	bne.n	800158a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80015b8:	4b0c      	ldr	r3, [pc, #48]	; (80015ec <FLASH_WaitForLastOperation+0x7c>)
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	f003 0301 	and.w	r3, r3, #1
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d002      	beq.n	80015ca <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80015c4:	4b09      	ldr	r3, [pc, #36]	; (80015ec <FLASH_WaitForLastOperation+0x7c>)
 80015c6:	2201      	movs	r2, #1
 80015c8:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80015ca:	4b08      	ldr	r3, [pc, #32]	; (80015ec <FLASH_WaitForLastOperation+0x7c>)
 80015cc:	68db      	ldr	r3, [r3, #12]
 80015ce:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d003      	beq.n	80015de <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80015d6:	f000 f8a5 	bl	8001724 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e000      	b.n	80015e0 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80015de:	2300      	movs	r3, #0
  
}  
 80015e0:	4618      	mov	r0, r3
 80015e2:	3710      	adds	r7, #16
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	2000052c 	.word	0x2000052c
 80015ec:	40023c00 	.word	0x40023c00

080015f0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80015fc:	4b14      	ldr	r3, [pc, #80]	; (8001650 <FLASH_Program_DoubleWord+0x60>)
 80015fe:	691b      	ldr	r3, [r3, #16]
 8001600:	4a13      	ldr	r2, [pc, #76]	; (8001650 <FLASH_Program_DoubleWord+0x60>)
 8001602:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001606:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001608:	4b11      	ldr	r3, [pc, #68]	; (8001650 <FLASH_Program_DoubleWord+0x60>)
 800160a:	691b      	ldr	r3, [r3, #16]
 800160c:	4a10      	ldr	r2, [pc, #64]	; (8001650 <FLASH_Program_DoubleWord+0x60>)
 800160e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001612:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001614:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <FLASH_Program_DoubleWord+0x60>)
 8001616:	691b      	ldr	r3, [r3, #16]
 8001618:	4a0d      	ldr	r2, [pc, #52]	; (8001650 <FLASH_Program_DoubleWord+0x60>)
 800161a:	f043 0301 	orr.w	r3, r3, #1
 800161e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	683a      	ldr	r2, [r7, #0]
 8001624:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8001626:	f3bf 8f6f 	isb	sy
}
 800162a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800162c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001630:	f04f 0200 	mov.w	r2, #0
 8001634:	f04f 0300 	mov.w	r3, #0
 8001638:	000a      	movs	r2, r1
 800163a:	2300      	movs	r3, #0
 800163c:	68f9      	ldr	r1, [r7, #12]
 800163e:	3104      	adds	r1, #4
 8001640:	4613      	mov	r3, r2
 8001642:	600b      	str	r3, [r1, #0]
}
 8001644:	bf00      	nop
 8001646:	3714      	adds	r7, #20
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	40023c00 	.word	0x40023c00

08001654 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800165e:	4b0d      	ldr	r3, [pc, #52]	; (8001694 <FLASH_Program_Word+0x40>)
 8001660:	691b      	ldr	r3, [r3, #16]
 8001662:	4a0c      	ldr	r2, [pc, #48]	; (8001694 <FLASH_Program_Word+0x40>)
 8001664:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001668:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800166a:	4b0a      	ldr	r3, [pc, #40]	; (8001694 <FLASH_Program_Word+0x40>)
 800166c:	691b      	ldr	r3, [r3, #16]
 800166e:	4a09      	ldr	r2, [pc, #36]	; (8001694 <FLASH_Program_Word+0x40>)
 8001670:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001674:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001676:	4b07      	ldr	r3, [pc, #28]	; (8001694 <FLASH_Program_Word+0x40>)
 8001678:	691b      	ldr	r3, [r3, #16]
 800167a:	4a06      	ldr	r2, [pc, #24]	; (8001694 <FLASH_Program_Word+0x40>)
 800167c:	f043 0301 	orr.w	r3, r3, #1
 8001680:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	683a      	ldr	r2, [r7, #0]
 8001686:	601a      	str	r2, [r3, #0]
}
 8001688:	bf00      	nop
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	40023c00 	.word	0x40023c00

08001698 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	460b      	mov	r3, r1
 80016a2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80016a4:	4b0d      	ldr	r3, [pc, #52]	; (80016dc <FLASH_Program_HalfWord+0x44>)
 80016a6:	691b      	ldr	r3, [r3, #16]
 80016a8:	4a0c      	ldr	r2, [pc, #48]	; (80016dc <FLASH_Program_HalfWord+0x44>)
 80016aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80016ae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80016b0:	4b0a      	ldr	r3, [pc, #40]	; (80016dc <FLASH_Program_HalfWord+0x44>)
 80016b2:	691b      	ldr	r3, [r3, #16]
 80016b4:	4a09      	ldr	r2, [pc, #36]	; (80016dc <FLASH_Program_HalfWord+0x44>)
 80016b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80016bc:	4b07      	ldr	r3, [pc, #28]	; (80016dc <FLASH_Program_HalfWord+0x44>)
 80016be:	691b      	ldr	r3, [r3, #16]
 80016c0:	4a06      	ldr	r2, [pc, #24]	; (80016dc <FLASH_Program_HalfWord+0x44>)
 80016c2:	f043 0301 	orr.w	r3, r3, #1
 80016c6:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	887a      	ldrh	r2, [r7, #2]
 80016cc:	801a      	strh	r2, [r3, #0]
}
 80016ce:	bf00      	nop
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	40023c00 	.word	0x40023c00

080016e0 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	460b      	mov	r3, r1
 80016ea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80016ec:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <FLASH_Program_Byte+0x40>)
 80016ee:	691b      	ldr	r3, [r3, #16]
 80016f0:	4a0b      	ldr	r2, [pc, #44]	; (8001720 <FLASH_Program_Byte+0x40>)
 80016f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80016f6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80016f8:	4b09      	ldr	r3, [pc, #36]	; (8001720 <FLASH_Program_Byte+0x40>)
 80016fa:	4a09      	ldr	r2, [pc, #36]	; (8001720 <FLASH_Program_Byte+0x40>)
 80016fc:	691b      	ldr	r3, [r3, #16]
 80016fe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001700:	4b07      	ldr	r3, [pc, #28]	; (8001720 <FLASH_Program_Byte+0x40>)
 8001702:	691b      	ldr	r3, [r3, #16]
 8001704:	4a06      	ldr	r2, [pc, #24]	; (8001720 <FLASH_Program_Byte+0x40>)
 8001706:	f043 0301 	orr.w	r3, r3, #1
 800170a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	78fa      	ldrb	r2, [r7, #3]
 8001710:	701a      	strb	r2, [r3, #0]
}
 8001712:	bf00      	nop
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	40023c00 	.word	0x40023c00

08001724 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001728:	4b2f      	ldr	r3, [pc, #188]	; (80017e8 <FLASH_SetErrorCode+0xc4>)
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	f003 0310 	and.w	r3, r3, #16
 8001730:	2b00      	cmp	r3, #0
 8001732:	d008      	beq.n	8001746 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001734:	4b2d      	ldr	r3, [pc, #180]	; (80017ec <FLASH_SetErrorCode+0xc8>)
 8001736:	69db      	ldr	r3, [r3, #28]
 8001738:	f043 0310 	orr.w	r3, r3, #16
 800173c:	4a2b      	ldr	r2, [pc, #172]	; (80017ec <FLASH_SetErrorCode+0xc8>)
 800173e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001740:	4b29      	ldr	r3, [pc, #164]	; (80017e8 <FLASH_SetErrorCode+0xc4>)
 8001742:	2210      	movs	r2, #16
 8001744:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001746:	4b28      	ldr	r3, [pc, #160]	; (80017e8 <FLASH_SetErrorCode+0xc4>)
 8001748:	68db      	ldr	r3, [r3, #12]
 800174a:	f003 0320 	and.w	r3, r3, #32
 800174e:	2b00      	cmp	r3, #0
 8001750:	d008      	beq.n	8001764 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001752:	4b26      	ldr	r3, [pc, #152]	; (80017ec <FLASH_SetErrorCode+0xc8>)
 8001754:	69db      	ldr	r3, [r3, #28]
 8001756:	f043 0308 	orr.w	r3, r3, #8
 800175a:	4a24      	ldr	r2, [pc, #144]	; (80017ec <FLASH_SetErrorCode+0xc8>)
 800175c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800175e:	4b22      	ldr	r3, [pc, #136]	; (80017e8 <FLASH_SetErrorCode+0xc4>)
 8001760:	2220      	movs	r2, #32
 8001762:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001764:	4b20      	ldr	r3, [pc, #128]	; (80017e8 <FLASH_SetErrorCode+0xc4>)
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800176c:	2b00      	cmp	r3, #0
 800176e:	d008      	beq.n	8001782 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001770:	4b1e      	ldr	r3, [pc, #120]	; (80017ec <FLASH_SetErrorCode+0xc8>)
 8001772:	69db      	ldr	r3, [r3, #28]
 8001774:	f043 0304 	orr.w	r3, r3, #4
 8001778:	4a1c      	ldr	r2, [pc, #112]	; (80017ec <FLASH_SetErrorCode+0xc8>)
 800177a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800177c:	4b1a      	ldr	r3, [pc, #104]	; (80017e8 <FLASH_SetErrorCode+0xc4>)
 800177e:	2240      	movs	r2, #64	; 0x40
 8001780:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001782:	4b19      	ldr	r3, [pc, #100]	; (80017e8 <FLASH_SetErrorCode+0xc4>)
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800178a:	2b00      	cmp	r3, #0
 800178c:	d008      	beq.n	80017a0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800178e:	4b17      	ldr	r3, [pc, #92]	; (80017ec <FLASH_SetErrorCode+0xc8>)
 8001790:	69db      	ldr	r3, [r3, #28]
 8001792:	f043 0302 	orr.w	r3, r3, #2
 8001796:	4a15      	ldr	r2, [pc, #84]	; (80017ec <FLASH_SetErrorCode+0xc8>)
 8001798:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800179a:	4b13      	ldr	r3, [pc, #76]	; (80017e8 <FLASH_SetErrorCode+0xc4>)
 800179c:	2280      	movs	r2, #128	; 0x80
 800179e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80017a0:	4b11      	ldr	r3, [pc, #68]	; (80017e8 <FLASH_SetErrorCode+0xc4>)
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d009      	beq.n	80017c0 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80017ac:	4b0f      	ldr	r3, [pc, #60]	; (80017ec <FLASH_SetErrorCode+0xc8>)
 80017ae:	69db      	ldr	r3, [r3, #28]
 80017b0:	f043 0301 	orr.w	r3, r3, #1
 80017b4:	4a0d      	ldr	r2, [pc, #52]	; (80017ec <FLASH_SetErrorCode+0xc8>)
 80017b6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80017b8:	4b0b      	ldr	r3, [pc, #44]	; (80017e8 <FLASH_SetErrorCode+0xc4>)
 80017ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017be:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80017c0:	4b09      	ldr	r3, [pc, #36]	; (80017e8 <FLASH_SetErrorCode+0xc4>)
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	f003 0302 	and.w	r3, r3, #2
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d008      	beq.n	80017de <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80017cc:	4b07      	ldr	r3, [pc, #28]	; (80017ec <FLASH_SetErrorCode+0xc8>)
 80017ce:	69db      	ldr	r3, [r3, #28]
 80017d0:	f043 0320 	orr.w	r3, r3, #32
 80017d4:	4a05      	ldr	r2, [pc, #20]	; (80017ec <FLASH_SetErrorCode+0xc8>)
 80017d6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80017d8:	4b03      	ldr	r3, [pc, #12]	; (80017e8 <FLASH_SetErrorCode+0xc4>)
 80017da:	2202      	movs	r2, #2
 80017dc:	60da      	str	r2, [r3, #12]
  }
}
 80017de:	bf00      	nop
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	40023c00 	.word	0x40023c00
 80017ec:	2000052c 	.word	0x2000052c

080017f0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80017fe:	2300      	movs	r3, #0
 8001800:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001802:	4b31      	ldr	r3, [pc, #196]	; (80018c8 <HAL_FLASHEx_Erase+0xd8>)
 8001804:	7e1b      	ldrb	r3, [r3, #24]
 8001806:	2b01      	cmp	r3, #1
 8001808:	d101      	bne.n	800180e <HAL_FLASHEx_Erase+0x1e>
 800180a:	2302      	movs	r3, #2
 800180c:	e058      	b.n	80018c0 <HAL_FLASHEx_Erase+0xd0>
 800180e:	4b2e      	ldr	r3, [pc, #184]	; (80018c8 <HAL_FLASHEx_Erase+0xd8>)
 8001810:	2201      	movs	r2, #1
 8001812:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001814:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001818:	f7ff feaa 	bl	8001570 <FLASH_WaitForLastOperation>
 800181c:	4603      	mov	r3, r0
 800181e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001820:	7bfb      	ldrb	r3, [r7, #15]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d148      	bne.n	80018b8 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	f04f 32ff 	mov.w	r2, #4294967295
 800182c:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d115      	bne.n	8001862 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	691b      	ldr	r3, [r3, #16]
 800183a:	b2da      	uxtb	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	4619      	mov	r1, r3
 8001842:	4610      	mov	r0, r2
 8001844:	f000 f844 	bl	80018d0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001848:	f24c 3050 	movw	r0, #50000	; 0xc350
 800184c:	f7ff fe90 	bl	8001570 <FLASH_WaitForLastOperation>
 8001850:	4603      	mov	r3, r0
 8001852:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001854:	4b1d      	ldr	r3, [pc, #116]	; (80018cc <HAL_FLASHEx_Erase+0xdc>)
 8001856:	691b      	ldr	r3, [r3, #16]
 8001858:	4a1c      	ldr	r2, [pc, #112]	; (80018cc <HAL_FLASHEx_Erase+0xdc>)
 800185a:	f023 0304 	bic.w	r3, r3, #4
 800185e:	6113      	str	r3, [r2, #16]
 8001860:	e028      	b.n	80018b4 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	60bb      	str	r3, [r7, #8]
 8001868:	e01c      	b.n	80018a4 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	691b      	ldr	r3, [r3, #16]
 800186e:	b2db      	uxtb	r3, r3
 8001870:	4619      	mov	r1, r3
 8001872:	68b8      	ldr	r0, [r7, #8]
 8001874:	f000 f850 	bl	8001918 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001878:	f24c 3050 	movw	r0, #50000	; 0xc350
 800187c:	f7ff fe78 	bl	8001570 <FLASH_WaitForLastOperation>
 8001880:	4603      	mov	r3, r0
 8001882:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001884:	4b11      	ldr	r3, [pc, #68]	; (80018cc <HAL_FLASHEx_Erase+0xdc>)
 8001886:	691b      	ldr	r3, [r3, #16]
 8001888:	4a10      	ldr	r2, [pc, #64]	; (80018cc <HAL_FLASHEx_Erase+0xdc>)
 800188a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800188e:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8001890:	7bfb      	ldrb	r3, [r7, #15]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d003      	beq.n	800189e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	68ba      	ldr	r2, [r7, #8]
 800189a:	601a      	str	r2, [r3, #0]
          break;
 800189c:	e00a      	b.n	80018b4 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	3301      	adds	r3, #1
 80018a2:	60bb      	str	r3, [r7, #8]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	68da      	ldr	r2, [r3, #12]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	4413      	add	r3, r2
 80018ae:	68ba      	ldr	r2, [r7, #8]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d3da      	bcc.n	800186a <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80018b4:	f000 f878 	bl	80019a8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80018b8:	4b03      	ldr	r3, [pc, #12]	; (80018c8 <HAL_FLASHEx_Erase+0xd8>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	761a      	strb	r2, [r3, #24]

  return status;
 80018be:	7bfb      	ldrb	r3, [r7, #15]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3710      	adds	r7, #16
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	2000052c 	.word	0x2000052c
 80018cc:	40023c00 	.word	0x40023c00

080018d0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4603      	mov	r3, r0
 80018d8:	6039      	str	r1, [r7, #0]
 80018da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80018dc:	4b0d      	ldr	r3, [pc, #52]	; (8001914 <FLASH_MassErase+0x44>)
 80018de:	691b      	ldr	r3, [r3, #16]
 80018e0:	4a0c      	ldr	r2, [pc, #48]	; (8001914 <FLASH_MassErase+0x44>)
 80018e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018e6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80018e8:	4b0a      	ldr	r3, [pc, #40]	; (8001914 <FLASH_MassErase+0x44>)
 80018ea:	691b      	ldr	r3, [r3, #16]
 80018ec:	4a09      	ldr	r2, [pc, #36]	; (8001914 <FLASH_MassErase+0x44>)
 80018ee:	f043 0304 	orr.w	r3, r3, #4
 80018f2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80018f4:	4b07      	ldr	r3, [pc, #28]	; (8001914 <FLASH_MassErase+0x44>)
 80018f6:	691a      	ldr	r2, [r3, #16]
 80018f8:	79fb      	ldrb	r3, [r7, #7]
 80018fa:	021b      	lsls	r3, r3, #8
 80018fc:	4313      	orrs	r3, r2
 80018fe:	4a05      	ldr	r2, [pc, #20]	; (8001914 <FLASH_MassErase+0x44>)
 8001900:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001904:	6113      	str	r3, [r2, #16]
}
 8001906:	bf00      	nop
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	40023c00 	.word	0x40023c00

08001918 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	460b      	mov	r3, r1
 8001922:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001924:	2300      	movs	r3, #0
 8001926:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001928:	78fb      	ldrb	r3, [r7, #3]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d102      	bne.n	8001934 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800192e:	2300      	movs	r3, #0
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	e010      	b.n	8001956 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001934:	78fb      	ldrb	r3, [r7, #3]
 8001936:	2b01      	cmp	r3, #1
 8001938:	d103      	bne.n	8001942 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800193a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	e009      	b.n	8001956 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001942:	78fb      	ldrb	r3, [r7, #3]
 8001944:	2b02      	cmp	r3, #2
 8001946:	d103      	bne.n	8001950 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001948:	f44f 7300 	mov.w	r3, #512	; 0x200
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	e002      	b.n	8001956 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001950:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001954:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001956:	4b13      	ldr	r3, [pc, #76]	; (80019a4 <FLASH_Erase_Sector+0x8c>)
 8001958:	691b      	ldr	r3, [r3, #16]
 800195a:	4a12      	ldr	r2, [pc, #72]	; (80019a4 <FLASH_Erase_Sector+0x8c>)
 800195c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001960:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001962:	4b10      	ldr	r3, [pc, #64]	; (80019a4 <FLASH_Erase_Sector+0x8c>)
 8001964:	691a      	ldr	r2, [r3, #16]
 8001966:	490f      	ldr	r1, [pc, #60]	; (80019a4 <FLASH_Erase_Sector+0x8c>)
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	4313      	orrs	r3, r2
 800196c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800196e:	4b0d      	ldr	r3, [pc, #52]	; (80019a4 <FLASH_Erase_Sector+0x8c>)
 8001970:	691b      	ldr	r3, [r3, #16]
 8001972:	4a0c      	ldr	r2, [pc, #48]	; (80019a4 <FLASH_Erase_Sector+0x8c>)
 8001974:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001978:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800197a:	4b0a      	ldr	r3, [pc, #40]	; (80019a4 <FLASH_Erase_Sector+0x8c>)
 800197c:	691a      	ldr	r2, [r3, #16]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	00db      	lsls	r3, r3, #3
 8001982:	4313      	orrs	r3, r2
 8001984:	4a07      	ldr	r2, [pc, #28]	; (80019a4 <FLASH_Erase_Sector+0x8c>)
 8001986:	f043 0302 	orr.w	r3, r3, #2
 800198a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800198c:	4b05      	ldr	r3, [pc, #20]	; (80019a4 <FLASH_Erase_Sector+0x8c>)
 800198e:	691b      	ldr	r3, [r3, #16]
 8001990:	4a04      	ldr	r2, [pc, #16]	; (80019a4 <FLASH_Erase_Sector+0x8c>)
 8001992:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001996:	6113      	str	r3, [r2, #16]
}
 8001998:	bf00      	nop
 800199a:	3714      	adds	r7, #20
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	40023c00 	.word	0x40023c00

080019a8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80019ac:	4b20      	ldr	r3, [pc, #128]	; (8001a30 <FLASH_FlushCaches+0x88>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d017      	beq.n	80019e8 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80019b8:	4b1d      	ldr	r3, [pc, #116]	; (8001a30 <FLASH_FlushCaches+0x88>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a1c      	ldr	r2, [pc, #112]	; (8001a30 <FLASH_FlushCaches+0x88>)
 80019be:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80019c2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80019c4:	4b1a      	ldr	r3, [pc, #104]	; (8001a30 <FLASH_FlushCaches+0x88>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a19      	ldr	r2, [pc, #100]	; (8001a30 <FLASH_FlushCaches+0x88>)
 80019ca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019ce:	6013      	str	r3, [r2, #0]
 80019d0:	4b17      	ldr	r3, [pc, #92]	; (8001a30 <FLASH_FlushCaches+0x88>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a16      	ldr	r2, [pc, #88]	; (8001a30 <FLASH_FlushCaches+0x88>)
 80019d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80019da:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019dc:	4b14      	ldr	r3, [pc, #80]	; (8001a30 <FLASH_FlushCaches+0x88>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a13      	ldr	r2, [pc, #76]	; (8001a30 <FLASH_FlushCaches+0x88>)
 80019e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019e6:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80019e8:	4b11      	ldr	r3, [pc, #68]	; (8001a30 <FLASH_FlushCaches+0x88>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d017      	beq.n	8001a24 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80019f4:	4b0e      	ldr	r3, [pc, #56]	; (8001a30 <FLASH_FlushCaches+0x88>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a0d      	ldr	r2, [pc, #52]	; (8001a30 <FLASH_FlushCaches+0x88>)
 80019fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80019fe:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001a00:	4b0b      	ldr	r3, [pc, #44]	; (8001a30 <FLASH_FlushCaches+0x88>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a0a      	ldr	r2, [pc, #40]	; (8001a30 <FLASH_FlushCaches+0x88>)
 8001a06:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a0a:	6013      	str	r3, [r2, #0]
 8001a0c:	4b08      	ldr	r3, [pc, #32]	; (8001a30 <FLASH_FlushCaches+0x88>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a07      	ldr	r2, [pc, #28]	; (8001a30 <FLASH_FlushCaches+0x88>)
 8001a12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001a16:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a18:	4b05      	ldr	r3, [pc, #20]	; (8001a30 <FLASH_FlushCaches+0x88>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a04      	ldr	r2, [pc, #16]	; (8001a30 <FLASH_FlushCaches+0x88>)
 8001a1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a22:	6013      	str	r3, [r2, #0]
  }
}
 8001a24:	bf00      	nop
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	40023c00 	.word	0x40023c00

08001a34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b089      	sub	sp, #36	; 0x24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a42:	2300      	movs	r3, #0
 8001a44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a46:	2300      	movs	r3, #0
 8001a48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61fb      	str	r3, [r7, #28]
 8001a4e:	e159      	b.n	8001d04 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a50:	2201      	movs	r2, #1
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	697a      	ldr	r2, [r7, #20]
 8001a60:	4013      	ands	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a64:	693a      	ldr	r2, [r7, #16]
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	f040 8148 	bne.w	8001cfe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f003 0303 	and.w	r3, r3, #3
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d005      	beq.n	8001a86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d130      	bne.n	8001ae8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	2203      	movs	r2, #3
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	43db      	mvns	r3, r3
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	68da      	ldr	r2, [r3, #12]
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001abc:	2201      	movs	r2, #1
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	091b      	lsrs	r3, r3, #4
 8001ad2:	f003 0201 	and.w	r2, r3, #1
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f003 0303 	and.w	r3, r3, #3
 8001af0:	2b03      	cmp	r3, #3
 8001af2:	d017      	beq.n	8001b24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	2203      	movs	r2, #3
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	43db      	mvns	r3, r3
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	689a      	ldr	r2, [r3, #8]
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f003 0303 	and.w	r3, r3, #3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d123      	bne.n	8001b78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	08da      	lsrs	r2, r3, #3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	3208      	adds	r2, #8
 8001b38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	f003 0307 	and.w	r3, r3, #7
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	220f      	movs	r2, #15
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	4013      	ands	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	691a      	ldr	r2, [r3, #16]
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	f003 0307 	and.w	r3, r3, #7
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	08da      	lsrs	r2, r3, #3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	3208      	adds	r2, #8
 8001b72:	69b9      	ldr	r1, [r7, #24]
 8001b74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	2203      	movs	r2, #3
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f003 0203 	and.w	r2, r3, #3
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	f000 80a2 	beq.w	8001cfe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	60fb      	str	r3, [r7, #12]
 8001bbe:	4b57      	ldr	r3, [pc, #348]	; (8001d1c <HAL_GPIO_Init+0x2e8>)
 8001bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc2:	4a56      	ldr	r2, [pc, #344]	; (8001d1c <HAL_GPIO_Init+0x2e8>)
 8001bc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bc8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bca:	4b54      	ldr	r3, [pc, #336]	; (8001d1c <HAL_GPIO_Init+0x2e8>)
 8001bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bd2:	60fb      	str	r3, [r7, #12]
 8001bd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bd6:	4a52      	ldr	r2, [pc, #328]	; (8001d20 <HAL_GPIO_Init+0x2ec>)
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	089b      	lsrs	r3, r3, #2
 8001bdc:	3302      	adds	r3, #2
 8001bde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001be2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	f003 0303 	and.w	r3, r3, #3
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	220f      	movs	r2, #15
 8001bee:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf2:	43db      	mvns	r3, r3
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a49      	ldr	r2, [pc, #292]	; (8001d24 <HAL_GPIO_Init+0x2f0>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d019      	beq.n	8001c36 <HAL_GPIO_Init+0x202>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a48      	ldr	r2, [pc, #288]	; (8001d28 <HAL_GPIO_Init+0x2f4>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d013      	beq.n	8001c32 <HAL_GPIO_Init+0x1fe>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a47      	ldr	r2, [pc, #284]	; (8001d2c <HAL_GPIO_Init+0x2f8>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d00d      	beq.n	8001c2e <HAL_GPIO_Init+0x1fa>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a46      	ldr	r2, [pc, #280]	; (8001d30 <HAL_GPIO_Init+0x2fc>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d007      	beq.n	8001c2a <HAL_GPIO_Init+0x1f6>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a45      	ldr	r2, [pc, #276]	; (8001d34 <HAL_GPIO_Init+0x300>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d101      	bne.n	8001c26 <HAL_GPIO_Init+0x1f2>
 8001c22:	2304      	movs	r3, #4
 8001c24:	e008      	b.n	8001c38 <HAL_GPIO_Init+0x204>
 8001c26:	2307      	movs	r3, #7
 8001c28:	e006      	b.n	8001c38 <HAL_GPIO_Init+0x204>
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e004      	b.n	8001c38 <HAL_GPIO_Init+0x204>
 8001c2e:	2302      	movs	r3, #2
 8001c30:	e002      	b.n	8001c38 <HAL_GPIO_Init+0x204>
 8001c32:	2301      	movs	r3, #1
 8001c34:	e000      	b.n	8001c38 <HAL_GPIO_Init+0x204>
 8001c36:	2300      	movs	r3, #0
 8001c38:	69fa      	ldr	r2, [r7, #28]
 8001c3a:	f002 0203 	and.w	r2, r2, #3
 8001c3e:	0092      	lsls	r2, r2, #2
 8001c40:	4093      	lsls	r3, r2
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c48:	4935      	ldr	r1, [pc, #212]	; (8001d20 <HAL_GPIO_Init+0x2ec>)
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	089b      	lsrs	r3, r3, #2
 8001c4e:	3302      	adds	r3, #2
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c56:	4b38      	ldr	r3, [pc, #224]	; (8001d38 <HAL_GPIO_Init+0x304>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	43db      	mvns	r3, r3
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	4013      	ands	r3, r2
 8001c64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d003      	beq.n	8001c7a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c7a:	4a2f      	ldr	r2, [pc, #188]	; (8001d38 <HAL_GPIO_Init+0x304>)
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c80:	4b2d      	ldr	r3, [pc, #180]	; (8001d38 <HAL_GPIO_Init+0x304>)
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d003      	beq.n	8001ca4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ca4:	4a24      	ldr	r2, [pc, #144]	; (8001d38 <HAL_GPIO_Init+0x304>)
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001caa:	4b23      	ldr	r3, [pc, #140]	; (8001d38 <HAL_GPIO_Init+0x304>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	43db      	mvns	r3, r3
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d003      	beq.n	8001cce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cce:	4a1a      	ldr	r2, [pc, #104]	; (8001d38 <HAL_GPIO_Init+0x304>)
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cd4:	4b18      	ldr	r3, [pc, #96]	; (8001d38 <HAL_GPIO_Init+0x304>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d003      	beq.n	8001cf8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cf8:	4a0f      	ldr	r2, [pc, #60]	; (8001d38 <HAL_GPIO_Init+0x304>)
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	3301      	adds	r3, #1
 8001d02:	61fb      	str	r3, [r7, #28]
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	2b0f      	cmp	r3, #15
 8001d08:	f67f aea2 	bls.w	8001a50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d0c:	bf00      	nop
 8001d0e:	bf00      	nop
 8001d10:	3724      	adds	r7, #36	; 0x24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	40023800 	.word	0x40023800
 8001d20:	40013800 	.word	0x40013800
 8001d24:	40020000 	.word	0x40020000
 8001d28:	40020400 	.word	0x40020400
 8001d2c:	40020800 	.word	0x40020800
 8001d30:	40020c00 	.word	0x40020c00
 8001d34:	40021000 	.word	0x40021000
 8001d38:	40013c00 	.word	0x40013c00

08001d3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	460b      	mov	r3, r1
 8001d46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	691a      	ldr	r2, [r3, #16]
 8001d4c:	887b      	ldrh	r3, [r7, #2]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d002      	beq.n	8001d5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d54:	2301      	movs	r3, #1
 8001d56:	73fb      	strb	r3, [r7, #15]
 8001d58:	e001      	b.n	8001d5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3714      	adds	r7, #20
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	460b      	mov	r3, r1
 8001d76:	807b      	strh	r3, [r7, #2]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d7c:	787b      	ldrb	r3, [r7, #1]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d82:	887a      	ldrh	r2, [r7, #2]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d88:	e003      	b.n	8001d92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d8a:	887b      	ldrh	r3, [r7, #2]
 8001d8c:	041a      	lsls	r2, r3, #16
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	619a      	str	r2, [r3, #24]
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
	...

08001da0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d101      	bne.n	8001db2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e267      	b.n	8002282 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d075      	beq.n	8001eaa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001dbe:	4b88      	ldr	r3, [pc, #544]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f003 030c 	and.w	r3, r3, #12
 8001dc6:	2b04      	cmp	r3, #4
 8001dc8:	d00c      	beq.n	8001de4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dca:	4b85      	ldr	r3, [pc, #532]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001dd2:	2b08      	cmp	r3, #8
 8001dd4:	d112      	bne.n	8001dfc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dd6:	4b82      	ldr	r3, [pc, #520]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001de2:	d10b      	bne.n	8001dfc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de4:	4b7e      	ldr	r3, [pc, #504]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d05b      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x108>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d157      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e242      	b.n	8002282 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e04:	d106      	bne.n	8001e14 <HAL_RCC_OscConfig+0x74>
 8001e06:	4b76      	ldr	r3, [pc, #472]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a75      	ldr	r2, [pc, #468]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001e0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e10:	6013      	str	r3, [r2, #0]
 8001e12:	e01d      	b.n	8001e50 <HAL_RCC_OscConfig+0xb0>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e1c:	d10c      	bne.n	8001e38 <HAL_RCC_OscConfig+0x98>
 8001e1e:	4b70      	ldr	r3, [pc, #448]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a6f      	ldr	r2, [pc, #444]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001e24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e28:	6013      	str	r3, [r2, #0]
 8001e2a:	4b6d      	ldr	r3, [pc, #436]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a6c      	ldr	r2, [pc, #432]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e34:	6013      	str	r3, [r2, #0]
 8001e36:	e00b      	b.n	8001e50 <HAL_RCC_OscConfig+0xb0>
 8001e38:	4b69      	ldr	r3, [pc, #420]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a68      	ldr	r2, [pc, #416]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001e3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e42:	6013      	str	r3, [r2, #0]
 8001e44:	4b66      	ldr	r3, [pc, #408]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a65      	ldr	r2, [pc, #404]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001e4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d013      	beq.n	8001e80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e58:	f7ff f9d4 	bl	8001204 <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e5e:	e008      	b.n	8001e72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e60:	f7ff f9d0 	bl	8001204 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b64      	cmp	r3, #100	; 0x64
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e207      	b.n	8002282 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e72:	4b5b      	ldr	r3, [pc, #364]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d0f0      	beq.n	8001e60 <HAL_RCC_OscConfig+0xc0>
 8001e7e:	e014      	b.n	8001eaa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e80:	f7ff f9c0 	bl	8001204 <HAL_GetTick>
 8001e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e86:	e008      	b.n	8001e9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e88:	f7ff f9bc 	bl	8001204 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b64      	cmp	r3, #100	; 0x64
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e1f3      	b.n	8002282 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e9a:	4b51      	ldr	r3, [pc, #324]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d1f0      	bne.n	8001e88 <HAL_RCC_OscConfig+0xe8>
 8001ea6:	e000      	b.n	8001eaa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ea8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d063      	beq.n	8001f7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001eb6:	4b4a      	ldr	r3, [pc, #296]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	f003 030c 	and.w	r3, r3, #12
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d00b      	beq.n	8001eda <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ec2:	4b47      	ldr	r3, [pc, #284]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001eca:	2b08      	cmp	r3, #8
 8001ecc:	d11c      	bne.n	8001f08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ece:	4b44      	ldr	r3, [pc, #272]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d116      	bne.n	8001f08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eda:	4b41      	ldr	r3, [pc, #260]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d005      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x152>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d001      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e1c7      	b.n	8002282 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ef2:	4b3b      	ldr	r3, [pc, #236]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	00db      	lsls	r3, r3, #3
 8001f00:	4937      	ldr	r1, [pc, #220]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f06:	e03a      	b.n	8001f7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d020      	beq.n	8001f52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f10:	4b34      	ldr	r3, [pc, #208]	; (8001fe4 <HAL_RCC_OscConfig+0x244>)
 8001f12:	2201      	movs	r2, #1
 8001f14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f16:	f7ff f975 	bl	8001204 <HAL_GetTick>
 8001f1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f1c:	e008      	b.n	8001f30 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f1e:	f7ff f971 	bl	8001204 <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e1a8      	b.n	8002282 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f30:	4b2b      	ldr	r3, [pc, #172]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0302 	and.w	r3, r3, #2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d0f0      	beq.n	8001f1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f3c:	4b28      	ldr	r3, [pc, #160]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	691b      	ldr	r3, [r3, #16]
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	4925      	ldr	r1, [pc, #148]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	600b      	str	r3, [r1, #0]
 8001f50:	e015      	b.n	8001f7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f52:	4b24      	ldr	r3, [pc, #144]	; (8001fe4 <HAL_RCC_OscConfig+0x244>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f58:	f7ff f954 	bl	8001204 <HAL_GetTick>
 8001f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f5e:	e008      	b.n	8001f72 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f60:	f7ff f950 	bl	8001204 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e187      	b.n	8002282 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f72:	4b1b      	ldr	r3, [pc, #108]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d1f0      	bne.n	8001f60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0308 	and.w	r3, r3, #8
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d036      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d016      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f92:	4b15      	ldr	r3, [pc, #84]	; (8001fe8 <HAL_RCC_OscConfig+0x248>)
 8001f94:	2201      	movs	r2, #1
 8001f96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f98:	f7ff f934 	bl	8001204 <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f9e:	e008      	b.n	8001fb2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fa0:	f7ff f930 	bl	8001204 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e167      	b.n	8002282 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fb2:	4b0b      	ldr	r3, [pc, #44]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001fb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d0f0      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x200>
 8001fbe:	e01b      	b.n	8001ff8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fc0:	4b09      	ldr	r3, [pc, #36]	; (8001fe8 <HAL_RCC_OscConfig+0x248>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fc6:	f7ff f91d 	bl	8001204 <HAL_GetTick>
 8001fca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fcc:	e00e      	b.n	8001fec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fce:	f7ff f919 	bl	8001204 <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d907      	bls.n	8001fec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e150      	b.n	8002282 <HAL_RCC_OscConfig+0x4e2>
 8001fe0:	40023800 	.word	0x40023800
 8001fe4:	42470000 	.word	0x42470000
 8001fe8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fec:	4b88      	ldr	r3, [pc, #544]	; (8002210 <HAL_RCC_OscConfig+0x470>)
 8001fee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ff0:	f003 0302 	and.w	r3, r3, #2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d1ea      	bne.n	8001fce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0304 	and.w	r3, r3, #4
 8002000:	2b00      	cmp	r3, #0
 8002002:	f000 8097 	beq.w	8002134 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002006:	2300      	movs	r3, #0
 8002008:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800200a:	4b81      	ldr	r3, [pc, #516]	; (8002210 <HAL_RCC_OscConfig+0x470>)
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d10f      	bne.n	8002036 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002016:	2300      	movs	r3, #0
 8002018:	60bb      	str	r3, [r7, #8]
 800201a:	4b7d      	ldr	r3, [pc, #500]	; (8002210 <HAL_RCC_OscConfig+0x470>)
 800201c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201e:	4a7c      	ldr	r2, [pc, #496]	; (8002210 <HAL_RCC_OscConfig+0x470>)
 8002020:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002024:	6413      	str	r3, [r2, #64]	; 0x40
 8002026:	4b7a      	ldr	r3, [pc, #488]	; (8002210 <HAL_RCC_OscConfig+0x470>)
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800202e:	60bb      	str	r3, [r7, #8]
 8002030:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002032:	2301      	movs	r3, #1
 8002034:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002036:	4b77      	ldr	r3, [pc, #476]	; (8002214 <HAL_RCC_OscConfig+0x474>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800203e:	2b00      	cmp	r3, #0
 8002040:	d118      	bne.n	8002074 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002042:	4b74      	ldr	r3, [pc, #464]	; (8002214 <HAL_RCC_OscConfig+0x474>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a73      	ldr	r2, [pc, #460]	; (8002214 <HAL_RCC_OscConfig+0x474>)
 8002048:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800204c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800204e:	f7ff f8d9 	bl	8001204 <HAL_GetTick>
 8002052:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002054:	e008      	b.n	8002068 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002056:	f7ff f8d5 	bl	8001204 <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	2b02      	cmp	r3, #2
 8002062:	d901      	bls.n	8002068 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e10c      	b.n	8002282 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002068:	4b6a      	ldr	r3, [pc, #424]	; (8002214 <HAL_RCC_OscConfig+0x474>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002070:	2b00      	cmp	r3, #0
 8002072:	d0f0      	beq.n	8002056 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d106      	bne.n	800208a <HAL_RCC_OscConfig+0x2ea>
 800207c:	4b64      	ldr	r3, [pc, #400]	; (8002210 <HAL_RCC_OscConfig+0x470>)
 800207e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002080:	4a63      	ldr	r2, [pc, #396]	; (8002210 <HAL_RCC_OscConfig+0x470>)
 8002082:	f043 0301 	orr.w	r3, r3, #1
 8002086:	6713      	str	r3, [r2, #112]	; 0x70
 8002088:	e01c      	b.n	80020c4 <HAL_RCC_OscConfig+0x324>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	2b05      	cmp	r3, #5
 8002090:	d10c      	bne.n	80020ac <HAL_RCC_OscConfig+0x30c>
 8002092:	4b5f      	ldr	r3, [pc, #380]	; (8002210 <HAL_RCC_OscConfig+0x470>)
 8002094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002096:	4a5e      	ldr	r2, [pc, #376]	; (8002210 <HAL_RCC_OscConfig+0x470>)
 8002098:	f043 0304 	orr.w	r3, r3, #4
 800209c:	6713      	str	r3, [r2, #112]	; 0x70
 800209e:	4b5c      	ldr	r3, [pc, #368]	; (8002210 <HAL_RCC_OscConfig+0x470>)
 80020a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a2:	4a5b      	ldr	r2, [pc, #364]	; (8002210 <HAL_RCC_OscConfig+0x470>)
 80020a4:	f043 0301 	orr.w	r3, r3, #1
 80020a8:	6713      	str	r3, [r2, #112]	; 0x70
 80020aa:	e00b      	b.n	80020c4 <HAL_RCC_OscConfig+0x324>
 80020ac:	4b58      	ldr	r3, [pc, #352]	; (8002210 <HAL_RCC_OscConfig+0x470>)
 80020ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020b0:	4a57      	ldr	r2, [pc, #348]	; (8002210 <HAL_RCC_OscConfig+0x470>)
 80020b2:	f023 0301 	bic.w	r3, r3, #1
 80020b6:	6713      	str	r3, [r2, #112]	; 0x70
 80020b8:	4b55      	ldr	r3, [pc, #340]	; (8002210 <HAL_RCC_OscConfig+0x470>)
 80020ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020bc:	4a54      	ldr	r2, [pc, #336]	; (8002210 <HAL_RCC_OscConfig+0x470>)
 80020be:	f023 0304 	bic.w	r3, r3, #4
 80020c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d015      	beq.n	80020f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020cc:	f7ff f89a 	bl	8001204 <HAL_GetTick>
 80020d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020d2:	e00a      	b.n	80020ea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020d4:	f7ff f896 	bl	8001204 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e0cb      	b.n	8002282 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ea:	4b49      	ldr	r3, [pc, #292]	; (8002210 <HAL_RCC_OscConfig+0x470>)
 80020ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d0ee      	beq.n	80020d4 <HAL_RCC_OscConfig+0x334>
 80020f6:	e014      	b.n	8002122 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020f8:	f7ff f884 	bl	8001204 <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020fe:	e00a      	b.n	8002116 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002100:	f7ff f880 	bl	8001204 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	f241 3288 	movw	r2, #5000	; 0x1388
 800210e:	4293      	cmp	r3, r2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e0b5      	b.n	8002282 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002116:	4b3e      	ldr	r3, [pc, #248]	; (8002210 <HAL_RCC_OscConfig+0x470>)
 8002118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1ee      	bne.n	8002100 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002122:	7dfb      	ldrb	r3, [r7, #23]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d105      	bne.n	8002134 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002128:	4b39      	ldr	r3, [pc, #228]	; (8002210 <HAL_RCC_OscConfig+0x470>)
 800212a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212c:	4a38      	ldr	r2, [pc, #224]	; (8002210 <HAL_RCC_OscConfig+0x470>)
 800212e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002132:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	2b00      	cmp	r3, #0
 800213a:	f000 80a1 	beq.w	8002280 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800213e:	4b34      	ldr	r3, [pc, #208]	; (8002210 <HAL_RCC_OscConfig+0x470>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f003 030c 	and.w	r3, r3, #12
 8002146:	2b08      	cmp	r3, #8
 8002148:	d05c      	beq.n	8002204 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	2b02      	cmp	r3, #2
 8002150:	d141      	bne.n	80021d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002152:	4b31      	ldr	r3, [pc, #196]	; (8002218 <HAL_RCC_OscConfig+0x478>)
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002158:	f7ff f854 	bl	8001204 <HAL_GetTick>
 800215c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800215e:	e008      	b.n	8002172 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002160:	f7ff f850 	bl	8001204 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	2b02      	cmp	r3, #2
 800216c:	d901      	bls.n	8002172 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e087      	b.n	8002282 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002172:	4b27      	ldr	r3, [pc, #156]	; (8002210 <HAL_RCC_OscConfig+0x470>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d1f0      	bne.n	8002160 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	69da      	ldr	r2, [r3, #28]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a1b      	ldr	r3, [r3, #32]
 8002186:	431a      	orrs	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218c:	019b      	lsls	r3, r3, #6
 800218e:	431a      	orrs	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002194:	085b      	lsrs	r3, r3, #1
 8002196:	3b01      	subs	r3, #1
 8002198:	041b      	lsls	r3, r3, #16
 800219a:	431a      	orrs	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a0:	061b      	lsls	r3, r3, #24
 80021a2:	491b      	ldr	r1, [pc, #108]	; (8002210 <HAL_RCC_OscConfig+0x470>)
 80021a4:	4313      	orrs	r3, r2
 80021a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021a8:	4b1b      	ldr	r3, [pc, #108]	; (8002218 <HAL_RCC_OscConfig+0x478>)
 80021aa:	2201      	movs	r2, #1
 80021ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ae:	f7ff f829 	bl	8001204 <HAL_GetTick>
 80021b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021b4:	e008      	b.n	80021c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021b6:	f7ff f825 	bl	8001204 <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e05c      	b.n	8002282 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021c8:	4b11      	ldr	r3, [pc, #68]	; (8002210 <HAL_RCC_OscConfig+0x470>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d0f0      	beq.n	80021b6 <HAL_RCC_OscConfig+0x416>
 80021d4:	e054      	b.n	8002280 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021d6:	4b10      	ldr	r3, [pc, #64]	; (8002218 <HAL_RCC_OscConfig+0x478>)
 80021d8:	2200      	movs	r2, #0
 80021da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021dc:	f7ff f812 	bl	8001204 <HAL_GetTick>
 80021e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021e2:	e008      	b.n	80021f6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021e4:	f7ff f80e 	bl	8001204 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e045      	b.n	8002282 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021f6:	4b06      	ldr	r3, [pc, #24]	; (8002210 <HAL_RCC_OscConfig+0x470>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1f0      	bne.n	80021e4 <HAL_RCC_OscConfig+0x444>
 8002202:	e03d      	b.n	8002280 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	2b01      	cmp	r3, #1
 800220a:	d107      	bne.n	800221c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e038      	b.n	8002282 <HAL_RCC_OscConfig+0x4e2>
 8002210:	40023800 	.word	0x40023800
 8002214:	40007000 	.word	0x40007000
 8002218:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800221c:	4b1b      	ldr	r3, [pc, #108]	; (800228c <HAL_RCC_OscConfig+0x4ec>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	699b      	ldr	r3, [r3, #24]
 8002226:	2b01      	cmp	r3, #1
 8002228:	d028      	beq.n	800227c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002234:	429a      	cmp	r2, r3
 8002236:	d121      	bne.n	800227c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002242:	429a      	cmp	r2, r3
 8002244:	d11a      	bne.n	800227c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800224c:	4013      	ands	r3, r2
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002252:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002254:	4293      	cmp	r3, r2
 8002256:	d111      	bne.n	800227c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002262:	085b      	lsrs	r3, r3, #1
 8002264:	3b01      	subs	r3, #1
 8002266:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002268:	429a      	cmp	r2, r3
 800226a:	d107      	bne.n	800227c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002276:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002278:	429a      	cmp	r2, r3
 800227a:	d001      	beq.n	8002280 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e000      	b.n	8002282 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3718      	adds	r7, #24
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	40023800 	.word	0x40023800

08002290 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d101      	bne.n	80022a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e0cc      	b.n	800243e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022a4:	4b68      	ldr	r3, [pc, #416]	; (8002448 <HAL_RCC_ClockConfig+0x1b8>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0307 	and.w	r3, r3, #7
 80022ac:	683a      	ldr	r2, [r7, #0]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d90c      	bls.n	80022cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022b2:	4b65      	ldr	r3, [pc, #404]	; (8002448 <HAL_RCC_ClockConfig+0x1b8>)
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	b2d2      	uxtb	r2, r2
 80022b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ba:	4b63      	ldr	r3, [pc, #396]	; (8002448 <HAL_RCC_ClockConfig+0x1b8>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0307 	and.w	r3, r3, #7
 80022c2:	683a      	ldr	r2, [r7, #0]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d001      	beq.n	80022cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e0b8      	b.n	800243e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0302 	and.w	r3, r3, #2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d020      	beq.n	800231a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0304 	and.w	r3, r3, #4
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d005      	beq.n	80022f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022e4:	4b59      	ldr	r3, [pc, #356]	; (800244c <HAL_RCC_ClockConfig+0x1bc>)
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	4a58      	ldr	r2, [pc, #352]	; (800244c <HAL_RCC_ClockConfig+0x1bc>)
 80022ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80022ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0308 	and.w	r3, r3, #8
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d005      	beq.n	8002308 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022fc:	4b53      	ldr	r3, [pc, #332]	; (800244c <HAL_RCC_ClockConfig+0x1bc>)
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	4a52      	ldr	r2, [pc, #328]	; (800244c <HAL_RCC_ClockConfig+0x1bc>)
 8002302:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002306:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002308:	4b50      	ldr	r3, [pc, #320]	; (800244c <HAL_RCC_ClockConfig+0x1bc>)
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	494d      	ldr	r1, [pc, #308]	; (800244c <HAL_RCC_ClockConfig+0x1bc>)
 8002316:	4313      	orrs	r3, r2
 8002318:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	2b00      	cmp	r3, #0
 8002324:	d044      	beq.n	80023b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d107      	bne.n	800233e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800232e:	4b47      	ldr	r3, [pc, #284]	; (800244c <HAL_RCC_ClockConfig+0x1bc>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d119      	bne.n	800236e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e07f      	b.n	800243e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	2b02      	cmp	r3, #2
 8002344:	d003      	beq.n	800234e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800234a:	2b03      	cmp	r3, #3
 800234c:	d107      	bne.n	800235e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800234e:	4b3f      	ldr	r3, [pc, #252]	; (800244c <HAL_RCC_ClockConfig+0x1bc>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d109      	bne.n	800236e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e06f      	b.n	800243e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800235e:	4b3b      	ldr	r3, [pc, #236]	; (800244c <HAL_RCC_ClockConfig+0x1bc>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e067      	b.n	800243e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800236e:	4b37      	ldr	r3, [pc, #220]	; (800244c <HAL_RCC_ClockConfig+0x1bc>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f023 0203 	bic.w	r2, r3, #3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	4934      	ldr	r1, [pc, #208]	; (800244c <HAL_RCC_ClockConfig+0x1bc>)
 800237c:	4313      	orrs	r3, r2
 800237e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002380:	f7fe ff40 	bl	8001204 <HAL_GetTick>
 8002384:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002386:	e00a      	b.n	800239e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002388:	f7fe ff3c 	bl	8001204 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	f241 3288 	movw	r2, #5000	; 0x1388
 8002396:	4293      	cmp	r3, r2
 8002398:	d901      	bls.n	800239e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e04f      	b.n	800243e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800239e:	4b2b      	ldr	r3, [pc, #172]	; (800244c <HAL_RCC_ClockConfig+0x1bc>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f003 020c 	and.w	r2, r3, #12
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d1eb      	bne.n	8002388 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023b0:	4b25      	ldr	r3, [pc, #148]	; (8002448 <HAL_RCC_ClockConfig+0x1b8>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0307 	and.w	r3, r3, #7
 80023b8:	683a      	ldr	r2, [r7, #0]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d20c      	bcs.n	80023d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023be:	4b22      	ldr	r3, [pc, #136]	; (8002448 <HAL_RCC_ClockConfig+0x1b8>)
 80023c0:	683a      	ldr	r2, [r7, #0]
 80023c2:	b2d2      	uxtb	r2, r2
 80023c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023c6:	4b20      	ldr	r3, [pc, #128]	; (8002448 <HAL_RCC_ClockConfig+0x1b8>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0307 	and.w	r3, r3, #7
 80023ce:	683a      	ldr	r2, [r7, #0]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d001      	beq.n	80023d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e032      	b.n	800243e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0304 	and.w	r3, r3, #4
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d008      	beq.n	80023f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023e4:	4b19      	ldr	r3, [pc, #100]	; (800244c <HAL_RCC_ClockConfig+0x1bc>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	4916      	ldr	r1, [pc, #88]	; (800244c <HAL_RCC_ClockConfig+0x1bc>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0308 	and.w	r3, r3, #8
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d009      	beq.n	8002416 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002402:	4b12      	ldr	r3, [pc, #72]	; (800244c <HAL_RCC_ClockConfig+0x1bc>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	490e      	ldr	r1, [pc, #56]	; (800244c <HAL_RCC_ClockConfig+0x1bc>)
 8002412:	4313      	orrs	r3, r2
 8002414:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002416:	f000 f821 	bl	800245c <HAL_RCC_GetSysClockFreq>
 800241a:	4602      	mov	r2, r0
 800241c:	4b0b      	ldr	r3, [pc, #44]	; (800244c <HAL_RCC_ClockConfig+0x1bc>)
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	091b      	lsrs	r3, r3, #4
 8002422:	f003 030f 	and.w	r3, r3, #15
 8002426:	490a      	ldr	r1, [pc, #40]	; (8002450 <HAL_RCC_ClockConfig+0x1c0>)
 8002428:	5ccb      	ldrb	r3, [r1, r3]
 800242a:	fa22 f303 	lsr.w	r3, r2, r3
 800242e:	4a09      	ldr	r2, [pc, #36]	; (8002454 <HAL_RCC_ClockConfig+0x1c4>)
 8002430:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002432:	4b09      	ldr	r3, [pc, #36]	; (8002458 <HAL_RCC_ClockConfig+0x1c8>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4618      	mov	r0, r3
 8002438:	f7fe fea0 	bl	800117c <HAL_InitTick>

  return HAL_OK;
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3710      	adds	r7, #16
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	40023c00 	.word	0x40023c00
 800244c:	40023800 	.word	0x40023800
 8002450:	08004034 	.word	0x08004034
 8002454:	20000000 	.word	0x20000000
 8002458:	20000004 	.word	0x20000004

0800245c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800245c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002460:	b090      	sub	sp, #64	; 0x40
 8002462:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002464:	2300      	movs	r3, #0
 8002466:	637b      	str	r3, [r7, #52]	; 0x34
 8002468:	2300      	movs	r3, #0
 800246a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800246c:	2300      	movs	r3, #0
 800246e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002470:	2300      	movs	r3, #0
 8002472:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002474:	4b59      	ldr	r3, [pc, #356]	; (80025dc <HAL_RCC_GetSysClockFreq+0x180>)
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f003 030c 	and.w	r3, r3, #12
 800247c:	2b08      	cmp	r3, #8
 800247e:	d00d      	beq.n	800249c <HAL_RCC_GetSysClockFreq+0x40>
 8002480:	2b08      	cmp	r3, #8
 8002482:	f200 80a1 	bhi.w	80025c8 <HAL_RCC_GetSysClockFreq+0x16c>
 8002486:	2b00      	cmp	r3, #0
 8002488:	d002      	beq.n	8002490 <HAL_RCC_GetSysClockFreq+0x34>
 800248a:	2b04      	cmp	r3, #4
 800248c:	d003      	beq.n	8002496 <HAL_RCC_GetSysClockFreq+0x3a>
 800248e:	e09b      	b.n	80025c8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002490:	4b53      	ldr	r3, [pc, #332]	; (80025e0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002492:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002494:	e09b      	b.n	80025ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002496:	4b53      	ldr	r3, [pc, #332]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002498:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800249a:	e098      	b.n	80025ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800249c:	4b4f      	ldr	r3, [pc, #316]	; (80025dc <HAL_RCC_GetSysClockFreq+0x180>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024a4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024a6:	4b4d      	ldr	r3, [pc, #308]	; (80025dc <HAL_RCC_GetSysClockFreq+0x180>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d028      	beq.n	8002504 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024b2:	4b4a      	ldr	r3, [pc, #296]	; (80025dc <HAL_RCC_GetSysClockFreq+0x180>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	099b      	lsrs	r3, r3, #6
 80024b8:	2200      	movs	r2, #0
 80024ba:	623b      	str	r3, [r7, #32]
 80024bc:	627a      	str	r2, [r7, #36]	; 0x24
 80024be:	6a3b      	ldr	r3, [r7, #32]
 80024c0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80024c4:	2100      	movs	r1, #0
 80024c6:	4b47      	ldr	r3, [pc, #284]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80024c8:	fb03 f201 	mul.w	r2, r3, r1
 80024cc:	2300      	movs	r3, #0
 80024ce:	fb00 f303 	mul.w	r3, r0, r3
 80024d2:	4413      	add	r3, r2
 80024d4:	4a43      	ldr	r2, [pc, #268]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80024d6:	fba0 1202 	umull	r1, r2, r0, r2
 80024da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80024dc:	460a      	mov	r2, r1
 80024de:	62ba      	str	r2, [r7, #40]	; 0x28
 80024e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024e2:	4413      	add	r3, r2
 80024e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024e8:	2200      	movs	r2, #0
 80024ea:	61bb      	str	r3, [r7, #24]
 80024ec:	61fa      	str	r2, [r7, #28]
 80024ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024f2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80024f6:	f7fd fec3 	bl	8000280 <__aeabi_uldivmod>
 80024fa:	4602      	mov	r2, r0
 80024fc:	460b      	mov	r3, r1
 80024fe:	4613      	mov	r3, r2
 8002500:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002502:	e053      	b.n	80025ac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002504:	4b35      	ldr	r3, [pc, #212]	; (80025dc <HAL_RCC_GetSysClockFreq+0x180>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	099b      	lsrs	r3, r3, #6
 800250a:	2200      	movs	r2, #0
 800250c:	613b      	str	r3, [r7, #16]
 800250e:	617a      	str	r2, [r7, #20]
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002516:	f04f 0b00 	mov.w	fp, #0
 800251a:	4652      	mov	r2, sl
 800251c:	465b      	mov	r3, fp
 800251e:	f04f 0000 	mov.w	r0, #0
 8002522:	f04f 0100 	mov.w	r1, #0
 8002526:	0159      	lsls	r1, r3, #5
 8002528:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800252c:	0150      	lsls	r0, r2, #5
 800252e:	4602      	mov	r2, r0
 8002530:	460b      	mov	r3, r1
 8002532:	ebb2 080a 	subs.w	r8, r2, sl
 8002536:	eb63 090b 	sbc.w	r9, r3, fp
 800253a:	f04f 0200 	mov.w	r2, #0
 800253e:	f04f 0300 	mov.w	r3, #0
 8002542:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002546:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800254a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800254e:	ebb2 0408 	subs.w	r4, r2, r8
 8002552:	eb63 0509 	sbc.w	r5, r3, r9
 8002556:	f04f 0200 	mov.w	r2, #0
 800255a:	f04f 0300 	mov.w	r3, #0
 800255e:	00eb      	lsls	r3, r5, #3
 8002560:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002564:	00e2      	lsls	r2, r4, #3
 8002566:	4614      	mov	r4, r2
 8002568:	461d      	mov	r5, r3
 800256a:	eb14 030a 	adds.w	r3, r4, sl
 800256e:	603b      	str	r3, [r7, #0]
 8002570:	eb45 030b 	adc.w	r3, r5, fp
 8002574:	607b      	str	r3, [r7, #4]
 8002576:	f04f 0200 	mov.w	r2, #0
 800257a:	f04f 0300 	mov.w	r3, #0
 800257e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002582:	4629      	mov	r1, r5
 8002584:	028b      	lsls	r3, r1, #10
 8002586:	4621      	mov	r1, r4
 8002588:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800258c:	4621      	mov	r1, r4
 800258e:	028a      	lsls	r2, r1, #10
 8002590:	4610      	mov	r0, r2
 8002592:	4619      	mov	r1, r3
 8002594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002596:	2200      	movs	r2, #0
 8002598:	60bb      	str	r3, [r7, #8]
 800259a:	60fa      	str	r2, [r7, #12]
 800259c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80025a0:	f7fd fe6e 	bl	8000280 <__aeabi_uldivmod>
 80025a4:	4602      	mov	r2, r0
 80025a6:	460b      	mov	r3, r1
 80025a8:	4613      	mov	r3, r2
 80025aa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80025ac:	4b0b      	ldr	r3, [pc, #44]	; (80025dc <HAL_RCC_GetSysClockFreq+0x180>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	0c1b      	lsrs	r3, r3, #16
 80025b2:	f003 0303 	and.w	r3, r3, #3
 80025b6:	3301      	adds	r3, #1
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80025bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80025be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80025c6:	e002      	b.n	80025ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025c8:	4b05      	ldr	r3, [pc, #20]	; (80025e0 <HAL_RCC_GetSysClockFreq+0x184>)
 80025ca:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80025cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3740      	adds	r7, #64	; 0x40
 80025d4:	46bd      	mov	sp, r7
 80025d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025da:	bf00      	nop
 80025dc:	40023800 	.word	0x40023800
 80025e0:	00f42400 	.word	0x00f42400
 80025e4:	017d7840 	.word	0x017d7840

080025e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025ec:	4b03      	ldr	r3, [pc, #12]	; (80025fc <HAL_RCC_GetHCLKFreq+0x14>)
 80025ee:	681b      	ldr	r3, [r3, #0]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	20000000 	.word	0x20000000

08002600 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002604:	f7ff fff0 	bl	80025e8 <HAL_RCC_GetHCLKFreq>
 8002608:	4602      	mov	r2, r0
 800260a:	4b05      	ldr	r3, [pc, #20]	; (8002620 <HAL_RCC_GetPCLK1Freq+0x20>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	0a9b      	lsrs	r3, r3, #10
 8002610:	f003 0307 	and.w	r3, r3, #7
 8002614:	4903      	ldr	r1, [pc, #12]	; (8002624 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002616:	5ccb      	ldrb	r3, [r1, r3]
 8002618:	fa22 f303 	lsr.w	r3, r2, r3
}
 800261c:	4618      	mov	r0, r3
 800261e:	bd80      	pop	{r7, pc}
 8002620:	40023800 	.word	0x40023800
 8002624:	08004044 	.word	0x08004044

08002628 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800262c:	f7ff ffdc 	bl	80025e8 <HAL_RCC_GetHCLKFreq>
 8002630:	4602      	mov	r2, r0
 8002632:	4b05      	ldr	r3, [pc, #20]	; (8002648 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	0b5b      	lsrs	r3, r3, #13
 8002638:	f003 0307 	and.w	r3, r3, #7
 800263c:	4903      	ldr	r1, [pc, #12]	; (800264c <HAL_RCC_GetPCLK2Freq+0x24>)
 800263e:	5ccb      	ldrb	r3, [r1, r3]
 8002640:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002644:	4618      	mov	r0, r3
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40023800 	.word	0x40023800
 800264c:	08004044 	.word	0x08004044

08002650 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d101      	bne.n	8002662 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e03f      	b.n	80026e2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b00      	cmp	r3, #0
 800266c:	d106      	bne.n	800267c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f7fe fbd8 	bl	8000e2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2224      	movs	r2, #36	; 0x24
 8002680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68da      	ldr	r2, [r3, #12]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002692:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f000 f9cb 	bl	8002a30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	691a      	ldr	r2, [r3, #16]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	695a      	ldr	r2, [r3, #20]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68da      	ldr	r2, [r3, #12]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2220      	movs	r2, #32
 80026d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2220      	movs	r2, #32
 80026dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b08a      	sub	sp, #40	; 0x28
 80026ee:	af02      	add	r7, sp, #8
 80026f0:	60f8      	str	r0, [r7, #12]
 80026f2:	60b9      	str	r1, [r7, #8]
 80026f4:	603b      	str	r3, [r7, #0]
 80026f6:	4613      	mov	r3, r2
 80026f8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80026fa:	2300      	movs	r3, #0
 80026fc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b20      	cmp	r3, #32
 8002708:	d17c      	bne.n	8002804 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d002      	beq.n	8002716 <HAL_UART_Transmit+0x2c>
 8002710:	88fb      	ldrh	r3, [r7, #6]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d101      	bne.n	800271a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e075      	b.n	8002806 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002720:	2b01      	cmp	r3, #1
 8002722:	d101      	bne.n	8002728 <HAL_UART_Transmit+0x3e>
 8002724:	2302      	movs	r3, #2
 8002726:	e06e      	b.n	8002806 <HAL_UART_Transmit+0x11c>
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2200      	movs	r2, #0
 8002734:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2221      	movs	r2, #33	; 0x21
 800273a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800273e:	f7fe fd61 	bl	8001204 <HAL_GetTick>
 8002742:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	88fa      	ldrh	r2, [r7, #6]
 8002748:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	88fa      	ldrh	r2, [r7, #6]
 800274e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002758:	d108      	bne.n	800276c <HAL_UART_Transmit+0x82>
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d104      	bne.n	800276c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002762:	2300      	movs	r3, #0
 8002764:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	61bb      	str	r3, [r7, #24]
 800276a:	e003      	b.n	8002774 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002770:	2300      	movs	r3, #0
 8002772:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800277c:	e02a      	b.n	80027d4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	9300      	str	r3, [sp, #0]
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	2200      	movs	r2, #0
 8002786:	2180      	movs	r1, #128	; 0x80
 8002788:	68f8      	ldr	r0, [r7, #12]
 800278a:	f000 f8e2 	bl	8002952 <UART_WaitOnFlagUntilTimeout>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e036      	b.n	8002806 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d10b      	bne.n	80027b6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	881b      	ldrh	r3, [r3, #0]
 80027a2:	461a      	mov	r2, r3
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	3302      	adds	r3, #2
 80027b2:	61bb      	str	r3, [r7, #24]
 80027b4:	e007      	b.n	80027c6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	781a      	ldrb	r2, [r3, #0]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	3301      	adds	r3, #1
 80027c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	3b01      	subs	r3, #1
 80027ce:	b29a      	uxth	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80027d8:	b29b      	uxth	r3, r3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d1cf      	bne.n	800277e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	9300      	str	r3, [sp, #0]
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	2200      	movs	r2, #0
 80027e6:	2140      	movs	r1, #64	; 0x40
 80027e8:	68f8      	ldr	r0, [r7, #12]
 80027ea:	f000 f8b2 	bl	8002952 <UART_WaitOnFlagUntilTimeout>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e006      	b.n	8002806 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2220      	movs	r2, #32
 80027fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002800:	2300      	movs	r3, #0
 8002802:	e000      	b.n	8002806 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002804:	2302      	movs	r3, #2
  }
}
 8002806:	4618      	mov	r0, r3
 8002808:	3720      	adds	r7, #32
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800280e:	b580      	push	{r7, lr}
 8002810:	b08a      	sub	sp, #40	; 0x28
 8002812:	af02      	add	r7, sp, #8
 8002814:	60f8      	str	r0, [r7, #12]
 8002816:	60b9      	str	r1, [r7, #8]
 8002818:	603b      	str	r3, [r7, #0]
 800281a:	4613      	mov	r3, r2
 800281c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800281e:	2300      	movs	r3, #0
 8002820:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002828:	b2db      	uxtb	r3, r3
 800282a:	2b20      	cmp	r3, #32
 800282c:	f040 808c 	bne.w	8002948 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d002      	beq.n	800283c <HAL_UART_Receive+0x2e>
 8002836:	88fb      	ldrh	r3, [r7, #6]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d101      	bne.n	8002840 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e084      	b.n	800294a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002846:	2b01      	cmp	r3, #1
 8002848:	d101      	bne.n	800284e <HAL_UART_Receive+0x40>
 800284a:	2302      	movs	r3, #2
 800284c:	e07d      	b.n	800294a <HAL_UART_Receive+0x13c>
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2201      	movs	r2, #1
 8002852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2200      	movs	r2, #0
 800285a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2222      	movs	r2, #34	; 0x22
 8002860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2200      	movs	r2, #0
 8002868:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800286a:	f7fe fccb 	bl	8001204 <HAL_GetTick>
 800286e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	88fa      	ldrh	r2, [r7, #6]
 8002874:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	88fa      	ldrh	r2, [r7, #6]
 800287a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002884:	d108      	bne.n	8002898 <HAL_UART_Receive+0x8a>
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d104      	bne.n	8002898 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800288e:	2300      	movs	r3, #0
 8002890:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	61bb      	str	r3, [r7, #24]
 8002896:	e003      	b.n	80028a0 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800289c:	2300      	movs	r3, #0
 800289e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80028a8:	e043      	b.n	8002932 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	9300      	str	r3, [sp, #0]
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	2200      	movs	r2, #0
 80028b2:	2120      	movs	r1, #32
 80028b4:	68f8      	ldr	r0, [r7, #12]
 80028b6:	f000 f84c 	bl	8002952 <UART_WaitOnFlagUntilTimeout>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e042      	b.n	800294a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d10c      	bne.n	80028e4 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028d6:	b29a      	uxth	r2, r3
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	3302      	adds	r3, #2
 80028e0:	61bb      	str	r3, [r7, #24]
 80028e2:	e01f      	b.n	8002924 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028ec:	d007      	beq.n	80028fe <HAL_UART_Receive+0xf0>
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d10a      	bne.n	800290c <HAL_UART_Receive+0xfe>
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d106      	bne.n	800290c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	b2da      	uxtb	r2, r3
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	701a      	strb	r2, [r3, #0]
 800290a:	e008      	b.n	800291e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	b2db      	uxtb	r3, r3
 8002914:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002918:	b2da      	uxtb	r2, r3
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	3301      	adds	r3, #1
 8002922:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002928:	b29b      	uxth	r3, r3
 800292a:	3b01      	subs	r3, #1
 800292c:	b29a      	uxth	r2, r3
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002936:	b29b      	uxth	r3, r3
 8002938:	2b00      	cmp	r3, #0
 800293a:	d1b6      	bne.n	80028aa <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2220      	movs	r2, #32
 8002940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002944:	2300      	movs	r3, #0
 8002946:	e000      	b.n	800294a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002948:	2302      	movs	r3, #2
  }
}
 800294a:	4618      	mov	r0, r3
 800294c:	3720      	adds	r7, #32
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	b090      	sub	sp, #64	; 0x40
 8002956:	af00      	add	r7, sp, #0
 8002958:	60f8      	str	r0, [r7, #12]
 800295a:	60b9      	str	r1, [r7, #8]
 800295c:	603b      	str	r3, [r7, #0]
 800295e:	4613      	mov	r3, r2
 8002960:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002962:	e050      	b.n	8002a06 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002964:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800296a:	d04c      	beq.n	8002a06 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800296c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800296e:	2b00      	cmp	r3, #0
 8002970:	d007      	beq.n	8002982 <UART_WaitOnFlagUntilTimeout+0x30>
 8002972:	f7fe fc47 	bl	8001204 <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800297e:	429a      	cmp	r2, r3
 8002980:	d241      	bcs.n	8002a06 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	330c      	adds	r3, #12
 8002988:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800298a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800298c:	e853 3f00 	ldrex	r3, [r3]
 8002990:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002994:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002998:	63fb      	str	r3, [r7, #60]	; 0x3c
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	330c      	adds	r3, #12
 80029a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80029a2:	637a      	str	r2, [r7, #52]	; 0x34
 80029a4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80029a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029aa:	e841 2300 	strex	r3, r2, [r1]
 80029ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80029b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d1e5      	bne.n	8002982 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	3314      	adds	r3, #20
 80029bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	e853 3f00 	ldrex	r3, [r3]
 80029c4:	613b      	str	r3, [r7, #16]
   return(result);
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	f023 0301 	bic.w	r3, r3, #1
 80029cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	3314      	adds	r3, #20
 80029d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80029d6:	623a      	str	r2, [r7, #32]
 80029d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029da:	69f9      	ldr	r1, [r7, #28]
 80029dc:	6a3a      	ldr	r2, [r7, #32]
 80029de:	e841 2300 	strex	r3, r2, [r1]
 80029e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1e5      	bne.n	80029b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2220      	movs	r2, #32
 80029ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2220      	movs	r2, #32
 80029f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e00f      	b.n	8002a26 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	68ba      	ldr	r2, [r7, #8]
 8002a12:	429a      	cmp	r2, r3
 8002a14:	bf0c      	ite	eq
 8002a16:	2301      	moveq	r3, #1
 8002a18:	2300      	movne	r3, #0
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	79fb      	ldrb	r3, [r7, #7]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d09f      	beq.n	8002964 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3740      	adds	r7, #64	; 0x40
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
	...

08002a30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a34:	b0c0      	sub	sp, #256	; 0x100
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	691b      	ldr	r3, [r3, #16]
 8002a44:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a4c:	68d9      	ldr	r1, [r3, #12]
 8002a4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	ea40 0301 	orr.w	r3, r0, r1
 8002a58:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a5e:	689a      	ldr	r2, [r3, #8]
 8002a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	431a      	orrs	r2, r3
 8002a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a74:	69db      	ldr	r3, [r3, #28]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002a88:	f021 010c 	bic.w	r1, r1, #12
 8002a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002a96:	430b      	orrs	r3, r1
 8002a98:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	695b      	ldr	r3, [r3, #20]
 8002aa2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aaa:	6999      	ldr	r1, [r3, #24]
 8002aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	ea40 0301 	orr.w	r3, r0, r1
 8002ab6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	4b8f      	ldr	r3, [pc, #572]	; (8002cfc <UART_SetConfig+0x2cc>)
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d005      	beq.n	8002ad0 <UART_SetConfig+0xa0>
 8002ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	4b8d      	ldr	r3, [pc, #564]	; (8002d00 <UART_SetConfig+0x2d0>)
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d104      	bne.n	8002ada <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ad0:	f7ff fdaa 	bl	8002628 <HAL_RCC_GetPCLK2Freq>
 8002ad4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002ad8:	e003      	b.n	8002ae2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ada:	f7ff fd91 	bl	8002600 <HAL_RCC_GetPCLK1Freq>
 8002ade:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ae6:	69db      	ldr	r3, [r3, #28]
 8002ae8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002aec:	f040 810c 	bne.w	8002d08 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002af0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002af4:	2200      	movs	r2, #0
 8002af6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002afa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002afe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002b02:	4622      	mov	r2, r4
 8002b04:	462b      	mov	r3, r5
 8002b06:	1891      	adds	r1, r2, r2
 8002b08:	65b9      	str	r1, [r7, #88]	; 0x58
 8002b0a:	415b      	adcs	r3, r3
 8002b0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b0e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002b12:	4621      	mov	r1, r4
 8002b14:	eb12 0801 	adds.w	r8, r2, r1
 8002b18:	4629      	mov	r1, r5
 8002b1a:	eb43 0901 	adc.w	r9, r3, r1
 8002b1e:	f04f 0200 	mov.w	r2, #0
 8002b22:	f04f 0300 	mov.w	r3, #0
 8002b26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b32:	4690      	mov	r8, r2
 8002b34:	4699      	mov	r9, r3
 8002b36:	4623      	mov	r3, r4
 8002b38:	eb18 0303 	adds.w	r3, r8, r3
 8002b3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002b40:	462b      	mov	r3, r5
 8002b42:	eb49 0303 	adc.w	r3, r9, r3
 8002b46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002b56:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002b5a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002b5e:	460b      	mov	r3, r1
 8002b60:	18db      	adds	r3, r3, r3
 8002b62:	653b      	str	r3, [r7, #80]	; 0x50
 8002b64:	4613      	mov	r3, r2
 8002b66:	eb42 0303 	adc.w	r3, r2, r3
 8002b6a:	657b      	str	r3, [r7, #84]	; 0x54
 8002b6c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002b70:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002b74:	f7fd fb84 	bl	8000280 <__aeabi_uldivmod>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	4b61      	ldr	r3, [pc, #388]	; (8002d04 <UART_SetConfig+0x2d4>)
 8002b7e:	fba3 2302 	umull	r2, r3, r3, r2
 8002b82:	095b      	lsrs	r3, r3, #5
 8002b84:	011c      	lsls	r4, r3, #4
 8002b86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b90:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002b94:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002b98:	4642      	mov	r2, r8
 8002b9a:	464b      	mov	r3, r9
 8002b9c:	1891      	adds	r1, r2, r2
 8002b9e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002ba0:	415b      	adcs	r3, r3
 8002ba2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ba4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002ba8:	4641      	mov	r1, r8
 8002baa:	eb12 0a01 	adds.w	sl, r2, r1
 8002bae:	4649      	mov	r1, r9
 8002bb0:	eb43 0b01 	adc.w	fp, r3, r1
 8002bb4:	f04f 0200 	mov.w	r2, #0
 8002bb8:	f04f 0300 	mov.w	r3, #0
 8002bbc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002bc0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002bc4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bc8:	4692      	mov	sl, r2
 8002bca:	469b      	mov	fp, r3
 8002bcc:	4643      	mov	r3, r8
 8002bce:	eb1a 0303 	adds.w	r3, sl, r3
 8002bd2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002bd6:	464b      	mov	r3, r9
 8002bd8:	eb4b 0303 	adc.w	r3, fp, r3
 8002bdc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002bec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002bf0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	18db      	adds	r3, r3, r3
 8002bf8:	643b      	str	r3, [r7, #64]	; 0x40
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	eb42 0303 	adc.w	r3, r2, r3
 8002c00:	647b      	str	r3, [r7, #68]	; 0x44
 8002c02:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002c06:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002c0a:	f7fd fb39 	bl	8000280 <__aeabi_uldivmod>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	460b      	mov	r3, r1
 8002c12:	4611      	mov	r1, r2
 8002c14:	4b3b      	ldr	r3, [pc, #236]	; (8002d04 <UART_SetConfig+0x2d4>)
 8002c16:	fba3 2301 	umull	r2, r3, r3, r1
 8002c1a:	095b      	lsrs	r3, r3, #5
 8002c1c:	2264      	movs	r2, #100	; 0x64
 8002c1e:	fb02 f303 	mul.w	r3, r2, r3
 8002c22:	1acb      	subs	r3, r1, r3
 8002c24:	00db      	lsls	r3, r3, #3
 8002c26:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002c2a:	4b36      	ldr	r3, [pc, #216]	; (8002d04 <UART_SetConfig+0x2d4>)
 8002c2c:	fba3 2302 	umull	r2, r3, r3, r2
 8002c30:	095b      	lsrs	r3, r3, #5
 8002c32:	005b      	lsls	r3, r3, #1
 8002c34:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002c38:	441c      	add	r4, r3
 8002c3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c44:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002c48:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002c4c:	4642      	mov	r2, r8
 8002c4e:	464b      	mov	r3, r9
 8002c50:	1891      	adds	r1, r2, r2
 8002c52:	63b9      	str	r1, [r7, #56]	; 0x38
 8002c54:	415b      	adcs	r3, r3
 8002c56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c58:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002c5c:	4641      	mov	r1, r8
 8002c5e:	1851      	adds	r1, r2, r1
 8002c60:	6339      	str	r1, [r7, #48]	; 0x30
 8002c62:	4649      	mov	r1, r9
 8002c64:	414b      	adcs	r3, r1
 8002c66:	637b      	str	r3, [r7, #52]	; 0x34
 8002c68:	f04f 0200 	mov.w	r2, #0
 8002c6c:	f04f 0300 	mov.w	r3, #0
 8002c70:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002c74:	4659      	mov	r1, fp
 8002c76:	00cb      	lsls	r3, r1, #3
 8002c78:	4651      	mov	r1, sl
 8002c7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c7e:	4651      	mov	r1, sl
 8002c80:	00ca      	lsls	r2, r1, #3
 8002c82:	4610      	mov	r0, r2
 8002c84:	4619      	mov	r1, r3
 8002c86:	4603      	mov	r3, r0
 8002c88:	4642      	mov	r2, r8
 8002c8a:	189b      	adds	r3, r3, r2
 8002c8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002c90:	464b      	mov	r3, r9
 8002c92:	460a      	mov	r2, r1
 8002c94:	eb42 0303 	adc.w	r3, r2, r3
 8002c98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002ca8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002cac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	18db      	adds	r3, r3, r3
 8002cb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	eb42 0303 	adc.w	r3, r2, r3
 8002cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cbe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002cc2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002cc6:	f7fd fadb 	bl	8000280 <__aeabi_uldivmod>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	460b      	mov	r3, r1
 8002cce:	4b0d      	ldr	r3, [pc, #52]	; (8002d04 <UART_SetConfig+0x2d4>)
 8002cd0:	fba3 1302 	umull	r1, r3, r3, r2
 8002cd4:	095b      	lsrs	r3, r3, #5
 8002cd6:	2164      	movs	r1, #100	; 0x64
 8002cd8:	fb01 f303 	mul.w	r3, r1, r3
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	3332      	adds	r3, #50	; 0x32
 8002ce2:	4a08      	ldr	r2, [pc, #32]	; (8002d04 <UART_SetConfig+0x2d4>)
 8002ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce8:	095b      	lsrs	r3, r3, #5
 8002cea:	f003 0207 	and.w	r2, r3, #7
 8002cee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4422      	add	r2, r4
 8002cf6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002cf8:	e106      	b.n	8002f08 <UART_SetConfig+0x4d8>
 8002cfa:	bf00      	nop
 8002cfc:	40011000 	.word	0x40011000
 8002d00:	40011400 	.word	0x40011400
 8002d04:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002d12:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002d16:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002d1a:	4642      	mov	r2, r8
 8002d1c:	464b      	mov	r3, r9
 8002d1e:	1891      	adds	r1, r2, r2
 8002d20:	6239      	str	r1, [r7, #32]
 8002d22:	415b      	adcs	r3, r3
 8002d24:	627b      	str	r3, [r7, #36]	; 0x24
 8002d26:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d2a:	4641      	mov	r1, r8
 8002d2c:	1854      	adds	r4, r2, r1
 8002d2e:	4649      	mov	r1, r9
 8002d30:	eb43 0501 	adc.w	r5, r3, r1
 8002d34:	f04f 0200 	mov.w	r2, #0
 8002d38:	f04f 0300 	mov.w	r3, #0
 8002d3c:	00eb      	lsls	r3, r5, #3
 8002d3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d42:	00e2      	lsls	r2, r4, #3
 8002d44:	4614      	mov	r4, r2
 8002d46:	461d      	mov	r5, r3
 8002d48:	4643      	mov	r3, r8
 8002d4a:	18e3      	adds	r3, r4, r3
 8002d4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002d50:	464b      	mov	r3, r9
 8002d52:	eb45 0303 	adc.w	r3, r5, r3
 8002d56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002d66:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002d6a:	f04f 0200 	mov.w	r2, #0
 8002d6e:	f04f 0300 	mov.w	r3, #0
 8002d72:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002d76:	4629      	mov	r1, r5
 8002d78:	008b      	lsls	r3, r1, #2
 8002d7a:	4621      	mov	r1, r4
 8002d7c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d80:	4621      	mov	r1, r4
 8002d82:	008a      	lsls	r2, r1, #2
 8002d84:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002d88:	f7fd fa7a 	bl	8000280 <__aeabi_uldivmod>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	460b      	mov	r3, r1
 8002d90:	4b60      	ldr	r3, [pc, #384]	; (8002f14 <UART_SetConfig+0x4e4>)
 8002d92:	fba3 2302 	umull	r2, r3, r3, r2
 8002d96:	095b      	lsrs	r3, r3, #5
 8002d98:	011c      	lsls	r4, r3, #4
 8002d9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002da4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002da8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002dac:	4642      	mov	r2, r8
 8002dae:	464b      	mov	r3, r9
 8002db0:	1891      	adds	r1, r2, r2
 8002db2:	61b9      	str	r1, [r7, #24]
 8002db4:	415b      	adcs	r3, r3
 8002db6:	61fb      	str	r3, [r7, #28]
 8002db8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002dbc:	4641      	mov	r1, r8
 8002dbe:	1851      	adds	r1, r2, r1
 8002dc0:	6139      	str	r1, [r7, #16]
 8002dc2:	4649      	mov	r1, r9
 8002dc4:	414b      	adcs	r3, r1
 8002dc6:	617b      	str	r3, [r7, #20]
 8002dc8:	f04f 0200 	mov.w	r2, #0
 8002dcc:	f04f 0300 	mov.w	r3, #0
 8002dd0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002dd4:	4659      	mov	r1, fp
 8002dd6:	00cb      	lsls	r3, r1, #3
 8002dd8:	4651      	mov	r1, sl
 8002dda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002dde:	4651      	mov	r1, sl
 8002de0:	00ca      	lsls	r2, r1, #3
 8002de2:	4610      	mov	r0, r2
 8002de4:	4619      	mov	r1, r3
 8002de6:	4603      	mov	r3, r0
 8002de8:	4642      	mov	r2, r8
 8002dea:	189b      	adds	r3, r3, r2
 8002dec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002df0:	464b      	mov	r3, r9
 8002df2:	460a      	mov	r2, r1
 8002df4:	eb42 0303 	adc.w	r3, r2, r3
 8002df8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e06:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002e08:	f04f 0200 	mov.w	r2, #0
 8002e0c:	f04f 0300 	mov.w	r3, #0
 8002e10:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002e14:	4649      	mov	r1, r9
 8002e16:	008b      	lsls	r3, r1, #2
 8002e18:	4641      	mov	r1, r8
 8002e1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e1e:	4641      	mov	r1, r8
 8002e20:	008a      	lsls	r2, r1, #2
 8002e22:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002e26:	f7fd fa2b 	bl	8000280 <__aeabi_uldivmod>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	4611      	mov	r1, r2
 8002e30:	4b38      	ldr	r3, [pc, #224]	; (8002f14 <UART_SetConfig+0x4e4>)
 8002e32:	fba3 2301 	umull	r2, r3, r3, r1
 8002e36:	095b      	lsrs	r3, r3, #5
 8002e38:	2264      	movs	r2, #100	; 0x64
 8002e3a:	fb02 f303 	mul.w	r3, r2, r3
 8002e3e:	1acb      	subs	r3, r1, r3
 8002e40:	011b      	lsls	r3, r3, #4
 8002e42:	3332      	adds	r3, #50	; 0x32
 8002e44:	4a33      	ldr	r2, [pc, #204]	; (8002f14 <UART_SetConfig+0x4e4>)
 8002e46:	fba2 2303 	umull	r2, r3, r2, r3
 8002e4a:	095b      	lsrs	r3, r3, #5
 8002e4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e50:	441c      	add	r4, r3
 8002e52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e56:	2200      	movs	r2, #0
 8002e58:	673b      	str	r3, [r7, #112]	; 0x70
 8002e5a:	677a      	str	r2, [r7, #116]	; 0x74
 8002e5c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002e60:	4642      	mov	r2, r8
 8002e62:	464b      	mov	r3, r9
 8002e64:	1891      	adds	r1, r2, r2
 8002e66:	60b9      	str	r1, [r7, #8]
 8002e68:	415b      	adcs	r3, r3
 8002e6a:	60fb      	str	r3, [r7, #12]
 8002e6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e70:	4641      	mov	r1, r8
 8002e72:	1851      	adds	r1, r2, r1
 8002e74:	6039      	str	r1, [r7, #0]
 8002e76:	4649      	mov	r1, r9
 8002e78:	414b      	adcs	r3, r1
 8002e7a:	607b      	str	r3, [r7, #4]
 8002e7c:	f04f 0200 	mov.w	r2, #0
 8002e80:	f04f 0300 	mov.w	r3, #0
 8002e84:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002e88:	4659      	mov	r1, fp
 8002e8a:	00cb      	lsls	r3, r1, #3
 8002e8c:	4651      	mov	r1, sl
 8002e8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e92:	4651      	mov	r1, sl
 8002e94:	00ca      	lsls	r2, r1, #3
 8002e96:	4610      	mov	r0, r2
 8002e98:	4619      	mov	r1, r3
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	4642      	mov	r2, r8
 8002e9e:	189b      	adds	r3, r3, r2
 8002ea0:	66bb      	str	r3, [r7, #104]	; 0x68
 8002ea2:	464b      	mov	r3, r9
 8002ea4:	460a      	mov	r2, r1
 8002ea6:	eb42 0303 	adc.w	r3, r2, r3
 8002eaa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	663b      	str	r3, [r7, #96]	; 0x60
 8002eb6:	667a      	str	r2, [r7, #100]	; 0x64
 8002eb8:	f04f 0200 	mov.w	r2, #0
 8002ebc:	f04f 0300 	mov.w	r3, #0
 8002ec0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002ec4:	4649      	mov	r1, r9
 8002ec6:	008b      	lsls	r3, r1, #2
 8002ec8:	4641      	mov	r1, r8
 8002eca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ece:	4641      	mov	r1, r8
 8002ed0:	008a      	lsls	r2, r1, #2
 8002ed2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002ed6:	f7fd f9d3 	bl	8000280 <__aeabi_uldivmod>
 8002eda:	4602      	mov	r2, r0
 8002edc:	460b      	mov	r3, r1
 8002ede:	4b0d      	ldr	r3, [pc, #52]	; (8002f14 <UART_SetConfig+0x4e4>)
 8002ee0:	fba3 1302 	umull	r1, r3, r3, r2
 8002ee4:	095b      	lsrs	r3, r3, #5
 8002ee6:	2164      	movs	r1, #100	; 0x64
 8002ee8:	fb01 f303 	mul.w	r3, r1, r3
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	011b      	lsls	r3, r3, #4
 8002ef0:	3332      	adds	r3, #50	; 0x32
 8002ef2:	4a08      	ldr	r2, [pc, #32]	; (8002f14 <UART_SetConfig+0x4e4>)
 8002ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef8:	095b      	lsrs	r3, r3, #5
 8002efa:	f003 020f 	and.w	r2, r3, #15
 8002efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4422      	add	r2, r4
 8002f06:	609a      	str	r2, [r3, #8]
}
 8002f08:	bf00      	nop
 8002f0a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f14:	51eb851f 	.word	0x51eb851f

08002f18 <std>:
 8002f18:	2300      	movs	r3, #0
 8002f1a:	b510      	push	{r4, lr}
 8002f1c:	4604      	mov	r4, r0
 8002f1e:	e9c0 3300 	strd	r3, r3, [r0]
 8002f22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002f26:	6083      	str	r3, [r0, #8]
 8002f28:	8181      	strh	r1, [r0, #12]
 8002f2a:	6643      	str	r3, [r0, #100]	; 0x64
 8002f2c:	81c2      	strh	r2, [r0, #14]
 8002f2e:	6183      	str	r3, [r0, #24]
 8002f30:	4619      	mov	r1, r3
 8002f32:	2208      	movs	r2, #8
 8002f34:	305c      	adds	r0, #92	; 0x5c
 8002f36:	f000 f9e5 	bl	8003304 <memset>
 8002f3a:	4b05      	ldr	r3, [pc, #20]	; (8002f50 <std+0x38>)
 8002f3c:	6263      	str	r3, [r4, #36]	; 0x24
 8002f3e:	4b05      	ldr	r3, [pc, #20]	; (8002f54 <std+0x3c>)
 8002f40:	62a3      	str	r3, [r4, #40]	; 0x28
 8002f42:	4b05      	ldr	r3, [pc, #20]	; (8002f58 <std+0x40>)
 8002f44:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002f46:	4b05      	ldr	r3, [pc, #20]	; (8002f5c <std+0x44>)
 8002f48:	6224      	str	r4, [r4, #32]
 8002f4a:	6323      	str	r3, [r4, #48]	; 0x30
 8002f4c:	bd10      	pop	{r4, pc}
 8002f4e:	bf00      	nop
 8002f50:	08003155 	.word	0x08003155
 8002f54:	08003177 	.word	0x08003177
 8002f58:	080031af 	.word	0x080031af
 8002f5c:	080031d3 	.word	0x080031d3

08002f60 <stdio_exit_handler>:
 8002f60:	4a02      	ldr	r2, [pc, #8]	; (8002f6c <stdio_exit_handler+0xc>)
 8002f62:	4903      	ldr	r1, [pc, #12]	; (8002f70 <stdio_exit_handler+0x10>)
 8002f64:	4803      	ldr	r0, [pc, #12]	; (8002f74 <stdio_exit_handler+0x14>)
 8002f66:	f000 b869 	b.w	800303c <_fwalk_sglue>
 8002f6a:	bf00      	nop
 8002f6c:	2000000c 	.word	0x2000000c
 8002f70:	08003c9d 	.word	0x08003c9d
 8002f74:	20000018 	.word	0x20000018

08002f78 <cleanup_stdio>:
 8002f78:	6841      	ldr	r1, [r0, #4]
 8002f7a:	4b0c      	ldr	r3, [pc, #48]	; (8002fac <cleanup_stdio+0x34>)
 8002f7c:	4299      	cmp	r1, r3
 8002f7e:	b510      	push	{r4, lr}
 8002f80:	4604      	mov	r4, r0
 8002f82:	d001      	beq.n	8002f88 <cleanup_stdio+0x10>
 8002f84:	f000 fe8a 	bl	8003c9c <_fflush_r>
 8002f88:	68a1      	ldr	r1, [r4, #8]
 8002f8a:	4b09      	ldr	r3, [pc, #36]	; (8002fb0 <cleanup_stdio+0x38>)
 8002f8c:	4299      	cmp	r1, r3
 8002f8e:	d002      	beq.n	8002f96 <cleanup_stdio+0x1e>
 8002f90:	4620      	mov	r0, r4
 8002f92:	f000 fe83 	bl	8003c9c <_fflush_r>
 8002f96:	68e1      	ldr	r1, [r4, #12]
 8002f98:	4b06      	ldr	r3, [pc, #24]	; (8002fb4 <cleanup_stdio+0x3c>)
 8002f9a:	4299      	cmp	r1, r3
 8002f9c:	d004      	beq.n	8002fa8 <cleanup_stdio+0x30>
 8002f9e:	4620      	mov	r0, r4
 8002fa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002fa4:	f000 be7a 	b.w	8003c9c <_fflush_r>
 8002fa8:	bd10      	pop	{r4, pc}
 8002faa:	bf00      	nop
 8002fac:	2000054c 	.word	0x2000054c
 8002fb0:	200005b4 	.word	0x200005b4
 8002fb4:	2000061c 	.word	0x2000061c

08002fb8 <global_stdio_init.part.0>:
 8002fb8:	b510      	push	{r4, lr}
 8002fba:	4b0b      	ldr	r3, [pc, #44]	; (8002fe8 <global_stdio_init.part.0+0x30>)
 8002fbc:	4c0b      	ldr	r4, [pc, #44]	; (8002fec <global_stdio_init.part.0+0x34>)
 8002fbe:	4a0c      	ldr	r2, [pc, #48]	; (8002ff0 <global_stdio_init.part.0+0x38>)
 8002fc0:	601a      	str	r2, [r3, #0]
 8002fc2:	4620      	mov	r0, r4
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	2104      	movs	r1, #4
 8002fc8:	f7ff ffa6 	bl	8002f18 <std>
 8002fcc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	2109      	movs	r1, #9
 8002fd4:	f7ff ffa0 	bl	8002f18 <std>
 8002fd8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002fdc:	2202      	movs	r2, #2
 8002fde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002fe2:	2112      	movs	r1, #18
 8002fe4:	f7ff bf98 	b.w	8002f18 <std>
 8002fe8:	20000684 	.word	0x20000684
 8002fec:	2000054c 	.word	0x2000054c
 8002ff0:	08002f61 	.word	0x08002f61

08002ff4 <__sfp_lock_acquire>:
 8002ff4:	4801      	ldr	r0, [pc, #4]	; (8002ffc <__sfp_lock_acquire+0x8>)
 8002ff6:	f000 b9fd 	b.w	80033f4 <__retarget_lock_acquire_recursive>
 8002ffa:	bf00      	nop
 8002ffc:	2000068d 	.word	0x2000068d

08003000 <__sfp_lock_release>:
 8003000:	4801      	ldr	r0, [pc, #4]	; (8003008 <__sfp_lock_release+0x8>)
 8003002:	f000 b9f8 	b.w	80033f6 <__retarget_lock_release_recursive>
 8003006:	bf00      	nop
 8003008:	2000068d 	.word	0x2000068d

0800300c <__sinit>:
 800300c:	b510      	push	{r4, lr}
 800300e:	4604      	mov	r4, r0
 8003010:	f7ff fff0 	bl	8002ff4 <__sfp_lock_acquire>
 8003014:	6a23      	ldr	r3, [r4, #32]
 8003016:	b11b      	cbz	r3, 8003020 <__sinit+0x14>
 8003018:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800301c:	f7ff bff0 	b.w	8003000 <__sfp_lock_release>
 8003020:	4b04      	ldr	r3, [pc, #16]	; (8003034 <__sinit+0x28>)
 8003022:	6223      	str	r3, [r4, #32]
 8003024:	4b04      	ldr	r3, [pc, #16]	; (8003038 <__sinit+0x2c>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d1f5      	bne.n	8003018 <__sinit+0xc>
 800302c:	f7ff ffc4 	bl	8002fb8 <global_stdio_init.part.0>
 8003030:	e7f2      	b.n	8003018 <__sinit+0xc>
 8003032:	bf00      	nop
 8003034:	08002f79 	.word	0x08002f79
 8003038:	20000684 	.word	0x20000684

0800303c <_fwalk_sglue>:
 800303c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003040:	4607      	mov	r7, r0
 8003042:	4688      	mov	r8, r1
 8003044:	4614      	mov	r4, r2
 8003046:	2600      	movs	r6, #0
 8003048:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800304c:	f1b9 0901 	subs.w	r9, r9, #1
 8003050:	d505      	bpl.n	800305e <_fwalk_sglue+0x22>
 8003052:	6824      	ldr	r4, [r4, #0]
 8003054:	2c00      	cmp	r4, #0
 8003056:	d1f7      	bne.n	8003048 <_fwalk_sglue+0xc>
 8003058:	4630      	mov	r0, r6
 800305a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800305e:	89ab      	ldrh	r3, [r5, #12]
 8003060:	2b01      	cmp	r3, #1
 8003062:	d907      	bls.n	8003074 <_fwalk_sglue+0x38>
 8003064:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003068:	3301      	adds	r3, #1
 800306a:	d003      	beq.n	8003074 <_fwalk_sglue+0x38>
 800306c:	4629      	mov	r1, r5
 800306e:	4638      	mov	r0, r7
 8003070:	47c0      	blx	r8
 8003072:	4306      	orrs	r6, r0
 8003074:	3568      	adds	r5, #104	; 0x68
 8003076:	e7e9      	b.n	800304c <_fwalk_sglue+0x10>

08003078 <iprintf>:
 8003078:	b40f      	push	{r0, r1, r2, r3}
 800307a:	b507      	push	{r0, r1, r2, lr}
 800307c:	4906      	ldr	r1, [pc, #24]	; (8003098 <iprintf+0x20>)
 800307e:	ab04      	add	r3, sp, #16
 8003080:	6808      	ldr	r0, [r1, #0]
 8003082:	f853 2b04 	ldr.w	r2, [r3], #4
 8003086:	6881      	ldr	r1, [r0, #8]
 8003088:	9301      	str	r3, [sp, #4]
 800308a:	f000 fad7 	bl	800363c <_vfiprintf_r>
 800308e:	b003      	add	sp, #12
 8003090:	f85d eb04 	ldr.w	lr, [sp], #4
 8003094:	b004      	add	sp, #16
 8003096:	4770      	bx	lr
 8003098:	20000064 	.word	0x20000064

0800309c <_puts_r>:
 800309c:	6a03      	ldr	r3, [r0, #32]
 800309e:	b570      	push	{r4, r5, r6, lr}
 80030a0:	6884      	ldr	r4, [r0, #8]
 80030a2:	4605      	mov	r5, r0
 80030a4:	460e      	mov	r6, r1
 80030a6:	b90b      	cbnz	r3, 80030ac <_puts_r+0x10>
 80030a8:	f7ff ffb0 	bl	800300c <__sinit>
 80030ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80030ae:	07db      	lsls	r3, r3, #31
 80030b0:	d405      	bmi.n	80030be <_puts_r+0x22>
 80030b2:	89a3      	ldrh	r3, [r4, #12]
 80030b4:	0598      	lsls	r0, r3, #22
 80030b6:	d402      	bmi.n	80030be <_puts_r+0x22>
 80030b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80030ba:	f000 f99b 	bl	80033f4 <__retarget_lock_acquire_recursive>
 80030be:	89a3      	ldrh	r3, [r4, #12]
 80030c0:	0719      	lsls	r1, r3, #28
 80030c2:	d513      	bpl.n	80030ec <_puts_r+0x50>
 80030c4:	6923      	ldr	r3, [r4, #16]
 80030c6:	b18b      	cbz	r3, 80030ec <_puts_r+0x50>
 80030c8:	3e01      	subs	r6, #1
 80030ca:	68a3      	ldr	r3, [r4, #8]
 80030cc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80030d0:	3b01      	subs	r3, #1
 80030d2:	60a3      	str	r3, [r4, #8]
 80030d4:	b9e9      	cbnz	r1, 8003112 <_puts_r+0x76>
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	da2e      	bge.n	8003138 <_puts_r+0x9c>
 80030da:	4622      	mov	r2, r4
 80030dc:	210a      	movs	r1, #10
 80030de:	4628      	mov	r0, r5
 80030e0:	f000 f87b 	bl	80031da <__swbuf_r>
 80030e4:	3001      	adds	r0, #1
 80030e6:	d007      	beq.n	80030f8 <_puts_r+0x5c>
 80030e8:	250a      	movs	r5, #10
 80030ea:	e007      	b.n	80030fc <_puts_r+0x60>
 80030ec:	4621      	mov	r1, r4
 80030ee:	4628      	mov	r0, r5
 80030f0:	f000 f8b0 	bl	8003254 <__swsetup_r>
 80030f4:	2800      	cmp	r0, #0
 80030f6:	d0e7      	beq.n	80030c8 <_puts_r+0x2c>
 80030f8:	f04f 35ff 	mov.w	r5, #4294967295
 80030fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80030fe:	07da      	lsls	r2, r3, #31
 8003100:	d405      	bmi.n	800310e <_puts_r+0x72>
 8003102:	89a3      	ldrh	r3, [r4, #12]
 8003104:	059b      	lsls	r3, r3, #22
 8003106:	d402      	bmi.n	800310e <_puts_r+0x72>
 8003108:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800310a:	f000 f974 	bl	80033f6 <__retarget_lock_release_recursive>
 800310e:	4628      	mov	r0, r5
 8003110:	bd70      	pop	{r4, r5, r6, pc}
 8003112:	2b00      	cmp	r3, #0
 8003114:	da04      	bge.n	8003120 <_puts_r+0x84>
 8003116:	69a2      	ldr	r2, [r4, #24]
 8003118:	429a      	cmp	r2, r3
 800311a:	dc06      	bgt.n	800312a <_puts_r+0x8e>
 800311c:	290a      	cmp	r1, #10
 800311e:	d004      	beq.n	800312a <_puts_r+0x8e>
 8003120:	6823      	ldr	r3, [r4, #0]
 8003122:	1c5a      	adds	r2, r3, #1
 8003124:	6022      	str	r2, [r4, #0]
 8003126:	7019      	strb	r1, [r3, #0]
 8003128:	e7cf      	b.n	80030ca <_puts_r+0x2e>
 800312a:	4622      	mov	r2, r4
 800312c:	4628      	mov	r0, r5
 800312e:	f000 f854 	bl	80031da <__swbuf_r>
 8003132:	3001      	adds	r0, #1
 8003134:	d1c9      	bne.n	80030ca <_puts_r+0x2e>
 8003136:	e7df      	b.n	80030f8 <_puts_r+0x5c>
 8003138:	6823      	ldr	r3, [r4, #0]
 800313a:	250a      	movs	r5, #10
 800313c:	1c5a      	adds	r2, r3, #1
 800313e:	6022      	str	r2, [r4, #0]
 8003140:	701d      	strb	r5, [r3, #0]
 8003142:	e7db      	b.n	80030fc <_puts_r+0x60>

08003144 <puts>:
 8003144:	4b02      	ldr	r3, [pc, #8]	; (8003150 <puts+0xc>)
 8003146:	4601      	mov	r1, r0
 8003148:	6818      	ldr	r0, [r3, #0]
 800314a:	f7ff bfa7 	b.w	800309c <_puts_r>
 800314e:	bf00      	nop
 8003150:	20000064 	.word	0x20000064

08003154 <__sread>:
 8003154:	b510      	push	{r4, lr}
 8003156:	460c      	mov	r4, r1
 8003158:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800315c:	f000 f8fc 	bl	8003358 <_read_r>
 8003160:	2800      	cmp	r0, #0
 8003162:	bfab      	itete	ge
 8003164:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003166:	89a3      	ldrhlt	r3, [r4, #12]
 8003168:	181b      	addge	r3, r3, r0
 800316a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800316e:	bfac      	ite	ge
 8003170:	6563      	strge	r3, [r4, #84]	; 0x54
 8003172:	81a3      	strhlt	r3, [r4, #12]
 8003174:	bd10      	pop	{r4, pc}

08003176 <__swrite>:
 8003176:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800317a:	461f      	mov	r7, r3
 800317c:	898b      	ldrh	r3, [r1, #12]
 800317e:	05db      	lsls	r3, r3, #23
 8003180:	4605      	mov	r5, r0
 8003182:	460c      	mov	r4, r1
 8003184:	4616      	mov	r6, r2
 8003186:	d505      	bpl.n	8003194 <__swrite+0x1e>
 8003188:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800318c:	2302      	movs	r3, #2
 800318e:	2200      	movs	r2, #0
 8003190:	f000 f8d0 	bl	8003334 <_lseek_r>
 8003194:	89a3      	ldrh	r3, [r4, #12]
 8003196:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800319a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800319e:	81a3      	strh	r3, [r4, #12]
 80031a0:	4632      	mov	r2, r6
 80031a2:	463b      	mov	r3, r7
 80031a4:	4628      	mov	r0, r5
 80031a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80031aa:	f000 b8e7 	b.w	800337c <_write_r>

080031ae <__sseek>:
 80031ae:	b510      	push	{r4, lr}
 80031b0:	460c      	mov	r4, r1
 80031b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031b6:	f000 f8bd 	bl	8003334 <_lseek_r>
 80031ba:	1c43      	adds	r3, r0, #1
 80031bc:	89a3      	ldrh	r3, [r4, #12]
 80031be:	bf15      	itete	ne
 80031c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80031c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80031c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80031ca:	81a3      	strheq	r3, [r4, #12]
 80031cc:	bf18      	it	ne
 80031ce:	81a3      	strhne	r3, [r4, #12]
 80031d0:	bd10      	pop	{r4, pc}

080031d2 <__sclose>:
 80031d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031d6:	f000 b89d 	b.w	8003314 <_close_r>

080031da <__swbuf_r>:
 80031da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031dc:	460e      	mov	r6, r1
 80031de:	4614      	mov	r4, r2
 80031e0:	4605      	mov	r5, r0
 80031e2:	b118      	cbz	r0, 80031ec <__swbuf_r+0x12>
 80031e4:	6a03      	ldr	r3, [r0, #32]
 80031e6:	b90b      	cbnz	r3, 80031ec <__swbuf_r+0x12>
 80031e8:	f7ff ff10 	bl	800300c <__sinit>
 80031ec:	69a3      	ldr	r3, [r4, #24]
 80031ee:	60a3      	str	r3, [r4, #8]
 80031f0:	89a3      	ldrh	r3, [r4, #12]
 80031f2:	071a      	lsls	r2, r3, #28
 80031f4:	d525      	bpl.n	8003242 <__swbuf_r+0x68>
 80031f6:	6923      	ldr	r3, [r4, #16]
 80031f8:	b31b      	cbz	r3, 8003242 <__swbuf_r+0x68>
 80031fa:	6823      	ldr	r3, [r4, #0]
 80031fc:	6922      	ldr	r2, [r4, #16]
 80031fe:	1a98      	subs	r0, r3, r2
 8003200:	6963      	ldr	r3, [r4, #20]
 8003202:	b2f6      	uxtb	r6, r6
 8003204:	4283      	cmp	r3, r0
 8003206:	4637      	mov	r7, r6
 8003208:	dc04      	bgt.n	8003214 <__swbuf_r+0x3a>
 800320a:	4621      	mov	r1, r4
 800320c:	4628      	mov	r0, r5
 800320e:	f000 fd45 	bl	8003c9c <_fflush_r>
 8003212:	b9e0      	cbnz	r0, 800324e <__swbuf_r+0x74>
 8003214:	68a3      	ldr	r3, [r4, #8]
 8003216:	3b01      	subs	r3, #1
 8003218:	60a3      	str	r3, [r4, #8]
 800321a:	6823      	ldr	r3, [r4, #0]
 800321c:	1c5a      	adds	r2, r3, #1
 800321e:	6022      	str	r2, [r4, #0]
 8003220:	701e      	strb	r6, [r3, #0]
 8003222:	6962      	ldr	r2, [r4, #20]
 8003224:	1c43      	adds	r3, r0, #1
 8003226:	429a      	cmp	r2, r3
 8003228:	d004      	beq.n	8003234 <__swbuf_r+0x5a>
 800322a:	89a3      	ldrh	r3, [r4, #12]
 800322c:	07db      	lsls	r3, r3, #31
 800322e:	d506      	bpl.n	800323e <__swbuf_r+0x64>
 8003230:	2e0a      	cmp	r6, #10
 8003232:	d104      	bne.n	800323e <__swbuf_r+0x64>
 8003234:	4621      	mov	r1, r4
 8003236:	4628      	mov	r0, r5
 8003238:	f000 fd30 	bl	8003c9c <_fflush_r>
 800323c:	b938      	cbnz	r0, 800324e <__swbuf_r+0x74>
 800323e:	4638      	mov	r0, r7
 8003240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003242:	4621      	mov	r1, r4
 8003244:	4628      	mov	r0, r5
 8003246:	f000 f805 	bl	8003254 <__swsetup_r>
 800324a:	2800      	cmp	r0, #0
 800324c:	d0d5      	beq.n	80031fa <__swbuf_r+0x20>
 800324e:	f04f 37ff 	mov.w	r7, #4294967295
 8003252:	e7f4      	b.n	800323e <__swbuf_r+0x64>

08003254 <__swsetup_r>:
 8003254:	b538      	push	{r3, r4, r5, lr}
 8003256:	4b2a      	ldr	r3, [pc, #168]	; (8003300 <__swsetup_r+0xac>)
 8003258:	4605      	mov	r5, r0
 800325a:	6818      	ldr	r0, [r3, #0]
 800325c:	460c      	mov	r4, r1
 800325e:	b118      	cbz	r0, 8003268 <__swsetup_r+0x14>
 8003260:	6a03      	ldr	r3, [r0, #32]
 8003262:	b90b      	cbnz	r3, 8003268 <__swsetup_r+0x14>
 8003264:	f7ff fed2 	bl	800300c <__sinit>
 8003268:	89a3      	ldrh	r3, [r4, #12]
 800326a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800326e:	0718      	lsls	r0, r3, #28
 8003270:	d422      	bmi.n	80032b8 <__swsetup_r+0x64>
 8003272:	06d9      	lsls	r1, r3, #27
 8003274:	d407      	bmi.n	8003286 <__swsetup_r+0x32>
 8003276:	2309      	movs	r3, #9
 8003278:	602b      	str	r3, [r5, #0]
 800327a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800327e:	81a3      	strh	r3, [r4, #12]
 8003280:	f04f 30ff 	mov.w	r0, #4294967295
 8003284:	e034      	b.n	80032f0 <__swsetup_r+0x9c>
 8003286:	0758      	lsls	r0, r3, #29
 8003288:	d512      	bpl.n	80032b0 <__swsetup_r+0x5c>
 800328a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800328c:	b141      	cbz	r1, 80032a0 <__swsetup_r+0x4c>
 800328e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003292:	4299      	cmp	r1, r3
 8003294:	d002      	beq.n	800329c <__swsetup_r+0x48>
 8003296:	4628      	mov	r0, r5
 8003298:	f000 f8ae 	bl	80033f8 <_free_r>
 800329c:	2300      	movs	r3, #0
 800329e:	6363      	str	r3, [r4, #52]	; 0x34
 80032a0:	89a3      	ldrh	r3, [r4, #12]
 80032a2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80032a6:	81a3      	strh	r3, [r4, #12]
 80032a8:	2300      	movs	r3, #0
 80032aa:	6063      	str	r3, [r4, #4]
 80032ac:	6923      	ldr	r3, [r4, #16]
 80032ae:	6023      	str	r3, [r4, #0]
 80032b0:	89a3      	ldrh	r3, [r4, #12]
 80032b2:	f043 0308 	orr.w	r3, r3, #8
 80032b6:	81a3      	strh	r3, [r4, #12]
 80032b8:	6923      	ldr	r3, [r4, #16]
 80032ba:	b94b      	cbnz	r3, 80032d0 <__swsetup_r+0x7c>
 80032bc:	89a3      	ldrh	r3, [r4, #12]
 80032be:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80032c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032c6:	d003      	beq.n	80032d0 <__swsetup_r+0x7c>
 80032c8:	4621      	mov	r1, r4
 80032ca:	4628      	mov	r0, r5
 80032cc:	f000 fd34 	bl	8003d38 <__smakebuf_r>
 80032d0:	89a0      	ldrh	r0, [r4, #12]
 80032d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80032d6:	f010 0301 	ands.w	r3, r0, #1
 80032da:	d00a      	beq.n	80032f2 <__swsetup_r+0x9e>
 80032dc:	2300      	movs	r3, #0
 80032de:	60a3      	str	r3, [r4, #8]
 80032e0:	6963      	ldr	r3, [r4, #20]
 80032e2:	425b      	negs	r3, r3
 80032e4:	61a3      	str	r3, [r4, #24]
 80032e6:	6923      	ldr	r3, [r4, #16]
 80032e8:	b943      	cbnz	r3, 80032fc <__swsetup_r+0xa8>
 80032ea:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80032ee:	d1c4      	bne.n	800327a <__swsetup_r+0x26>
 80032f0:	bd38      	pop	{r3, r4, r5, pc}
 80032f2:	0781      	lsls	r1, r0, #30
 80032f4:	bf58      	it	pl
 80032f6:	6963      	ldrpl	r3, [r4, #20]
 80032f8:	60a3      	str	r3, [r4, #8]
 80032fa:	e7f4      	b.n	80032e6 <__swsetup_r+0x92>
 80032fc:	2000      	movs	r0, #0
 80032fe:	e7f7      	b.n	80032f0 <__swsetup_r+0x9c>
 8003300:	20000064 	.word	0x20000064

08003304 <memset>:
 8003304:	4402      	add	r2, r0
 8003306:	4603      	mov	r3, r0
 8003308:	4293      	cmp	r3, r2
 800330a:	d100      	bne.n	800330e <memset+0xa>
 800330c:	4770      	bx	lr
 800330e:	f803 1b01 	strb.w	r1, [r3], #1
 8003312:	e7f9      	b.n	8003308 <memset+0x4>

08003314 <_close_r>:
 8003314:	b538      	push	{r3, r4, r5, lr}
 8003316:	4d06      	ldr	r5, [pc, #24]	; (8003330 <_close_r+0x1c>)
 8003318:	2300      	movs	r3, #0
 800331a:	4604      	mov	r4, r0
 800331c:	4608      	mov	r0, r1
 800331e:	602b      	str	r3, [r5, #0]
 8003320:	f7fd fe63 	bl	8000fea <_close>
 8003324:	1c43      	adds	r3, r0, #1
 8003326:	d102      	bne.n	800332e <_close_r+0x1a>
 8003328:	682b      	ldr	r3, [r5, #0]
 800332a:	b103      	cbz	r3, 800332e <_close_r+0x1a>
 800332c:	6023      	str	r3, [r4, #0]
 800332e:	bd38      	pop	{r3, r4, r5, pc}
 8003330:	20000688 	.word	0x20000688

08003334 <_lseek_r>:
 8003334:	b538      	push	{r3, r4, r5, lr}
 8003336:	4d07      	ldr	r5, [pc, #28]	; (8003354 <_lseek_r+0x20>)
 8003338:	4604      	mov	r4, r0
 800333a:	4608      	mov	r0, r1
 800333c:	4611      	mov	r1, r2
 800333e:	2200      	movs	r2, #0
 8003340:	602a      	str	r2, [r5, #0]
 8003342:	461a      	mov	r2, r3
 8003344:	f7fd fe78 	bl	8001038 <_lseek>
 8003348:	1c43      	adds	r3, r0, #1
 800334a:	d102      	bne.n	8003352 <_lseek_r+0x1e>
 800334c:	682b      	ldr	r3, [r5, #0]
 800334e:	b103      	cbz	r3, 8003352 <_lseek_r+0x1e>
 8003350:	6023      	str	r3, [r4, #0]
 8003352:	bd38      	pop	{r3, r4, r5, pc}
 8003354:	20000688 	.word	0x20000688

08003358 <_read_r>:
 8003358:	b538      	push	{r3, r4, r5, lr}
 800335a:	4d07      	ldr	r5, [pc, #28]	; (8003378 <_read_r+0x20>)
 800335c:	4604      	mov	r4, r0
 800335e:	4608      	mov	r0, r1
 8003360:	4611      	mov	r1, r2
 8003362:	2200      	movs	r2, #0
 8003364:	602a      	str	r2, [r5, #0]
 8003366:	461a      	mov	r2, r3
 8003368:	f7fd fe06 	bl	8000f78 <_read>
 800336c:	1c43      	adds	r3, r0, #1
 800336e:	d102      	bne.n	8003376 <_read_r+0x1e>
 8003370:	682b      	ldr	r3, [r5, #0]
 8003372:	b103      	cbz	r3, 8003376 <_read_r+0x1e>
 8003374:	6023      	str	r3, [r4, #0]
 8003376:	bd38      	pop	{r3, r4, r5, pc}
 8003378:	20000688 	.word	0x20000688

0800337c <_write_r>:
 800337c:	b538      	push	{r3, r4, r5, lr}
 800337e:	4d07      	ldr	r5, [pc, #28]	; (800339c <_write_r+0x20>)
 8003380:	4604      	mov	r4, r0
 8003382:	4608      	mov	r0, r1
 8003384:	4611      	mov	r1, r2
 8003386:	2200      	movs	r2, #0
 8003388:	602a      	str	r2, [r5, #0]
 800338a:	461a      	mov	r2, r3
 800338c:	f7fd fe11 	bl	8000fb2 <_write>
 8003390:	1c43      	adds	r3, r0, #1
 8003392:	d102      	bne.n	800339a <_write_r+0x1e>
 8003394:	682b      	ldr	r3, [r5, #0]
 8003396:	b103      	cbz	r3, 800339a <_write_r+0x1e>
 8003398:	6023      	str	r3, [r4, #0]
 800339a:	bd38      	pop	{r3, r4, r5, pc}
 800339c:	20000688 	.word	0x20000688

080033a0 <__errno>:
 80033a0:	4b01      	ldr	r3, [pc, #4]	; (80033a8 <__errno+0x8>)
 80033a2:	6818      	ldr	r0, [r3, #0]
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	20000064 	.word	0x20000064

080033ac <__libc_init_array>:
 80033ac:	b570      	push	{r4, r5, r6, lr}
 80033ae:	4d0d      	ldr	r5, [pc, #52]	; (80033e4 <__libc_init_array+0x38>)
 80033b0:	4c0d      	ldr	r4, [pc, #52]	; (80033e8 <__libc_init_array+0x3c>)
 80033b2:	1b64      	subs	r4, r4, r5
 80033b4:	10a4      	asrs	r4, r4, #2
 80033b6:	2600      	movs	r6, #0
 80033b8:	42a6      	cmp	r6, r4
 80033ba:	d109      	bne.n	80033d0 <__libc_init_array+0x24>
 80033bc:	4d0b      	ldr	r5, [pc, #44]	; (80033ec <__libc_init_array+0x40>)
 80033be:	4c0c      	ldr	r4, [pc, #48]	; (80033f0 <__libc_init_array+0x44>)
 80033c0:	f000 fd28 	bl	8003e14 <_init>
 80033c4:	1b64      	subs	r4, r4, r5
 80033c6:	10a4      	asrs	r4, r4, #2
 80033c8:	2600      	movs	r6, #0
 80033ca:	42a6      	cmp	r6, r4
 80033cc:	d105      	bne.n	80033da <__libc_init_array+0x2e>
 80033ce:	bd70      	pop	{r4, r5, r6, pc}
 80033d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80033d4:	4798      	blx	r3
 80033d6:	3601      	adds	r6, #1
 80033d8:	e7ee      	b.n	80033b8 <__libc_init_array+0xc>
 80033da:	f855 3b04 	ldr.w	r3, [r5], #4
 80033de:	4798      	blx	r3
 80033e0:	3601      	adds	r6, #1
 80033e2:	e7f2      	b.n	80033ca <__libc_init_array+0x1e>
 80033e4:	08004088 	.word	0x08004088
 80033e8:	08004088 	.word	0x08004088
 80033ec:	08004088 	.word	0x08004088
 80033f0:	0800408c 	.word	0x0800408c

080033f4 <__retarget_lock_acquire_recursive>:
 80033f4:	4770      	bx	lr

080033f6 <__retarget_lock_release_recursive>:
 80033f6:	4770      	bx	lr

080033f8 <_free_r>:
 80033f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80033fa:	2900      	cmp	r1, #0
 80033fc:	d044      	beq.n	8003488 <_free_r+0x90>
 80033fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003402:	9001      	str	r0, [sp, #4]
 8003404:	2b00      	cmp	r3, #0
 8003406:	f1a1 0404 	sub.w	r4, r1, #4
 800340a:	bfb8      	it	lt
 800340c:	18e4      	addlt	r4, r4, r3
 800340e:	f000 f8df 	bl	80035d0 <__malloc_lock>
 8003412:	4a1e      	ldr	r2, [pc, #120]	; (800348c <_free_r+0x94>)
 8003414:	9801      	ldr	r0, [sp, #4]
 8003416:	6813      	ldr	r3, [r2, #0]
 8003418:	b933      	cbnz	r3, 8003428 <_free_r+0x30>
 800341a:	6063      	str	r3, [r4, #4]
 800341c:	6014      	str	r4, [r2, #0]
 800341e:	b003      	add	sp, #12
 8003420:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003424:	f000 b8da 	b.w	80035dc <__malloc_unlock>
 8003428:	42a3      	cmp	r3, r4
 800342a:	d908      	bls.n	800343e <_free_r+0x46>
 800342c:	6825      	ldr	r5, [r4, #0]
 800342e:	1961      	adds	r1, r4, r5
 8003430:	428b      	cmp	r3, r1
 8003432:	bf01      	itttt	eq
 8003434:	6819      	ldreq	r1, [r3, #0]
 8003436:	685b      	ldreq	r3, [r3, #4]
 8003438:	1949      	addeq	r1, r1, r5
 800343a:	6021      	streq	r1, [r4, #0]
 800343c:	e7ed      	b.n	800341a <_free_r+0x22>
 800343e:	461a      	mov	r2, r3
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	b10b      	cbz	r3, 8003448 <_free_r+0x50>
 8003444:	42a3      	cmp	r3, r4
 8003446:	d9fa      	bls.n	800343e <_free_r+0x46>
 8003448:	6811      	ldr	r1, [r2, #0]
 800344a:	1855      	adds	r5, r2, r1
 800344c:	42a5      	cmp	r5, r4
 800344e:	d10b      	bne.n	8003468 <_free_r+0x70>
 8003450:	6824      	ldr	r4, [r4, #0]
 8003452:	4421      	add	r1, r4
 8003454:	1854      	adds	r4, r2, r1
 8003456:	42a3      	cmp	r3, r4
 8003458:	6011      	str	r1, [r2, #0]
 800345a:	d1e0      	bne.n	800341e <_free_r+0x26>
 800345c:	681c      	ldr	r4, [r3, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	6053      	str	r3, [r2, #4]
 8003462:	440c      	add	r4, r1
 8003464:	6014      	str	r4, [r2, #0]
 8003466:	e7da      	b.n	800341e <_free_r+0x26>
 8003468:	d902      	bls.n	8003470 <_free_r+0x78>
 800346a:	230c      	movs	r3, #12
 800346c:	6003      	str	r3, [r0, #0]
 800346e:	e7d6      	b.n	800341e <_free_r+0x26>
 8003470:	6825      	ldr	r5, [r4, #0]
 8003472:	1961      	adds	r1, r4, r5
 8003474:	428b      	cmp	r3, r1
 8003476:	bf04      	itt	eq
 8003478:	6819      	ldreq	r1, [r3, #0]
 800347a:	685b      	ldreq	r3, [r3, #4]
 800347c:	6063      	str	r3, [r4, #4]
 800347e:	bf04      	itt	eq
 8003480:	1949      	addeq	r1, r1, r5
 8003482:	6021      	streq	r1, [r4, #0]
 8003484:	6054      	str	r4, [r2, #4]
 8003486:	e7ca      	b.n	800341e <_free_r+0x26>
 8003488:	b003      	add	sp, #12
 800348a:	bd30      	pop	{r4, r5, pc}
 800348c:	20000690 	.word	0x20000690

08003490 <sbrk_aligned>:
 8003490:	b570      	push	{r4, r5, r6, lr}
 8003492:	4e0e      	ldr	r6, [pc, #56]	; (80034cc <sbrk_aligned+0x3c>)
 8003494:	460c      	mov	r4, r1
 8003496:	6831      	ldr	r1, [r6, #0]
 8003498:	4605      	mov	r5, r0
 800349a:	b911      	cbnz	r1, 80034a2 <sbrk_aligned+0x12>
 800349c:	f000 fcaa 	bl	8003df4 <_sbrk_r>
 80034a0:	6030      	str	r0, [r6, #0]
 80034a2:	4621      	mov	r1, r4
 80034a4:	4628      	mov	r0, r5
 80034a6:	f000 fca5 	bl	8003df4 <_sbrk_r>
 80034aa:	1c43      	adds	r3, r0, #1
 80034ac:	d00a      	beq.n	80034c4 <sbrk_aligned+0x34>
 80034ae:	1cc4      	adds	r4, r0, #3
 80034b0:	f024 0403 	bic.w	r4, r4, #3
 80034b4:	42a0      	cmp	r0, r4
 80034b6:	d007      	beq.n	80034c8 <sbrk_aligned+0x38>
 80034b8:	1a21      	subs	r1, r4, r0
 80034ba:	4628      	mov	r0, r5
 80034bc:	f000 fc9a 	bl	8003df4 <_sbrk_r>
 80034c0:	3001      	adds	r0, #1
 80034c2:	d101      	bne.n	80034c8 <sbrk_aligned+0x38>
 80034c4:	f04f 34ff 	mov.w	r4, #4294967295
 80034c8:	4620      	mov	r0, r4
 80034ca:	bd70      	pop	{r4, r5, r6, pc}
 80034cc:	20000694 	.word	0x20000694

080034d0 <_malloc_r>:
 80034d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034d4:	1ccd      	adds	r5, r1, #3
 80034d6:	f025 0503 	bic.w	r5, r5, #3
 80034da:	3508      	adds	r5, #8
 80034dc:	2d0c      	cmp	r5, #12
 80034de:	bf38      	it	cc
 80034e0:	250c      	movcc	r5, #12
 80034e2:	2d00      	cmp	r5, #0
 80034e4:	4607      	mov	r7, r0
 80034e6:	db01      	blt.n	80034ec <_malloc_r+0x1c>
 80034e8:	42a9      	cmp	r1, r5
 80034ea:	d905      	bls.n	80034f8 <_malloc_r+0x28>
 80034ec:	230c      	movs	r3, #12
 80034ee:	603b      	str	r3, [r7, #0]
 80034f0:	2600      	movs	r6, #0
 80034f2:	4630      	mov	r0, r6
 80034f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034f8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80035cc <_malloc_r+0xfc>
 80034fc:	f000 f868 	bl	80035d0 <__malloc_lock>
 8003500:	f8d8 3000 	ldr.w	r3, [r8]
 8003504:	461c      	mov	r4, r3
 8003506:	bb5c      	cbnz	r4, 8003560 <_malloc_r+0x90>
 8003508:	4629      	mov	r1, r5
 800350a:	4638      	mov	r0, r7
 800350c:	f7ff ffc0 	bl	8003490 <sbrk_aligned>
 8003510:	1c43      	adds	r3, r0, #1
 8003512:	4604      	mov	r4, r0
 8003514:	d155      	bne.n	80035c2 <_malloc_r+0xf2>
 8003516:	f8d8 4000 	ldr.w	r4, [r8]
 800351a:	4626      	mov	r6, r4
 800351c:	2e00      	cmp	r6, #0
 800351e:	d145      	bne.n	80035ac <_malloc_r+0xdc>
 8003520:	2c00      	cmp	r4, #0
 8003522:	d048      	beq.n	80035b6 <_malloc_r+0xe6>
 8003524:	6823      	ldr	r3, [r4, #0]
 8003526:	4631      	mov	r1, r6
 8003528:	4638      	mov	r0, r7
 800352a:	eb04 0903 	add.w	r9, r4, r3
 800352e:	f000 fc61 	bl	8003df4 <_sbrk_r>
 8003532:	4581      	cmp	r9, r0
 8003534:	d13f      	bne.n	80035b6 <_malloc_r+0xe6>
 8003536:	6821      	ldr	r1, [r4, #0]
 8003538:	1a6d      	subs	r5, r5, r1
 800353a:	4629      	mov	r1, r5
 800353c:	4638      	mov	r0, r7
 800353e:	f7ff ffa7 	bl	8003490 <sbrk_aligned>
 8003542:	3001      	adds	r0, #1
 8003544:	d037      	beq.n	80035b6 <_malloc_r+0xe6>
 8003546:	6823      	ldr	r3, [r4, #0]
 8003548:	442b      	add	r3, r5
 800354a:	6023      	str	r3, [r4, #0]
 800354c:	f8d8 3000 	ldr.w	r3, [r8]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d038      	beq.n	80035c6 <_malloc_r+0xf6>
 8003554:	685a      	ldr	r2, [r3, #4]
 8003556:	42a2      	cmp	r2, r4
 8003558:	d12b      	bne.n	80035b2 <_malloc_r+0xe2>
 800355a:	2200      	movs	r2, #0
 800355c:	605a      	str	r2, [r3, #4]
 800355e:	e00f      	b.n	8003580 <_malloc_r+0xb0>
 8003560:	6822      	ldr	r2, [r4, #0]
 8003562:	1b52      	subs	r2, r2, r5
 8003564:	d41f      	bmi.n	80035a6 <_malloc_r+0xd6>
 8003566:	2a0b      	cmp	r2, #11
 8003568:	d917      	bls.n	800359a <_malloc_r+0xca>
 800356a:	1961      	adds	r1, r4, r5
 800356c:	42a3      	cmp	r3, r4
 800356e:	6025      	str	r5, [r4, #0]
 8003570:	bf18      	it	ne
 8003572:	6059      	strne	r1, [r3, #4]
 8003574:	6863      	ldr	r3, [r4, #4]
 8003576:	bf08      	it	eq
 8003578:	f8c8 1000 	streq.w	r1, [r8]
 800357c:	5162      	str	r2, [r4, r5]
 800357e:	604b      	str	r3, [r1, #4]
 8003580:	4638      	mov	r0, r7
 8003582:	f104 060b 	add.w	r6, r4, #11
 8003586:	f000 f829 	bl	80035dc <__malloc_unlock>
 800358a:	f026 0607 	bic.w	r6, r6, #7
 800358e:	1d23      	adds	r3, r4, #4
 8003590:	1af2      	subs	r2, r6, r3
 8003592:	d0ae      	beq.n	80034f2 <_malloc_r+0x22>
 8003594:	1b9b      	subs	r3, r3, r6
 8003596:	50a3      	str	r3, [r4, r2]
 8003598:	e7ab      	b.n	80034f2 <_malloc_r+0x22>
 800359a:	42a3      	cmp	r3, r4
 800359c:	6862      	ldr	r2, [r4, #4]
 800359e:	d1dd      	bne.n	800355c <_malloc_r+0x8c>
 80035a0:	f8c8 2000 	str.w	r2, [r8]
 80035a4:	e7ec      	b.n	8003580 <_malloc_r+0xb0>
 80035a6:	4623      	mov	r3, r4
 80035a8:	6864      	ldr	r4, [r4, #4]
 80035aa:	e7ac      	b.n	8003506 <_malloc_r+0x36>
 80035ac:	4634      	mov	r4, r6
 80035ae:	6876      	ldr	r6, [r6, #4]
 80035b0:	e7b4      	b.n	800351c <_malloc_r+0x4c>
 80035b2:	4613      	mov	r3, r2
 80035b4:	e7cc      	b.n	8003550 <_malloc_r+0x80>
 80035b6:	230c      	movs	r3, #12
 80035b8:	603b      	str	r3, [r7, #0]
 80035ba:	4638      	mov	r0, r7
 80035bc:	f000 f80e 	bl	80035dc <__malloc_unlock>
 80035c0:	e797      	b.n	80034f2 <_malloc_r+0x22>
 80035c2:	6025      	str	r5, [r4, #0]
 80035c4:	e7dc      	b.n	8003580 <_malloc_r+0xb0>
 80035c6:	605b      	str	r3, [r3, #4]
 80035c8:	deff      	udf	#255	; 0xff
 80035ca:	bf00      	nop
 80035cc:	20000690 	.word	0x20000690

080035d0 <__malloc_lock>:
 80035d0:	4801      	ldr	r0, [pc, #4]	; (80035d8 <__malloc_lock+0x8>)
 80035d2:	f7ff bf0f 	b.w	80033f4 <__retarget_lock_acquire_recursive>
 80035d6:	bf00      	nop
 80035d8:	2000068c 	.word	0x2000068c

080035dc <__malloc_unlock>:
 80035dc:	4801      	ldr	r0, [pc, #4]	; (80035e4 <__malloc_unlock+0x8>)
 80035de:	f7ff bf0a 	b.w	80033f6 <__retarget_lock_release_recursive>
 80035e2:	bf00      	nop
 80035e4:	2000068c 	.word	0x2000068c

080035e8 <__sfputc_r>:
 80035e8:	6893      	ldr	r3, [r2, #8]
 80035ea:	3b01      	subs	r3, #1
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	b410      	push	{r4}
 80035f0:	6093      	str	r3, [r2, #8]
 80035f2:	da08      	bge.n	8003606 <__sfputc_r+0x1e>
 80035f4:	6994      	ldr	r4, [r2, #24]
 80035f6:	42a3      	cmp	r3, r4
 80035f8:	db01      	blt.n	80035fe <__sfputc_r+0x16>
 80035fa:	290a      	cmp	r1, #10
 80035fc:	d103      	bne.n	8003606 <__sfputc_r+0x1e>
 80035fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003602:	f7ff bdea 	b.w	80031da <__swbuf_r>
 8003606:	6813      	ldr	r3, [r2, #0]
 8003608:	1c58      	adds	r0, r3, #1
 800360a:	6010      	str	r0, [r2, #0]
 800360c:	7019      	strb	r1, [r3, #0]
 800360e:	4608      	mov	r0, r1
 8003610:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003614:	4770      	bx	lr

08003616 <__sfputs_r>:
 8003616:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003618:	4606      	mov	r6, r0
 800361a:	460f      	mov	r7, r1
 800361c:	4614      	mov	r4, r2
 800361e:	18d5      	adds	r5, r2, r3
 8003620:	42ac      	cmp	r4, r5
 8003622:	d101      	bne.n	8003628 <__sfputs_r+0x12>
 8003624:	2000      	movs	r0, #0
 8003626:	e007      	b.n	8003638 <__sfputs_r+0x22>
 8003628:	f814 1b01 	ldrb.w	r1, [r4], #1
 800362c:	463a      	mov	r2, r7
 800362e:	4630      	mov	r0, r6
 8003630:	f7ff ffda 	bl	80035e8 <__sfputc_r>
 8003634:	1c43      	adds	r3, r0, #1
 8003636:	d1f3      	bne.n	8003620 <__sfputs_r+0xa>
 8003638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800363c <_vfiprintf_r>:
 800363c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003640:	460d      	mov	r5, r1
 8003642:	b09d      	sub	sp, #116	; 0x74
 8003644:	4614      	mov	r4, r2
 8003646:	4698      	mov	r8, r3
 8003648:	4606      	mov	r6, r0
 800364a:	b118      	cbz	r0, 8003654 <_vfiprintf_r+0x18>
 800364c:	6a03      	ldr	r3, [r0, #32]
 800364e:	b90b      	cbnz	r3, 8003654 <_vfiprintf_r+0x18>
 8003650:	f7ff fcdc 	bl	800300c <__sinit>
 8003654:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003656:	07d9      	lsls	r1, r3, #31
 8003658:	d405      	bmi.n	8003666 <_vfiprintf_r+0x2a>
 800365a:	89ab      	ldrh	r3, [r5, #12]
 800365c:	059a      	lsls	r2, r3, #22
 800365e:	d402      	bmi.n	8003666 <_vfiprintf_r+0x2a>
 8003660:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003662:	f7ff fec7 	bl	80033f4 <__retarget_lock_acquire_recursive>
 8003666:	89ab      	ldrh	r3, [r5, #12]
 8003668:	071b      	lsls	r3, r3, #28
 800366a:	d501      	bpl.n	8003670 <_vfiprintf_r+0x34>
 800366c:	692b      	ldr	r3, [r5, #16]
 800366e:	b99b      	cbnz	r3, 8003698 <_vfiprintf_r+0x5c>
 8003670:	4629      	mov	r1, r5
 8003672:	4630      	mov	r0, r6
 8003674:	f7ff fdee 	bl	8003254 <__swsetup_r>
 8003678:	b170      	cbz	r0, 8003698 <_vfiprintf_r+0x5c>
 800367a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800367c:	07dc      	lsls	r4, r3, #31
 800367e:	d504      	bpl.n	800368a <_vfiprintf_r+0x4e>
 8003680:	f04f 30ff 	mov.w	r0, #4294967295
 8003684:	b01d      	add	sp, #116	; 0x74
 8003686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800368a:	89ab      	ldrh	r3, [r5, #12]
 800368c:	0598      	lsls	r0, r3, #22
 800368e:	d4f7      	bmi.n	8003680 <_vfiprintf_r+0x44>
 8003690:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003692:	f7ff feb0 	bl	80033f6 <__retarget_lock_release_recursive>
 8003696:	e7f3      	b.n	8003680 <_vfiprintf_r+0x44>
 8003698:	2300      	movs	r3, #0
 800369a:	9309      	str	r3, [sp, #36]	; 0x24
 800369c:	2320      	movs	r3, #32
 800369e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80036a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80036a6:	2330      	movs	r3, #48	; 0x30
 80036a8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800385c <_vfiprintf_r+0x220>
 80036ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80036b0:	f04f 0901 	mov.w	r9, #1
 80036b4:	4623      	mov	r3, r4
 80036b6:	469a      	mov	sl, r3
 80036b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80036bc:	b10a      	cbz	r2, 80036c2 <_vfiprintf_r+0x86>
 80036be:	2a25      	cmp	r2, #37	; 0x25
 80036c0:	d1f9      	bne.n	80036b6 <_vfiprintf_r+0x7a>
 80036c2:	ebba 0b04 	subs.w	fp, sl, r4
 80036c6:	d00b      	beq.n	80036e0 <_vfiprintf_r+0xa4>
 80036c8:	465b      	mov	r3, fp
 80036ca:	4622      	mov	r2, r4
 80036cc:	4629      	mov	r1, r5
 80036ce:	4630      	mov	r0, r6
 80036d0:	f7ff ffa1 	bl	8003616 <__sfputs_r>
 80036d4:	3001      	adds	r0, #1
 80036d6:	f000 80a9 	beq.w	800382c <_vfiprintf_r+0x1f0>
 80036da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80036dc:	445a      	add	r2, fp
 80036de:	9209      	str	r2, [sp, #36]	; 0x24
 80036e0:	f89a 3000 	ldrb.w	r3, [sl]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f000 80a1 	beq.w	800382c <_vfiprintf_r+0x1f0>
 80036ea:	2300      	movs	r3, #0
 80036ec:	f04f 32ff 	mov.w	r2, #4294967295
 80036f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80036f4:	f10a 0a01 	add.w	sl, sl, #1
 80036f8:	9304      	str	r3, [sp, #16]
 80036fa:	9307      	str	r3, [sp, #28]
 80036fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003700:	931a      	str	r3, [sp, #104]	; 0x68
 8003702:	4654      	mov	r4, sl
 8003704:	2205      	movs	r2, #5
 8003706:	f814 1b01 	ldrb.w	r1, [r4], #1
 800370a:	4854      	ldr	r0, [pc, #336]	; (800385c <_vfiprintf_r+0x220>)
 800370c:	f7fc fd68 	bl	80001e0 <memchr>
 8003710:	9a04      	ldr	r2, [sp, #16]
 8003712:	b9d8      	cbnz	r0, 800374c <_vfiprintf_r+0x110>
 8003714:	06d1      	lsls	r1, r2, #27
 8003716:	bf44      	itt	mi
 8003718:	2320      	movmi	r3, #32
 800371a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800371e:	0713      	lsls	r3, r2, #28
 8003720:	bf44      	itt	mi
 8003722:	232b      	movmi	r3, #43	; 0x2b
 8003724:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003728:	f89a 3000 	ldrb.w	r3, [sl]
 800372c:	2b2a      	cmp	r3, #42	; 0x2a
 800372e:	d015      	beq.n	800375c <_vfiprintf_r+0x120>
 8003730:	9a07      	ldr	r2, [sp, #28]
 8003732:	4654      	mov	r4, sl
 8003734:	2000      	movs	r0, #0
 8003736:	f04f 0c0a 	mov.w	ip, #10
 800373a:	4621      	mov	r1, r4
 800373c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003740:	3b30      	subs	r3, #48	; 0x30
 8003742:	2b09      	cmp	r3, #9
 8003744:	d94d      	bls.n	80037e2 <_vfiprintf_r+0x1a6>
 8003746:	b1b0      	cbz	r0, 8003776 <_vfiprintf_r+0x13a>
 8003748:	9207      	str	r2, [sp, #28]
 800374a:	e014      	b.n	8003776 <_vfiprintf_r+0x13a>
 800374c:	eba0 0308 	sub.w	r3, r0, r8
 8003750:	fa09 f303 	lsl.w	r3, r9, r3
 8003754:	4313      	orrs	r3, r2
 8003756:	9304      	str	r3, [sp, #16]
 8003758:	46a2      	mov	sl, r4
 800375a:	e7d2      	b.n	8003702 <_vfiprintf_r+0xc6>
 800375c:	9b03      	ldr	r3, [sp, #12]
 800375e:	1d19      	adds	r1, r3, #4
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	9103      	str	r1, [sp, #12]
 8003764:	2b00      	cmp	r3, #0
 8003766:	bfbb      	ittet	lt
 8003768:	425b      	neglt	r3, r3
 800376a:	f042 0202 	orrlt.w	r2, r2, #2
 800376e:	9307      	strge	r3, [sp, #28]
 8003770:	9307      	strlt	r3, [sp, #28]
 8003772:	bfb8      	it	lt
 8003774:	9204      	strlt	r2, [sp, #16]
 8003776:	7823      	ldrb	r3, [r4, #0]
 8003778:	2b2e      	cmp	r3, #46	; 0x2e
 800377a:	d10c      	bne.n	8003796 <_vfiprintf_r+0x15a>
 800377c:	7863      	ldrb	r3, [r4, #1]
 800377e:	2b2a      	cmp	r3, #42	; 0x2a
 8003780:	d134      	bne.n	80037ec <_vfiprintf_r+0x1b0>
 8003782:	9b03      	ldr	r3, [sp, #12]
 8003784:	1d1a      	adds	r2, r3, #4
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	9203      	str	r2, [sp, #12]
 800378a:	2b00      	cmp	r3, #0
 800378c:	bfb8      	it	lt
 800378e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003792:	3402      	adds	r4, #2
 8003794:	9305      	str	r3, [sp, #20]
 8003796:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800386c <_vfiprintf_r+0x230>
 800379a:	7821      	ldrb	r1, [r4, #0]
 800379c:	2203      	movs	r2, #3
 800379e:	4650      	mov	r0, sl
 80037a0:	f7fc fd1e 	bl	80001e0 <memchr>
 80037a4:	b138      	cbz	r0, 80037b6 <_vfiprintf_r+0x17a>
 80037a6:	9b04      	ldr	r3, [sp, #16]
 80037a8:	eba0 000a 	sub.w	r0, r0, sl
 80037ac:	2240      	movs	r2, #64	; 0x40
 80037ae:	4082      	lsls	r2, r0
 80037b0:	4313      	orrs	r3, r2
 80037b2:	3401      	adds	r4, #1
 80037b4:	9304      	str	r3, [sp, #16]
 80037b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037ba:	4829      	ldr	r0, [pc, #164]	; (8003860 <_vfiprintf_r+0x224>)
 80037bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80037c0:	2206      	movs	r2, #6
 80037c2:	f7fc fd0d 	bl	80001e0 <memchr>
 80037c6:	2800      	cmp	r0, #0
 80037c8:	d03f      	beq.n	800384a <_vfiprintf_r+0x20e>
 80037ca:	4b26      	ldr	r3, [pc, #152]	; (8003864 <_vfiprintf_r+0x228>)
 80037cc:	bb1b      	cbnz	r3, 8003816 <_vfiprintf_r+0x1da>
 80037ce:	9b03      	ldr	r3, [sp, #12]
 80037d0:	3307      	adds	r3, #7
 80037d2:	f023 0307 	bic.w	r3, r3, #7
 80037d6:	3308      	adds	r3, #8
 80037d8:	9303      	str	r3, [sp, #12]
 80037da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037dc:	443b      	add	r3, r7
 80037de:	9309      	str	r3, [sp, #36]	; 0x24
 80037e0:	e768      	b.n	80036b4 <_vfiprintf_r+0x78>
 80037e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80037e6:	460c      	mov	r4, r1
 80037e8:	2001      	movs	r0, #1
 80037ea:	e7a6      	b.n	800373a <_vfiprintf_r+0xfe>
 80037ec:	2300      	movs	r3, #0
 80037ee:	3401      	adds	r4, #1
 80037f0:	9305      	str	r3, [sp, #20]
 80037f2:	4619      	mov	r1, r3
 80037f4:	f04f 0c0a 	mov.w	ip, #10
 80037f8:	4620      	mov	r0, r4
 80037fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80037fe:	3a30      	subs	r2, #48	; 0x30
 8003800:	2a09      	cmp	r2, #9
 8003802:	d903      	bls.n	800380c <_vfiprintf_r+0x1d0>
 8003804:	2b00      	cmp	r3, #0
 8003806:	d0c6      	beq.n	8003796 <_vfiprintf_r+0x15a>
 8003808:	9105      	str	r1, [sp, #20]
 800380a:	e7c4      	b.n	8003796 <_vfiprintf_r+0x15a>
 800380c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003810:	4604      	mov	r4, r0
 8003812:	2301      	movs	r3, #1
 8003814:	e7f0      	b.n	80037f8 <_vfiprintf_r+0x1bc>
 8003816:	ab03      	add	r3, sp, #12
 8003818:	9300      	str	r3, [sp, #0]
 800381a:	462a      	mov	r2, r5
 800381c:	4b12      	ldr	r3, [pc, #72]	; (8003868 <_vfiprintf_r+0x22c>)
 800381e:	a904      	add	r1, sp, #16
 8003820:	4630      	mov	r0, r6
 8003822:	f3af 8000 	nop.w
 8003826:	4607      	mov	r7, r0
 8003828:	1c78      	adds	r0, r7, #1
 800382a:	d1d6      	bne.n	80037da <_vfiprintf_r+0x19e>
 800382c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800382e:	07d9      	lsls	r1, r3, #31
 8003830:	d405      	bmi.n	800383e <_vfiprintf_r+0x202>
 8003832:	89ab      	ldrh	r3, [r5, #12]
 8003834:	059a      	lsls	r2, r3, #22
 8003836:	d402      	bmi.n	800383e <_vfiprintf_r+0x202>
 8003838:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800383a:	f7ff fddc 	bl	80033f6 <__retarget_lock_release_recursive>
 800383e:	89ab      	ldrh	r3, [r5, #12]
 8003840:	065b      	lsls	r3, r3, #25
 8003842:	f53f af1d 	bmi.w	8003680 <_vfiprintf_r+0x44>
 8003846:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003848:	e71c      	b.n	8003684 <_vfiprintf_r+0x48>
 800384a:	ab03      	add	r3, sp, #12
 800384c:	9300      	str	r3, [sp, #0]
 800384e:	462a      	mov	r2, r5
 8003850:	4b05      	ldr	r3, [pc, #20]	; (8003868 <_vfiprintf_r+0x22c>)
 8003852:	a904      	add	r1, sp, #16
 8003854:	4630      	mov	r0, r6
 8003856:	f000 f879 	bl	800394c <_printf_i>
 800385a:	e7e4      	b.n	8003826 <_vfiprintf_r+0x1ea>
 800385c:	0800404c 	.word	0x0800404c
 8003860:	08004056 	.word	0x08004056
 8003864:	00000000 	.word	0x00000000
 8003868:	08003617 	.word	0x08003617
 800386c:	08004052 	.word	0x08004052

08003870 <_printf_common>:
 8003870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003874:	4616      	mov	r6, r2
 8003876:	4699      	mov	r9, r3
 8003878:	688a      	ldr	r2, [r1, #8]
 800387a:	690b      	ldr	r3, [r1, #16]
 800387c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003880:	4293      	cmp	r3, r2
 8003882:	bfb8      	it	lt
 8003884:	4613      	movlt	r3, r2
 8003886:	6033      	str	r3, [r6, #0]
 8003888:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800388c:	4607      	mov	r7, r0
 800388e:	460c      	mov	r4, r1
 8003890:	b10a      	cbz	r2, 8003896 <_printf_common+0x26>
 8003892:	3301      	adds	r3, #1
 8003894:	6033      	str	r3, [r6, #0]
 8003896:	6823      	ldr	r3, [r4, #0]
 8003898:	0699      	lsls	r1, r3, #26
 800389a:	bf42      	ittt	mi
 800389c:	6833      	ldrmi	r3, [r6, #0]
 800389e:	3302      	addmi	r3, #2
 80038a0:	6033      	strmi	r3, [r6, #0]
 80038a2:	6825      	ldr	r5, [r4, #0]
 80038a4:	f015 0506 	ands.w	r5, r5, #6
 80038a8:	d106      	bne.n	80038b8 <_printf_common+0x48>
 80038aa:	f104 0a19 	add.w	sl, r4, #25
 80038ae:	68e3      	ldr	r3, [r4, #12]
 80038b0:	6832      	ldr	r2, [r6, #0]
 80038b2:	1a9b      	subs	r3, r3, r2
 80038b4:	42ab      	cmp	r3, r5
 80038b6:	dc26      	bgt.n	8003906 <_printf_common+0x96>
 80038b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80038bc:	1e13      	subs	r3, r2, #0
 80038be:	6822      	ldr	r2, [r4, #0]
 80038c0:	bf18      	it	ne
 80038c2:	2301      	movne	r3, #1
 80038c4:	0692      	lsls	r2, r2, #26
 80038c6:	d42b      	bmi.n	8003920 <_printf_common+0xb0>
 80038c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80038cc:	4649      	mov	r1, r9
 80038ce:	4638      	mov	r0, r7
 80038d0:	47c0      	blx	r8
 80038d2:	3001      	adds	r0, #1
 80038d4:	d01e      	beq.n	8003914 <_printf_common+0xa4>
 80038d6:	6823      	ldr	r3, [r4, #0]
 80038d8:	6922      	ldr	r2, [r4, #16]
 80038da:	f003 0306 	and.w	r3, r3, #6
 80038de:	2b04      	cmp	r3, #4
 80038e0:	bf02      	ittt	eq
 80038e2:	68e5      	ldreq	r5, [r4, #12]
 80038e4:	6833      	ldreq	r3, [r6, #0]
 80038e6:	1aed      	subeq	r5, r5, r3
 80038e8:	68a3      	ldr	r3, [r4, #8]
 80038ea:	bf0c      	ite	eq
 80038ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80038f0:	2500      	movne	r5, #0
 80038f2:	4293      	cmp	r3, r2
 80038f4:	bfc4      	itt	gt
 80038f6:	1a9b      	subgt	r3, r3, r2
 80038f8:	18ed      	addgt	r5, r5, r3
 80038fa:	2600      	movs	r6, #0
 80038fc:	341a      	adds	r4, #26
 80038fe:	42b5      	cmp	r5, r6
 8003900:	d11a      	bne.n	8003938 <_printf_common+0xc8>
 8003902:	2000      	movs	r0, #0
 8003904:	e008      	b.n	8003918 <_printf_common+0xa8>
 8003906:	2301      	movs	r3, #1
 8003908:	4652      	mov	r2, sl
 800390a:	4649      	mov	r1, r9
 800390c:	4638      	mov	r0, r7
 800390e:	47c0      	blx	r8
 8003910:	3001      	adds	r0, #1
 8003912:	d103      	bne.n	800391c <_printf_common+0xac>
 8003914:	f04f 30ff 	mov.w	r0, #4294967295
 8003918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800391c:	3501      	adds	r5, #1
 800391e:	e7c6      	b.n	80038ae <_printf_common+0x3e>
 8003920:	18e1      	adds	r1, r4, r3
 8003922:	1c5a      	adds	r2, r3, #1
 8003924:	2030      	movs	r0, #48	; 0x30
 8003926:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800392a:	4422      	add	r2, r4
 800392c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003930:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003934:	3302      	adds	r3, #2
 8003936:	e7c7      	b.n	80038c8 <_printf_common+0x58>
 8003938:	2301      	movs	r3, #1
 800393a:	4622      	mov	r2, r4
 800393c:	4649      	mov	r1, r9
 800393e:	4638      	mov	r0, r7
 8003940:	47c0      	blx	r8
 8003942:	3001      	adds	r0, #1
 8003944:	d0e6      	beq.n	8003914 <_printf_common+0xa4>
 8003946:	3601      	adds	r6, #1
 8003948:	e7d9      	b.n	80038fe <_printf_common+0x8e>
	...

0800394c <_printf_i>:
 800394c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003950:	7e0f      	ldrb	r7, [r1, #24]
 8003952:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003954:	2f78      	cmp	r7, #120	; 0x78
 8003956:	4691      	mov	r9, r2
 8003958:	4680      	mov	r8, r0
 800395a:	460c      	mov	r4, r1
 800395c:	469a      	mov	sl, r3
 800395e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003962:	d807      	bhi.n	8003974 <_printf_i+0x28>
 8003964:	2f62      	cmp	r7, #98	; 0x62
 8003966:	d80a      	bhi.n	800397e <_printf_i+0x32>
 8003968:	2f00      	cmp	r7, #0
 800396a:	f000 80d4 	beq.w	8003b16 <_printf_i+0x1ca>
 800396e:	2f58      	cmp	r7, #88	; 0x58
 8003970:	f000 80c0 	beq.w	8003af4 <_printf_i+0x1a8>
 8003974:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003978:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800397c:	e03a      	b.n	80039f4 <_printf_i+0xa8>
 800397e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003982:	2b15      	cmp	r3, #21
 8003984:	d8f6      	bhi.n	8003974 <_printf_i+0x28>
 8003986:	a101      	add	r1, pc, #4	; (adr r1, 800398c <_printf_i+0x40>)
 8003988:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800398c:	080039e5 	.word	0x080039e5
 8003990:	080039f9 	.word	0x080039f9
 8003994:	08003975 	.word	0x08003975
 8003998:	08003975 	.word	0x08003975
 800399c:	08003975 	.word	0x08003975
 80039a0:	08003975 	.word	0x08003975
 80039a4:	080039f9 	.word	0x080039f9
 80039a8:	08003975 	.word	0x08003975
 80039ac:	08003975 	.word	0x08003975
 80039b0:	08003975 	.word	0x08003975
 80039b4:	08003975 	.word	0x08003975
 80039b8:	08003afd 	.word	0x08003afd
 80039bc:	08003a25 	.word	0x08003a25
 80039c0:	08003ab7 	.word	0x08003ab7
 80039c4:	08003975 	.word	0x08003975
 80039c8:	08003975 	.word	0x08003975
 80039cc:	08003b1f 	.word	0x08003b1f
 80039d0:	08003975 	.word	0x08003975
 80039d4:	08003a25 	.word	0x08003a25
 80039d8:	08003975 	.word	0x08003975
 80039dc:	08003975 	.word	0x08003975
 80039e0:	08003abf 	.word	0x08003abf
 80039e4:	682b      	ldr	r3, [r5, #0]
 80039e6:	1d1a      	adds	r2, r3, #4
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	602a      	str	r2, [r5, #0]
 80039ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80039f4:	2301      	movs	r3, #1
 80039f6:	e09f      	b.n	8003b38 <_printf_i+0x1ec>
 80039f8:	6820      	ldr	r0, [r4, #0]
 80039fa:	682b      	ldr	r3, [r5, #0]
 80039fc:	0607      	lsls	r7, r0, #24
 80039fe:	f103 0104 	add.w	r1, r3, #4
 8003a02:	6029      	str	r1, [r5, #0]
 8003a04:	d501      	bpl.n	8003a0a <_printf_i+0xbe>
 8003a06:	681e      	ldr	r6, [r3, #0]
 8003a08:	e003      	b.n	8003a12 <_printf_i+0xc6>
 8003a0a:	0646      	lsls	r6, r0, #25
 8003a0c:	d5fb      	bpl.n	8003a06 <_printf_i+0xba>
 8003a0e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003a12:	2e00      	cmp	r6, #0
 8003a14:	da03      	bge.n	8003a1e <_printf_i+0xd2>
 8003a16:	232d      	movs	r3, #45	; 0x2d
 8003a18:	4276      	negs	r6, r6
 8003a1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a1e:	485a      	ldr	r0, [pc, #360]	; (8003b88 <_printf_i+0x23c>)
 8003a20:	230a      	movs	r3, #10
 8003a22:	e012      	b.n	8003a4a <_printf_i+0xfe>
 8003a24:	682b      	ldr	r3, [r5, #0]
 8003a26:	6820      	ldr	r0, [r4, #0]
 8003a28:	1d19      	adds	r1, r3, #4
 8003a2a:	6029      	str	r1, [r5, #0]
 8003a2c:	0605      	lsls	r5, r0, #24
 8003a2e:	d501      	bpl.n	8003a34 <_printf_i+0xe8>
 8003a30:	681e      	ldr	r6, [r3, #0]
 8003a32:	e002      	b.n	8003a3a <_printf_i+0xee>
 8003a34:	0641      	lsls	r1, r0, #25
 8003a36:	d5fb      	bpl.n	8003a30 <_printf_i+0xe4>
 8003a38:	881e      	ldrh	r6, [r3, #0]
 8003a3a:	4853      	ldr	r0, [pc, #332]	; (8003b88 <_printf_i+0x23c>)
 8003a3c:	2f6f      	cmp	r7, #111	; 0x6f
 8003a3e:	bf0c      	ite	eq
 8003a40:	2308      	moveq	r3, #8
 8003a42:	230a      	movne	r3, #10
 8003a44:	2100      	movs	r1, #0
 8003a46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003a4a:	6865      	ldr	r5, [r4, #4]
 8003a4c:	60a5      	str	r5, [r4, #8]
 8003a4e:	2d00      	cmp	r5, #0
 8003a50:	bfa2      	ittt	ge
 8003a52:	6821      	ldrge	r1, [r4, #0]
 8003a54:	f021 0104 	bicge.w	r1, r1, #4
 8003a58:	6021      	strge	r1, [r4, #0]
 8003a5a:	b90e      	cbnz	r6, 8003a60 <_printf_i+0x114>
 8003a5c:	2d00      	cmp	r5, #0
 8003a5e:	d04b      	beq.n	8003af8 <_printf_i+0x1ac>
 8003a60:	4615      	mov	r5, r2
 8003a62:	fbb6 f1f3 	udiv	r1, r6, r3
 8003a66:	fb03 6711 	mls	r7, r3, r1, r6
 8003a6a:	5dc7      	ldrb	r7, [r0, r7]
 8003a6c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003a70:	4637      	mov	r7, r6
 8003a72:	42bb      	cmp	r3, r7
 8003a74:	460e      	mov	r6, r1
 8003a76:	d9f4      	bls.n	8003a62 <_printf_i+0x116>
 8003a78:	2b08      	cmp	r3, #8
 8003a7a:	d10b      	bne.n	8003a94 <_printf_i+0x148>
 8003a7c:	6823      	ldr	r3, [r4, #0]
 8003a7e:	07de      	lsls	r6, r3, #31
 8003a80:	d508      	bpl.n	8003a94 <_printf_i+0x148>
 8003a82:	6923      	ldr	r3, [r4, #16]
 8003a84:	6861      	ldr	r1, [r4, #4]
 8003a86:	4299      	cmp	r1, r3
 8003a88:	bfde      	ittt	le
 8003a8a:	2330      	movle	r3, #48	; 0x30
 8003a8c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003a90:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003a94:	1b52      	subs	r2, r2, r5
 8003a96:	6122      	str	r2, [r4, #16]
 8003a98:	f8cd a000 	str.w	sl, [sp]
 8003a9c:	464b      	mov	r3, r9
 8003a9e:	aa03      	add	r2, sp, #12
 8003aa0:	4621      	mov	r1, r4
 8003aa2:	4640      	mov	r0, r8
 8003aa4:	f7ff fee4 	bl	8003870 <_printf_common>
 8003aa8:	3001      	adds	r0, #1
 8003aaa:	d14a      	bne.n	8003b42 <_printf_i+0x1f6>
 8003aac:	f04f 30ff 	mov.w	r0, #4294967295
 8003ab0:	b004      	add	sp, #16
 8003ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ab6:	6823      	ldr	r3, [r4, #0]
 8003ab8:	f043 0320 	orr.w	r3, r3, #32
 8003abc:	6023      	str	r3, [r4, #0]
 8003abe:	4833      	ldr	r0, [pc, #204]	; (8003b8c <_printf_i+0x240>)
 8003ac0:	2778      	movs	r7, #120	; 0x78
 8003ac2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003ac6:	6823      	ldr	r3, [r4, #0]
 8003ac8:	6829      	ldr	r1, [r5, #0]
 8003aca:	061f      	lsls	r7, r3, #24
 8003acc:	f851 6b04 	ldr.w	r6, [r1], #4
 8003ad0:	d402      	bmi.n	8003ad8 <_printf_i+0x18c>
 8003ad2:	065f      	lsls	r7, r3, #25
 8003ad4:	bf48      	it	mi
 8003ad6:	b2b6      	uxthmi	r6, r6
 8003ad8:	07df      	lsls	r7, r3, #31
 8003ada:	bf48      	it	mi
 8003adc:	f043 0320 	orrmi.w	r3, r3, #32
 8003ae0:	6029      	str	r1, [r5, #0]
 8003ae2:	bf48      	it	mi
 8003ae4:	6023      	strmi	r3, [r4, #0]
 8003ae6:	b91e      	cbnz	r6, 8003af0 <_printf_i+0x1a4>
 8003ae8:	6823      	ldr	r3, [r4, #0]
 8003aea:	f023 0320 	bic.w	r3, r3, #32
 8003aee:	6023      	str	r3, [r4, #0]
 8003af0:	2310      	movs	r3, #16
 8003af2:	e7a7      	b.n	8003a44 <_printf_i+0xf8>
 8003af4:	4824      	ldr	r0, [pc, #144]	; (8003b88 <_printf_i+0x23c>)
 8003af6:	e7e4      	b.n	8003ac2 <_printf_i+0x176>
 8003af8:	4615      	mov	r5, r2
 8003afa:	e7bd      	b.n	8003a78 <_printf_i+0x12c>
 8003afc:	682b      	ldr	r3, [r5, #0]
 8003afe:	6826      	ldr	r6, [r4, #0]
 8003b00:	6961      	ldr	r1, [r4, #20]
 8003b02:	1d18      	adds	r0, r3, #4
 8003b04:	6028      	str	r0, [r5, #0]
 8003b06:	0635      	lsls	r5, r6, #24
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	d501      	bpl.n	8003b10 <_printf_i+0x1c4>
 8003b0c:	6019      	str	r1, [r3, #0]
 8003b0e:	e002      	b.n	8003b16 <_printf_i+0x1ca>
 8003b10:	0670      	lsls	r0, r6, #25
 8003b12:	d5fb      	bpl.n	8003b0c <_printf_i+0x1c0>
 8003b14:	8019      	strh	r1, [r3, #0]
 8003b16:	2300      	movs	r3, #0
 8003b18:	6123      	str	r3, [r4, #16]
 8003b1a:	4615      	mov	r5, r2
 8003b1c:	e7bc      	b.n	8003a98 <_printf_i+0x14c>
 8003b1e:	682b      	ldr	r3, [r5, #0]
 8003b20:	1d1a      	adds	r2, r3, #4
 8003b22:	602a      	str	r2, [r5, #0]
 8003b24:	681d      	ldr	r5, [r3, #0]
 8003b26:	6862      	ldr	r2, [r4, #4]
 8003b28:	2100      	movs	r1, #0
 8003b2a:	4628      	mov	r0, r5
 8003b2c:	f7fc fb58 	bl	80001e0 <memchr>
 8003b30:	b108      	cbz	r0, 8003b36 <_printf_i+0x1ea>
 8003b32:	1b40      	subs	r0, r0, r5
 8003b34:	6060      	str	r0, [r4, #4]
 8003b36:	6863      	ldr	r3, [r4, #4]
 8003b38:	6123      	str	r3, [r4, #16]
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b40:	e7aa      	b.n	8003a98 <_printf_i+0x14c>
 8003b42:	6923      	ldr	r3, [r4, #16]
 8003b44:	462a      	mov	r2, r5
 8003b46:	4649      	mov	r1, r9
 8003b48:	4640      	mov	r0, r8
 8003b4a:	47d0      	blx	sl
 8003b4c:	3001      	adds	r0, #1
 8003b4e:	d0ad      	beq.n	8003aac <_printf_i+0x160>
 8003b50:	6823      	ldr	r3, [r4, #0]
 8003b52:	079b      	lsls	r3, r3, #30
 8003b54:	d413      	bmi.n	8003b7e <_printf_i+0x232>
 8003b56:	68e0      	ldr	r0, [r4, #12]
 8003b58:	9b03      	ldr	r3, [sp, #12]
 8003b5a:	4298      	cmp	r0, r3
 8003b5c:	bfb8      	it	lt
 8003b5e:	4618      	movlt	r0, r3
 8003b60:	e7a6      	b.n	8003ab0 <_printf_i+0x164>
 8003b62:	2301      	movs	r3, #1
 8003b64:	4632      	mov	r2, r6
 8003b66:	4649      	mov	r1, r9
 8003b68:	4640      	mov	r0, r8
 8003b6a:	47d0      	blx	sl
 8003b6c:	3001      	adds	r0, #1
 8003b6e:	d09d      	beq.n	8003aac <_printf_i+0x160>
 8003b70:	3501      	adds	r5, #1
 8003b72:	68e3      	ldr	r3, [r4, #12]
 8003b74:	9903      	ldr	r1, [sp, #12]
 8003b76:	1a5b      	subs	r3, r3, r1
 8003b78:	42ab      	cmp	r3, r5
 8003b7a:	dcf2      	bgt.n	8003b62 <_printf_i+0x216>
 8003b7c:	e7eb      	b.n	8003b56 <_printf_i+0x20a>
 8003b7e:	2500      	movs	r5, #0
 8003b80:	f104 0619 	add.w	r6, r4, #25
 8003b84:	e7f5      	b.n	8003b72 <_printf_i+0x226>
 8003b86:	bf00      	nop
 8003b88:	0800405d 	.word	0x0800405d
 8003b8c:	0800406e 	.word	0x0800406e

08003b90 <__sflush_r>:
 8003b90:	898a      	ldrh	r2, [r1, #12]
 8003b92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b96:	4605      	mov	r5, r0
 8003b98:	0710      	lsls	r0, r2, #28
 8003b9a:	460c      	mov	r4, r1
 8003b9c:	d458      	bmi.n	8003c50 <__sflush_r+0xc0>
 8003b9e:	684b      	ldr	r3, [r1, #4]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	dc05      	bgt.n	8003bb0 <__sflush_r+0x20>
 8003ba4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	dc02      	bgt.n	8003bb0 <__sflush_r+0x20>
 8003baa:	2000      	movs	r0, #0
 8003bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003bb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003bb2:	2e00      	cmp	r6, #0
 8003bb4:	d0f9      	beq.n	8003baa <__sflush_r+0x1a>
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003bbc:	682f      	ldr	r7, [r5, #0]
 8003bbe:	6a21      	ldr	r1, [r4, #32]
 8003bc0:	602b      	str	r3, [r5, #0]
 8003bc2:	d032      	beq.n	8003c2a <__sflush_r+0x9a>
 8003bc4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003bc6:	89a3      	ldrh	r3, [r4, #12]
 8003bc8:	075a      	lsls	r2, r3, #29
 8003bca:	d505      	bpl.n	8003bd8 <__sflush_r+0x48>
 8003bcc:	6863      	ldr	r3, [r4, #4]
 8003bce:	1ac0      	subs	r0, r0, r3
 8003bd0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003bd2:	b10b      	cbz	r3, 8003bd8 <__sflush_r+0x48>
 8003bd4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003bd6:	1ac0      	subs	r0, r0, r3
 8003bd8:	2300      	movs	r3, #0
 8003bda:	4602      	mov	r2, r0
 8003bdc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003bde:	6a21      	ldr	r1, [r4, #32]
 8003be0:	4628      	mov	r0, r5
 8003be2:	47b0      	blx	r6
 8003be4:	1c43      	adds	r3, r0, #1
 8003be6:	89a3      	ldrh	r3, [r4, #12]
 8003be8:	d106      	bne.n	8003bf8 <__sflush_r+0x68>
 8003bea:	6829      	ldr	r1, [r5, #0]
 8003bec:	291d      	cmp	r1, #29
 8003bee:	d82b      	bhi.n	8003c48 <__sflush_r+0xb8>
 8003bf0:	4a29      	ldr	r2, [pc, #164]	; (8003c98 <__sflush_r+0x108>)
 8003bf2:	410a      	asrs	r2, r1
 8003bf4:	07d6      	lsls	r6, r2, #31
 8003bf6:	d427      	bmi.n	8003c48 <__sflush_r+0xb8>
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	6062      	str	r2, [r4, #4]
 8003bfc:	04d9      	lsls	r1, r3, #19
 8003bfe:	6922      	ldr	r2, [r4, #16]
 8003c00:	6022      	str	r2, [r4, #0]
 8003c02:	d504      	bpl.n	8003c0e <__sflush_r+0x7e>
 8003c04:	1c42      	adds	r2, r0, #1
 8003c06:	d101      	bne.n	8003c0c <__sflush_r+0x7c>
 8003c08:	682b      	ldr	r3, [r5, #0]
 8003c0a:	b903      	cbnz	r3, 8003c0e <__sflush_r+0x7e>
 8003c0c:	6560      	str	r0, [r4, #84]	; 0x54
 8003c0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003c10:	602f      	str	r7, [r5, #0]
 8003c12:	2900      	cmp	r1, #0
 8003c14:	d0c9      	beq.n	8003baa <__sflush_r+0x1a>
 8003c16:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003c1a:	4299      	cmp	r1, r3
 8003c1c:	d002      	beq.n	8003c24 <__sflush_r+0x94>
 8003c1e:	4628      	mov	r0, r5
 8003c20:	f7ff fbea 	bl	80033f8 <_free_r>
 8003c24:	2000      	movs	r0, #0
 8003c26:	6360      	str	r0, [r4, #52]	; 0x34
 8003c28:	e7c0      	b.n	8003bac <__sflush_r+0x1c>
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	4628      	mov	r0, r5
 8003c2e:	47b0      	blx	r6
 8003c30:	1c41      	adds	r1, r0, #1
 8003c32:	d1c8      	bne.n	8003bc6 <__sflush_r+0x36>
 8003c34:	682b      	ldr	r3, [r5, #0]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d0c5      	beq.n	8003bc6 <__sflush_r+0x36>
 8003c3a:	2b1d      	cmp	r3, #29
 8003c3c:	d001      	beq.n	8003c42 <__sflush_r+0xb2>
 8003c3e:	2b16      	cmp	r3, #22
 8003c40:	d101      	bne.n	8003c46 <__sflush_r+0xb6>
 8003c42:	602f      	str	r7, [r5, #0]
 8003c44:	e7b1      	b.n	8003baa <__sflush_r+0x1a>
 8003c46:	89a3      	ldrh	r3, [r4, #12]
 8003c48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c4c:	81a3      	strh	r3, [r4, #12]
 8003c4e:	e7ad      	b.n	8003bac <__sflush_r+0x1c>
 8003c50:	690f      	ldr	r7, [r1, #16]
 8003c52:	2f00      	cmp	r7, #0
 8003c54:	d0a9      	beq.n	8003baa <__sflush_r+0x1a>
 8003c56:	0793      	lsls	r3, r2, #30
 8003c58:	680e      	ldr	r6, [r1, #0]
 8003c5a:	bf08      	it	eq
 8003c5c:	694b      	ldreq	r3, [r1, #20]
 8003c5e:	600f      	str	r7, [r1, #0]
 8003c60:	bf18      	it	ne
 8003c62:	2300      	movne	r3, #0
 8003c64:	eba6 0807 	sub.w	r8, r6, r7
 8003c68:	608b      	str	r3, [r1, #8]
 8003c6a:	f1b8 0f00 	cmp.w	r8, #0
 8003c6e:	dd9c      	ble.n	8003baa <__sflush_r+0x1a>
 8003c70:	6a21      	ldr	r1, [r4, #32]
 8003c72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003c74:	4643      	mov	r3, r8
 8003c76:	463a      	mov	r2, r7
 8003c78:	4628      	mov	r0, r5
 8003c7a:	47b0      	blx	r6
 8003c7c:	2800      	cmp	r0, #0
 8003c7e:	dc06      	bgt.n	8003c8e <__sflush_r+0xfe>
 8003c80:	89a3      	ldrh	r3, [r4, #12]
 8003c82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c86:	81a3      	strh	r3, [r4, #12]
 8003c88:	f04f 30ff 	mov.w	r0, #4294967295
 8003c8c:	e78e      	b.n	8003bac <__sflush_r+0x1c>
 8003c8e:	4407      	add	r7, r0
 8003c90:	eba8 0800 	sub.w	r8, r8, r0
 8003c94:	e7e9      	b.n	8003c6a <__sflush_r+0xda>
 8003c96:	bf00      	nop
 8003c98:	dfbffffe 	.word	0xdfbffffe

08003c9c <_fflush_r>:
 8003c9c:	b538      	push	{r3, r4, r5, lr}
 8003c9e:	690b      	ldr	r3, [r1, #16]
 8003ca0:	4605      	mov	r5, r0
 8003ca2:	460c      	mov	r4, r1
 8003ca4:	b913      	cbnz	r3, 8003cac <_fflush_r+0x10>
 8003ca6:	2500      	movs	r5, #0
 8003ca8:	4628      	mov	r0, r5
 8003caa:	bd38      	pop	{r3, r4, r5, pc}
 8003cac:	b118      	cbz	r0, 8003cb6 <_fflush_r+0x1a>
 8003cae:	6a03      	ldr	r3, [r0, #32]
 8003cb0:	b90b      	cbnz	r3, 8003cb6 <_fflush_r+0x1a>
 8003cb2:	f7ff f9ab 	bl	800300c <__sinit>
 8003cb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d0f3      	beq.n	8003ca6 <_fflush_r+0xa>
 8003cbe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003cc0:	07d0      	lsls	r0, r2, #31
 8003cc2:	d404      	bmi.n	8003cce <_fflush_r+0x32>
 8003cc4:	0599      	lsls	r1, r3, #22
 8003cc6:	d402      	bmi.n	8003cce <_fflush_r+0x32>
 8003cc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003cca:	f7ff fb93 	bl	80033f4 <__retarget_lock_acquire_recursive>
 8003cce:	4628      	mov	r0, r5
 8003cd0:	4621      	mov	r1, r4
 8003cd2:	f7ff ff5d 	bl	8003b90 <__sflush_r>
 8003cd6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003cd8:	07da      	lsls	r2, r3, #31
 8003cda:	4605      	mov	r5, r0
 8003cdc:	d4e4      	bmi.n	8003ca8 <_fflush_r+0xc>
 8003cde:	89a3      	ldrh	r3, [r4, #12]
 8003ce0:	059b      	lsls	r3, r3, #22
 8003ce2:	d4e1      	bmi.n	8003ca8 <_fflush_r+0xc>
 8003ce4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ce6:	f7ff fb86 	bl	80033f6 <__retarget_lock_release_recursive>
 8003cea:	e7dd      	b.n	8003ca8 <_fflush_r+0xc>

08003cec <__swhatbuf_r>:
 8003cec:	b570      	push	{r4, r5, r6, lr}
 8003cee:	460c      	mov	r4, r1
 8003cf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cf4:	2900      	cmp	r1, #0
 8003cf6:	b096      	sub	sp, #88	; 0x58
 8003cf8:	4615      	mov	r5, r2
 8003cfa:	461e      	mov	r6, r3
 8003cfc:	da0d      	bge.n	8003d1a <__swhatbuf_r+0x2e>
 8003cfe:	89a3      	ldrh	r3, [r4, #12]
 8003d00:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003d04:	f04f 0100 	mov.w	r1, #0
 8003d08:	bf0c      	ite	eq
 8003d0a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003d0e:	2340      	movne	r3, #64	; 0x40
 8003d10:	2000      	movs	r0, #0
 8003d12:	6031      	str	r1, [r6, #0]
 8003d14:	602b      	str	r3, [r5, #0]
 8003d16:	b016      	add	sp, #88	; 0x58
 8003d18:	bd70      	pop	{r4, r5, r6, pc}
 8003d1a:	466a      	mov	r2, sp
 8003d1c:	f000 f848 	bl	8003db0 <_fstat_r>
 8003d20:	2800      	cmp	r0, #0
 8003d22:	dbec      	blt.n	8003cfe <__swhatbuf_r+0x12>
 8003d24:	9901      	ldr	r1, [sp, #4]
 8003d26:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003d2a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003d2e:	4259      	negs	r1, r3
 8003d30:	4159      	adcs	r1, r3
 8003d32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d36:	e7eb      	b.n	8003d10 <__swhatbuf_r+0x24>

08003d38 <__smakebuf_r>:
 8003d38:	898b      	ldrh	r3, [r1, #12]
 8003d3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003d3c:	079d      	lsls	r5, r3, #30
 8003d3e:	4606      	mov	r6, r0
 8003d40:	460c      	mov	r4, r1
 8003d42:	d507      	bpl.n	8003d54 <__smakebuf_r+0x1c>
 8003d44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003d48:	6023      	str	r3, [r4, #0]
 8003d4a:	6123      	str	r3, [r4, #16]
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	6163      	str	r3, [r4, #20]
 8003d50:	b002      	add	sp, #8
 8003d52:	bd70      	pop	{r4, r5, r6, pc}
 8003d54:	ab01      	add	r3, sp, #4
 8003d56:	466a      	mov	r2, sp
 8003d58:	f7ff ffc8 	bl	8003cec <__swhatbuf_r>
 8003d5c:	9900      	ldr	r1, [sp, #0]
 8003d5e:	4605      	mov	r5, r0
 8003d60:	4630      	mov	r0, r6
 8003d62:	f7ff fbb5 	bl	80034d0 <_malloc_r>
 8003d66:	b948      	cbnz	r0, 8003d7c <__smakebuf_r+0x44>
 8003d68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d6c:	059a      	lsls	r2, r3, #22
 8003d6e:	d4ef      	bmi.n	8003d50 <__smakebuf_r+0x18>
 8003d70:	f023 0303 	bic.w	r3, r3, #3
 8003d74:	f043 0302 	orr.w	r3, r3, #2
 8003d78:	81a3      	strh	r3, [r4, #12]
 8003d7a:	e7e3      	b.n	8003d44 <__smakebuf_r+0xc>
 8003d7c:	89a3      	ldrh	r3, [r4, #12]
 8003d7e:	6020      	str	r0, [r4, #0]
 8003d80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d84:	81a3      	strh	r3, [r4, #12]
 8003d86:	9b00      	ldr	r3, [sp, #0]
 8003d88:	6163      	str	r3, [r4, #20]
 8003d8a:	9b01      	ldr	r3, [sp, #4]
 8003d8c:	6120      	str	r0, [r4, #16]
 8003d8e:	b15b      	cbz	r3, 8003da8 <__smakebuf_r+0x70>
 8003d90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d94:	4630      	mov	r0, r6
 8003d96:	f000 f81d 	bl	8003dd4 <_isatty_r>
 8003d9a:	b128      	cbz	r0, 8003da8 <__smakebuf_r+0x70>
 8003d9c:	89a3      	ldrh	r3, [r4, #12]
 8003d9e:	f023 0303 	bic.w	r3, r3, #3
 8003da2:	f043 0301 	orr.w	r3, r3, #1
 8003da6:	81a3      	strh	r3, [r4, #12]
 8003da8:	89a3      	ldrh	r3, [r4, #12]
 8003daa:	431d      	orrs	r5, r3
 8003dac:	81a5      	strh	r5, [r4, #12]
 8003dae:	e7cf      	b.n	8003d50 <__smakebuf_r+0x18>

08003db0 <_fstat_r>:
 8003db0:	b538      	push	{r3, r4, r5, lr}
 8003db2:	4d07      	ldr	r5, [pc, #28]	; (8003dd0 <_fstat_r+0x20>)
 8003db4:	2300      	movs	r3, #0
 8003db6:	4604      	mov	r4, r0
 8003db8:	4608      	mov	r0, r1
 8003dba:	4611      	mov	r1, r2
 8003dbc:	602b      	str	r3, [r5, #0]
 8003dbe:	f7fd f920 	bl	8001002 <_fstat>
 8003dc2:	1c43      	adds	r3, r0, #1
 8003dc4:	d102      	bne.n	8003dcc <_fstat_r+0x1c>
 8003dc6:	682b      	ldr	r3, [r5, #0]
 8003dc8:	b103      	cbz	r3, 8003dcc <_fstat_r+0x1c>
 8003dca:	6023      	str	r3, [r4, #0]
 8003dcc:	bd38      	pop	{r3, r4, r5, pc}
 8003dce:	bf00      	nop
 8003dd0:	20000688 	.word	0x20000688

08003dd4 <_isatty_r>:
 8003dd4:	b538      	push	{r3, r4, r5, lr}
 8003dd6:	4d06      	ldr	r5, [pc, #24]	; (8003df0 <_isatty_r+0x1c>)
 8003dd8:	2300      	movs	r3, #0
 8003dda:	4604      	mov	r4, r0
 8003ddc:	4608      	mov	r0, r1
 8003dde:	602b      	str	r3, [r5, #0]
 8003de0:	f7fd f91f 	bl	8001022 <_isatty>
 8003de4:	1c43      	adds	r3, r0, #1
 8003de6:	d102      	bne.n	8003dee <_isatty_r+0x1a>
 8003de8:	682b      	ldr	r3, [r5, #0]
 8003dea:	b103      	cbz	r3, 8003dee <_isatty_r+0x1a>
 8003dec:	6023      	str	r3, [r4, #0]
 8003dee:	bd38      	pop	{r3, r4, r5, pc}
 8003df0:	20000688 	.word	0x20000688

08003df4 <_sbrk_r>:
 8003df4:	b538      	push	{r3, r4, r5, lr}
 8003df6:	4d06      	ldr	r5, [pc, #24]	; (8003e10 <_sbrk_r+0x1c>)
 8003df8:	2300      	movs	r3, #0
 8003dfa:	4604      	mov	r4, r0
 8003dfc:	4608      	mov	r0, r1
 8003dfe:	602b      	str	r3, [r5, #0]
 8003e00:	f7fd f928 	bl	8001054 <_sbrk>
 8003e04:	1c43      	adds	r3, r0, #1
 8003e06:	d102      	bne.n	8003e0e <_sbrk_r+0x1a>
 8003e08:	682b      	ldr	r3, [r5, #0]
 8003e0a:	b103      	cbz	r3, 8003e0e <_sbrk_r+0x1a>
 8003e0c:	6023      	str	r3, [r4, #0]
 8003e0e:	bd38      	pop	{r3, r4, r5, pc}
 8003e10:	20000688 	.word	0x20000688

08003e14 <_init>:
 8003e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e16:	bf00      	nop
 8003e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e1a:	bc08      	pop	{r3}
 8003e1c:	469e      	mov	lr, r3
 8003e1e:	4770      	bx	lr

08003e20 <_fini>:
 8003e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e22:	bf00      	nop
 8003e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e26:	bc08      	pop	{r3}
 8003e28:	469e      	mov	lr, r3
 8003e2a:	4770      	bx	lr
