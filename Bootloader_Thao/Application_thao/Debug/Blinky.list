
Blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08040000  08040000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002df0  080401a0  080401a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08042f90  08042f90  00012f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08042ffc  08042ffc  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08042ffc  08042ffc  00012ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08043004  08043004  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08043004  08043004  00013004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08043008  08043008  00013008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0804300c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  20000068  08043074  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000021c  08043074  0002021c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   000078e6  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001562  00000000  00000000  000279c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006d8  00000000  00000000  00028f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000052e  00000000  00000000  00029600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001621f  00000000  00000000  00029b2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000088c8  00000000  00000000  0003fd4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008705c  00000000  00000000  00048615  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000222c  00000000  00000000  000cf674  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000d18a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080401a0 <__do_global_dtors_aux>:
 80401a0:	b510      	push	{r4, lr}
 80401a2:	4c05      	ldr	r4, [pc, #20]	; (80401b8 <__do_global_dtors_aux+0x18>)
 80401a4:	7823      	ldrb	r3, [r4, #0]
 80401a6:	b933      	cbnz	r3, 80401b6 <__do_global_dtors_aux+0x16>
 80401a8:	4b04      	ldr	r3, [pc, #16]	; (80401bc <__do_global_dtors_aux+0x1c>)
 80401aa:	b113      	cbz	r3, 80401b2 <__do_global_dtors_aux+0x12>
 80401ac:	4804      	ldr	r0, [pc, #16]	; (80401c0 <__do_global_dtors_aux+0x20>)
 80401ae:	f3af 8000 	nop.w
 80401b2:	2301      	movs	r3, #1
 80401b4:	7023      	strb	r3, [r4, #0]
 80401b6:	bd10      	pop	{r4, pc}
 80401b8:	20000068 	.word	0x20000068
 80401bc:	00000000 	.word	0x00000000
 80401c0:	08042f78 	.word	0x08042f78

080401c4 <frame_dummy>:
 80401c4:	b508      	push	{r3, lr}
 80401c6:	4b03      	ldr	r3, [pc, #12]	; (80401d4 <frame_dummy+0x10>)
 80401c8:	b11b      	cbz	r3, 80401d2 <frame_dummy+0xe>
 80401ca:	4903      	ldr	r1, [pc, #12]	; (80401d8 <frame_dummy+0x14>)
 80401cc:	4803      	ldr	r0, [pc, #12]	; (80401dc <frame_dummy+0x18>)
 80401ce:	f3af 8000 	nop.w
 80401d2:	bd08      	pop	{r3, pc}
 80401d4:	00000000 	.word	0x00000000
 80401d8:	2000006c 	.word	0x2000006c
 80401dc:	08042f78 	.word	0x08042f78

080401e0 <memchr>:
 80401e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80401e4:	2a10      	cmp	r2, #16
 80401e6:	db2b      	blt.n	8040240 <memchr+0x60>
 80401e8:	f010 0f07 	tst.w	r0, #7
 80401ec:	d008      	beq.n	8040200 <memchr+0x20>
 80401ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80401f2:	3a01      	subs	r2, #1
 80401f4:	428b      	cmp	r3, r1
 80401f6:	d02d      	beq.n	8040254 <memchr+0x74>
 80401f8:	f010 0f07 	tst.w	r0, #7
 80401fc:	b342      	cbz	r2, 8040250 <memchr+0x70>
 80401fe:	d1f6      	bne.n	80401ee <memchr+0xe>
 8040200:	b4f0      	push	{r4, r5, r6, r7}
 8040202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8040206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 804020a:	f022 0407 	bic.w	r4, r2, #7
 804020e:	f07f 0700 	mvns.w	r7, #0
 8040212:	2300      	movs	r3, #0
 8040214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8040218:	3c08      	subs	r4, #8
 804021a:	ea85 0501 	eor.w	r5, r5, r1
 804021e:	ea86 0601 	eor.w	r6, r6, r1
 8040222:	fa85 f547 	uadd8	r5, r5, r7
 8040226:	faa3 f587 	sel	r5, r3, r7
 804022a:	fa86 f647 	uadd8	r6, r6, r7
 804022e:	faa5 f687 	sel	r6, r5, r7
 8040232:	b98e      	cbnz	r6, 8040258 <memchr+0x78>
 8040234:	d1ee      	bne.n	8040214 <memchr+0x34>
 8040236:	bcf0      	pop	{r4, r5, r6, r7}
 8040238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 804023c:	f002 0207 	and.w	r2, r2, #7
 8040240:	b132      	cbz	r2, 8040250 <memchr+0x70>
 8040242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8040246:	3a01      	subs	r2, #1
 8040248:	ea83 0301 	eor.w	r3, r3, r1
 804024c:	b113      	cbz	r3, 8040254 <memchr+0x74>
 804024e:	d1f8      	bne.n	8040242 <memchr+0x62>
 8040250:	2000      	movs	r0, #0
 8040252:	4770      	bx	lr
 8040254:	3801      	subs	r0, #1
 8040256:	4770      	bx	lr
 8040258:	2d00      	cmp	r5, #0
 804025a:	bf06      	itte	eq
 804025c:	4635      	moveq	r5, r6
 804025e:	3803      	subeq	r0, #3
 8040260:	3807      	subne	r0, #7
 8040262:	f015 0f01 	tst.w	r5, #1
 8040266:	d107      	bne.n	8040278 <memchr+0x98>
 8040268:	3001      	adds	r0, #1
 804026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 804026e:	bf02      	ittt	eq
 8040270:	3001      	addeq	r0, #1
 8040272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8040276:	3001      	addeq	r0, #1
 8040278:	bcf0      	pop	{r4, r5, r6, r7}
 804027a:	3801      	subs	r0, #1
 804027c:	4770      	bx	lr
 804027e:	bf00      	nop

08040280 <__aeabi_uldivmod>:
 8040280:	b953      	cbnz	r3, 8040298 <__aeabi_uldivmod+0x18>
 8040282:	b94a      	cbnz	r2, 8040298 <__aeabi_uldivmod+0x18>
 8040284:	2900      	cmp	r1, #0
 8040286:	bf08      	it	eq
 8040288:	2800      	cmpeq	r0, #0
 804028a:	bf1c      	itt	ne
 804028c:	f04f 31ff 	movne.w	r1, #4294967295
 8040290:	f04f 30ff 	movne.w	r0, #4294967295
 8040294:	f000 b970 	b.w	8040578 <__aeabi_idiv0>
 8040298:	f1ad 0c08 	sub.w	ip, sp, #8
 804029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80402a0:	f000 f806 	bl	80402b0 <__udivmoddi4>
 80402a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80402a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80402ac:	b004      	add	sp, #16
 80402ae:	4770      	bx	lr

080402b0 <__udivmoddi4>:
 80402b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80402b4:	9e08      	ldr	r6, [sp, #32]
 80402b6:	460d      	mov	r5, r1
 80402b8:	4604      	mov	r4, r0
 80402ba:	460f      	mov	r7, r1
 80402bc:	2b00      	cmp	r3, #0
 80402be:	d14a      	bne.n	8040356 <__udivmoddi4+0xa6>
 80402c0:	428a      	cmp	r2, r1
 80402c2:	4694      	mov	ip, r2
 80402c4:	d965      	bls.n	8040392 <__udivmoddi4+0xe2>
 80402c6:	fab2 f382 	clz	r3, r2
 80402ca:	b143      	cbz	r3, 80402de <__udivmoddi4+0x2e>
 80402cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80402d0:	f1c3 0220 	rsb	r2, r3, #32
 80402d4:	409f      	lsls	r7, r3
 80402d6:	fa20 f202 	lsr.w	r2, r0, r2
 80402da:	4317      	orrs	r7, r2
 80402dc:	409c      	lsls	r4, r3
 80402de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80402e2:	fa1f f58c 	uxth.w	r5, ip
 80402e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80402ea:	0c22      	lsrs	r2, r4, #16
 80402ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80402f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80402f4:	fb01 f005 	mul.w	r0, r1, r5
 80402f8:	4290      	cmp	r0, r2
 80402fa:	d90a      	bls.n	8040312 <__udivmoddi4+0x62>
 80402fc:	eb1c 0202 	adds.w	r2, ip, r2
 8040300:	f101 37ff 	add.w	r7, r1, #4294967295
 8040304:	f080 811c 	bcs.w	8040540 <__udivmoddi4+0x290>
 8040308:	4290      	cmp	r0, r2
 804030a:	f240 8119 	bls.w	8040540 <__udivmoddi4+0x290>
 804030e:	3902      	subs	r1, #2
 8040310:	4462      	add	r2, ip
 8040312:	1a12      	subs	r2, r2, r0
 8040314:	b2a4      	uxth	r4, r4
 8040316:	fbb2 f0fe 	udiv	r0, r2, lr
 804031a:	fb0e 2210 	mls	r2, lr, r0, r2
 804031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8040322:	fb00 f505 	mul.w	r5, r0, r5
 8040326:	42a5      	cmp	r5, r4
 8040328:	d90a      	bls.n	8040340 <__udivmoddi4+0x90>
 804032a:	eb1c 0404 	adds.w	r4, ip, r4
 804032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8040332:	f080 8107 	bcs.w	8040544 <__udivmoddi4+0x294>
 8040336:	42a5      	cmp	r5, r4
 8040338:	f240 8104 	bls.w	8040544 <__udivmoddi4+0x294>
 804033c:	4464      	add	r4, ip
 804033e:	3802      	subs	r0, #2
 8040340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8040344:	1b64      	subs	r4, r4, r5
 8040346:	2100      	movs	r1, #0
 8040348:	b11e      	cbz	r6, 8040352 <__udivmoddi4+0xa2>
 804034a:	40dc      	lsrs	r4, r3
 804034c:	2300      	movs	r3, #0
 804034e:	e9c6 4300 	strd	r4, r3, [r6]
 8040352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8040356:	428b      	cmp	r3, r1
 8040358:	d908      	bls.n	804036c <__udivmoddi4+0xbc>
 804035a:	2e00      	cmp	r6, #0
 804035c:	f000 80ed 	beq.w	804053a <__udivmoddi4+0x28a>
 8040360:	2100      	movs	r1, #0
 8040362:	e9c6 0500 	strd	r0, r5, [r6]
 8040366:	4608      	mov	r0, r1
 8040368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804036c:	fab3 f183 	clz	r1, r3
 8040370:	2900      	cmp	r1, #0
 8040372:	d149      	bne.n	8040408 <__udivmoddi4+0x158>
 8040374:	42ab      	cmp	r3, r5
 8040376:	d302      	bcc.n	804037e <__udivmoddi4+0xce>
 8040378:	4282      	cmp	r2, r0
 804037a:	f200 80f8 	bhi.w	804056e <__udivmoddi4+0x2be>
 804037e:	1a84      	subs	r4, r0, r2
 8040380:	eb65 0203 	sbc.w	r2, r5, r3
 8040384:	2001      	movs	r0, #1
 8040386:	4617      	mov	r7, r2
 8040388:	2e00      	cmp	r6, #0
 804038a:	d0e2      	beq.n	8040352 <__udivmoddi4+0xa2>
 804038c:	e9c6 4700 	strd	r4, r7, [r6]
 8040390:	e7df      	b.n	8040352 <__udivmoddi4+0xa2>
 8040392:	b902      	cbnz	r2, 8040396 <__udivmoddi4+0xe6>
 8040394:	deff      	udf	#255	; 0xff
 8040396:	fab2 f382 	clz	r3, r2
 804039a:	2b00      	cmp	r3, #0
 804039c:	f040 8090 	bne.w	80404c0 <__udivmoddi4+0x210>
 80403a0:	1a8a      	subs	r2, r1, r2
 80403a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80403a6:	fa1f fe8c 	uxth.w	lr, ip
 80403aa:	2101      	movs	r1, #1
 80403ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80403b0:	fb07 2015 	mls	r0, r7, r5, r2
 80403b4:	0c22      	lsrs	r2, r4, #16
 80403b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80403ba:	fb0e f005 	mul.w	r0, lr, r5
 80403be:	4290      	cmp	r0, r2
 80403c0:	d908      	bls.n	80403d4 <__udivmoddi4+0x124>
 80403c2:	eb1c 0202 	adds.w	r2, ip, r2
 80403c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80403ca:	d202      	bcs.n	80403d2 <__udivmoddi4+0x122>
 80403cc:	4290      	cmp	r0, r2
 80403ce:	f200 80cb 	bhi.w	8040568 <__udivmoddi4+0x2b8>
 80403d2:	4645      	mov	r5, r8
 80403d4:	1a12      	subs	r2, r2, r0
 80403d6:	b2a4      	uxth	r4, r4
 80403d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80403dc:	fb07 2210 	mls	r2, r7, r0, r2
 80403e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80403e4:	fb0e fe00 	mul.w	lr, lr, r0
 80403e8:	45a6      	cmp	lr, r4
 80403ea:	d908      	bls.n	80403fe <__udivmoddi4+0x14e>
 80403ec:	eb1c 0404 	adds.w	r4, ip, r4
 80403f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80403f4:	d202      	bcs.n	80403fc <__udivmoddi4+0x14c>
 80403f6:	45a6      	cmp	lr, r4
 80403f8:	f200 80bb 	bhi.w	8040572 <__udivmoddi4+0x2c2>
 80403fc:	4610      	mov	r0, r2
 80403fe:	eba4 040e 	sub.w	r4, r4, lr
 8040402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8040406:	e79f      	b.n	8040348 <__udivmoddi4+0x98>
 8040408:	f1c1 0720 	rsb	r7, r1, #32
 804040c:	408b      	lsls	r3, r1
 804040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8040412:	ea4c 0c03 	orr.w	ip, ip, r3
 8040416:	fa05 f401 	lsl.w	r4, r5, r1
 804041a:	fa20 f307 	lsr.w	r3, r0, r7
 804041e:	40fd      	lsrs	r5, r7
 8040420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8040424:	4323      	orrs	r3, r4
 8040426:	fbb5 f8f9 	udiv	r8, r5, r9
 804042a:	fa1f fe8c 	uxth.w	lr, ip
 804042e:	fb09 5518 	mls	r5, r9, r8, r5
 8040432:	0c1c      	lsrs	r4, r3, #16
 8040434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8040438:	fb08 f50e 	mul.w	r5, r8, lr
 804043c:	42a5      	cmp	r5, r4
 804043e:	fa02 f201 	lsl.w	r2, r2, r1
 8040442:	fa00 f001 	lsl.w	r0, r0, r1
 8040446:	d90b      	bls.n	8040460 <__udivmoddi4+0x1b0>
 8040448:	eb1c 0404 	adds.w	r4, ip, r4
 804044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8040450:	f080 8088 	bcs.w	8040564 <__udivmoddi4+0x2b4>
 8040454:	42a5      	cmp	r5, r4
 8040456:	f240 8085 	bls.w	8040564 <__udivmoddi4+0x2b4>
 804045a:	f1a8 0802 	sub.w	r8, r8, #2
 804045e:	4464      	add	r4, ip
 8040460:	1b64      	subs	r4, r4, r5
 8040462:	b29d      	uxth	r5, r3
 8040464:	fbb4 f3f9 	udiv	r3, r4, r9
 8040468:	fb09 4413 	mls	r4, r9, r3, r4
 804046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8040470:	fb03 fe0e 	mul.w	lr, r3, lr
 8040474:	45a6      	cmp	lr, r4
 8040476:	d908      	bls.n	804048a <__udivmoddi4+0x1da>
 8040478:	eb1c 0404 	adds.w	r4, ip, r4
 804047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8040480:	d26c      	bcs.n	804055c <__udivmoddi4+0x2ac>
 8040482:	45a6      	cmp	lr, r4
 8040484:	d96a      	bls.n	804055c <__udivmoddi4+0x2ac>
 8040486:	3b02      	subs	r3, #2
 8040488:	4464      	add	r4, ip
 804048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 804048e:	fba3 9502 	umull	r9, r5, r3, r2
 8040492:	eba4 040e 	sub.w	r4, r4, lr
 8040496:	42ac      	cmp	r4, r5
 8040498:	46c8      	mov	r8, r9
 804049a:	46ae      	mov	lr, r5
 804049c:	d356      	bcc.n	804054c <__udivmoddi4+0x29c>
 804049e:	d053      	beq.n	8040548 <__udivmoddi4+0x298>
 80404a0:	b156      	cbz	r6, 80404b8 <__udivmoddi4+0x208>
 80404a2:	ebb0 0208 	subs.w	r2, r0, r8
 80404a6:	eb64 040e 	sbc.w	r4, r4, lr
 80404aa:	fa04 f707 	lsl.w	r7, r4, r7
 80404ae:	40ca      	lsrs	r2, r1
 80404b0:	40cc      	lsrs	r4, r1
 80404b2:	4317      	orrs	r7, r2
 80404b4:	e9c6 7400 	strd	r7, r4, [r6]
 80404b8:	4618      	mov	r0, r3
 80404ba:	2100      	movs	r1, #0
 80404bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80404c0:	f1c3 0120 	rsb	r1, r3, #32
 80404c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80404c8:	fa20 f201 	lsr.w	r2, r0, r1
 80404cc:	fa25 f101 	lsr.w	r1, r5, r1
 80404d0:	409d      	lsls	r5, r3
 80404d2:	432a      	orrs	r2, r5
 80404d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80404d8:	fa1f fe8c 	uxth.w	lr, ip
 80404dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80404e0:	fb07 1510 	mls	r5, r7, r0, r1
 80404e4:	0c11      	lsrs	r1, r2, #16
 80404e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80404ea:	fb00 f50e 	mul.w	r5, r0, lr
 80404ee:	428d      	cmp	r5, r1
 80404f0:	fa04 f403 	lsl.w	r4, r4, r3
 80404f4:	d908      	bls.n	8040508 <__udivmoddi4+0x258>
 80404f6:	eb1c 0101 	adds.w	r1, ip, r1
 80404fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80404fe:	d22f      	bcs.n	8040560 <__udivmoddi4+0x2b0>
 8040500:	428d      	cmp	r5, r1
 8040502:	d92d      	bls.n	8040560 <__udivmoddi4+0x2b0>
 8040504:	3802      	subs	r0, #2
 8040506:	4461      	add	r1, ip
 8040508:	1b49      	subs	r1, r1, r5
 804050a:	b292      	uxth	r2, r2
 804050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8040510:	fb07 1115 	mls	r1, r7, r5, r1
 8040514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8040518:	fb05 f10e 	mul.w	r1, r5, lr
 804051c:	4291      	cmp	r1, r2
 804051e:	d908      	bls.n	8040532 <__udivmoddi4+0x282>
 8040520:	eb1c 0202 	adds.w	r2, ip, r2
 8040524:	f105 38ff 	add.w	r8, r5, #4294967295
 8040528:	d216      	bcs.n	8040558 <__udivmoddi4+0x2a8>
 804052a:	4291      	cmp	r1, r2
 804052c:	d914      	bls.n	8040558 <__udivmoddi4+0x2a8>
 804052e:	3d02      	subs	r5, #2
 8040530:	4462      	add	r2, ip
 8040532:	1a52      	subs	r2, r2, r1
 8040534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8040538:	e738      	b.n	80403ac <__udivmoddi4+0xfc>
 804053a:	4631      	mov	r1, r6
 804053c:	4630      	mov	r0, r6
 804053e:	e708      	b.n	8040352 <__udivmoddi4+0xa2>
 8040540:	4639      	mov	r1, r7
 8040542:	e6e6      	b.n	8040312 <__udivmoddi4+0x62>
 8040544:	4610      	mov	r0, r2
 8040546:	e6fb      	b.n	8040340 <__udivmoddi4+0x90>
 8040548:	4548      	cmp	r0, r9
 804054a:	d2a9      	bcs.n	80404a0 <__udivmoddi4+0x1f0>
 804054c:	ebb9 0802 	subs.w	r8, r9, r2
 8040550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8040554:	3b01      	subs	r3, #1
 8040556:	e7a3      	b.n	80404a0 <__udivmoddi4+0x1f0>
 8040558:	4645      	mov	r5, r8
 804055a:	e7ea      	b.n	8040532 <__udivmoddi4+0x282>
 804055c:	462b      	mov	r3, r5
 804055e:	e794      	b.n	804048a <__udivmoddi4+0x1da>
 8040560:	4640      	mov	r0, r8
 8040562:	e7d1      	b.n	8040508 <__udivmoddi4+0x258>
 8040564:	46d0      	mov	r8, sl
 8040566:	e77b      	b.n	8040460 <__udivmoddi4+0x1b0>
 8040568:	3d02      	subs	r5, #2
 804056a:	4462      	add	r2, ip
 804056c:	e732      	b.n	80403d4 <__udivmoddi4+0x124>
 804056e:	4608      	mov	r0, r1
 8040570:	e70a      	b.n	8040388 <__udivmoddi4+0xd8>
 8040572:	4464      	add	r4, ip
 8040574:	3802      	subs	r0, #2
 8040576:	e742      	b.n	80403fe <__udivmoddi4+0x14e>

08040578 <__aeabi_idiv0>:
 8040578:	4770      	bx	lr
 804057a:	bf00      	nop

0804057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 804057c:	b580      	push	{r7, lr}
 804057e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8040580:	f000 fa88 	bl	8040a94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8040584:	f000 f818 	bl	80405b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8040588:	f000 f89e 	bl	80406c8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 804058c:	f000 f872 	bl	8040674 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Starting Application(%d.%d)\r\n", APP_Version[0], APP_Version[1]);
 8040590:	2300      	movs	r3, #0
 8040592:	2202      	movs	r2, #2
 8040594:	4619      	mov	r1, r3
 8040596:	4806      	ldr	r0, [pc, #24]	; (80405b0 <main+0x34>)
 8040598:	f001 fe7a 	bl	8042290 <iprintf>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 804059c:	2180      	movs	r1, #128	; 0x80
 804059e:	4805      	ldr	r0, [pc, #20]	; (80405b4 <main+0x38>)
 80405a0:	f000 fd91 	bl	80410c6 <HAL_GPIO_TogglePin>
	  HAL_Delay(3000);
 80405a4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80405a8:	f000 fae6 	bl	8040b78 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80405ac:	e7f6      	b.n	804059c <main+0x20>
 80405ae:	bf00      	nop
 80405b0:	08042f90 	.word	0x08042f90
 80405b4:	40020400 	.word	0x40020400

080405b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80405b8:	b580      	push	{r7, lr}
 80405ba:	b094      	sub	sp, #80	; 0x50
 80405bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80405be:	f107 0320 	add.w	r3, r7, #32
 80405c2:	2230      	movs	r2, #48	; 0x30
 80405c4:	2100      	movs	r1, #0
 80405c6:	4618      	mov	r0, r3
 80405c8:	f001 feb7 	bl	804233a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80405cc:	f107 030c 	add.w	r3, r7, #12
 80405d0:	2200      	movs	r2, #0
 80405d2:	601a      	str	r2, [r3, #0]
 80405d4:	605a      	str	r2, [r3, #4]
 80405d6:	609a      	str	r2, [r3, #8]
 80405d8:	60da      	str	r2, [r3, #12]
 80405da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80405dc:	2300      	movs	r3, #0
 80405de:	60bb      	str	r3, [r7, #8]
 80405e0:	4b22      	ldr	r3, [pc, #136]	; (804066c <SystemClock_Config+0xb4>)
 80405e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80405e4:	4a21      	ldr	r2, [pc, #132]	; (804066c <SystemClock_Config+0xb4>)
 80405e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80405ea:	6413      	str	r3, [r2, #64]	; 0x40
 80405ec:	4b1f      	ldr	r3, [pc, #124]	; (804066c <SystemClock_Config+0xb4>)
 80405ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80405f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80405f4:	60bb      	str	r3, [r7, #8]
 80405f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80405f8:	2300      	movs	r3, #0
 80405fa:	607b      	str	r3, [r7, #4]
 80405fc:	4b1c      	ldr	r3, [pc, #112]	; (8040670 <SystemClock_Config+0xb8>)
 80405fe:	681b      	ldr	r3, [r3, #0]
 8040600:	4a1b      	ldr	r2, [pc, #108]	; (8040670 <SystemClock_Config+0xb8>)
 8040602:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8040606:	6013      	str	r3, [r2, #0]
 8040608:	4b19      	ldr	r3, [pc, #100]	; (8040670 <SystemClock_Config+0xb8>)
 804060a:	681b      	ldr	r3, [r3, #0]
 804060c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8040610:	607b      	str	r3, [r7, #4]
 8040612:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8040614:	2302      	movs	r3, #2
 8040616:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8040618:	2301      	movs	r3, #1
 804061a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 804061c:	2310      	movs	r3, #16
 804061e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8040620:	2300      	movs	r3, #0
 8040622:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8040624:	f107 0320 	add.w	r3, r7, #32
 8040628:	4618      	mov	r0, r3
 804062a:	f000 fd67 	bl	80410fc <HAL_RCC_OscConfig>
 804062e:	4603      	mov	r3, r0
 8040630:	2b00      	cmp	r3, #0
 8040632:	d001      	beq.n	8040638 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8040634:	f000 f8aa 	bl	804078c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8040638:	230f      	movs	r3, #15
 804063a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 804063c:	2300      	movs	r3, #0
 804063e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8040640:	2300      	movs	r3, #0
 8040642:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8040644:	2300      	movs	r3, #0
 8040646:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8040648:	2300      	movs	r3, #0
 804064a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 804064c:	f107 030c 	add.w	r3, r7, #12
 8040650:	2100      	movs	r1, #0
 8040652:	4618      	mov	r0, r3
 8040654:	f000 ffca 	bl	80415ec <HAL_RCC_ClockConfig>
 8040658:	4603      	mov	r3, r0
 804065a:	2b00      	cmp	r3, #0
 804065c:	d001      	beq.n	8040662 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 804065e:	f000 f895 	bl	804078c <Error_Handler>
  }
}
 8040662:	bf00      	nop
 8040664:	3750      	adds	r7, #80	; 0x50
 8040666:	46bd      	mov	sp, r7
 8040668:	bd80      	pop	{r7, pc}
 804066a:	bf00      	nop
 804066c:	40023800 	.word	0x40023800
 8040670:	40007000 	.word	0x40007000

08040674 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8040674:	b580      	push	{r7, lr}
 8040676:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8040678:	4b11      	ldr	r3, [pc, #68]	; (80406c0 <MX_USART1_UART_Init+0x4c>)
 804067a:	4a12      	ldr	r2, [pc, #72]	; (80406c4 <MX_USART1_UART_Init+0x50>)
 804067c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 804067e:	4b10      	ldr	r3, [pc, #64]	; (80406c0 <MX_USART1_UART_Init+0x4c>)
 8040680:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8040684:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8040686:	4b0e      	ldr	r3, [pc, #56]	; (80406c0 <MX_USART1_UART_Init+0x4c>)
 8040688:	2200      	movs	r2, #0
 804068a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 804068c:	4b0c      	ldr	r3, [pc, #48]	; (80406c0 <MX_USART1_UART_Init+0x4c>)
 804068e:	2200      	movs	r2, #0
 8040690:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8040692:	4b0b      	ldr	r3, [pc, #44]	; (80406c0 <MX_USART1_UART_Init+0x4c>)
 8040694:	2200      	movs	r2, #0
 8040696:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8040698:	4b09      	ldr	r3, [pc, #36]	; (80406c0 <MX_USART1_UART_Init+0x4c>)
 804069a:	220c      	movs	r2, #12
 804069c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 804069e:	4b08      	ldr	r3, [pc, #32]	; (80406c0 <MX_USART1_UART_Init+0x4c>)
 80406a0:	2200      	movs	r2, #0
 80406a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80406a4:	4b06      	ldr	r3, [pc, #24]	; (80406c0 <MX_USART1_UART_Init+0x4c>)
 80406a6:	2200      	movs	r2, #0
 80406a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80406aa:	4805      	ldr	r0, [pc, #20]	; (80406c0 <MX_USART1_UART_Init+0x4c>)
 80406ac:	f001 f97e 	bl	80419ac <HAL_UART_Init>
 80406b0:	4603      	mov	r3, r0
 80406b2:	2b00      	cmp	r3, #0
 80406b4:	d001      	beq.n	80406ba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80406b6:	f000 f869 	bl	804078c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80406ba:	bf00      	nop
 80406bc:	bd80      	pop	{r7, pc}
 80406be:	bf00      	nop
 80406c0:	20000084 	.word	0x20000084
 80406c4:	40011000 	.word	0x40011000

080406c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80406c8:	b580      	push	{r7, lr}
 80406ca:	b088      	sub	sp, #32
 80406cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80406ce:	f107 030c 	add.w	r3, r7, #12
 80406d2:	2200      	movs	r2, #0
 80406d4:	601a      	str	r2, [r3, #0]
 80406d6:	605a      	str	r2, [r3, #4]
 80406d8:	609a      	str	r2, [r3, #8]
 80406da:	60da      	str	r2, [r3, #12]
 80406dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80406de:	2300      	movs	r3, #0
 80406e0:	60bb      	str	r3, [r7, #8]
 80406e2:	4b1f      	ldr	r3, [pc, #124]	; (8040760 <MX_GPIO_Init+0x98>)
 80406e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80406e6:	4a1e      	ldr	r2, [pc, #120]	; (8040760 <MX_GPIO_Init+0x98>)
 80406e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80406ec:	6313      	str	r3, [r2, #48]	; 0x30
 80406ee:	4b1c      	ldr	r3, [pc, #112]	; (8040760 <MX_GPIO_Init+0x98>)
 80406f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80406f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80406f6:	60bb      	str	r3, [r7, #8]
 80406f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80406fa:	2300      	movs	r3, #0
 80406fc:	607b      	str	r3, [r7, #4]
 80406fe:	4b18      	ldr	r3, [pc, #96]	; (8040760 <MX_GPIO_Init+0x98>)
 8040700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040702:	4a17      	ldr	r2, [pc, #92]	; (8040760 <MX_GPIO_Init+0x98>)
 8040704:	f043 0301 	orr.w	r3, r3, #1
 8040708:	6313      	str	r3, [r2, #48]	; 0x30
 804070a:	4b15      	ldr	r3, [pc, #84]	; (8040760 <MX_GPIO_Init+0x98>)
 804070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804070e:	f003 0301 	and.w	r3, r3, #1
 8040712:	607b      	str	r3, [r7, #4]
 8040714:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8040716:	2300      	movs	r3, #0
 8040718:	603b      	str	r3, [r7, #0]
 804071a:	4b11      	ldr	r3, [pc, #68]	; (8040760 <MX_GPIO_Init+0x98>)
 804071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804071e:	4a10      	ldr	r2, [pc, #64]	; (8040760 <MX_GPIO_Init+0x98>)
 8040720:	f043 0302 	orr.w	r3, r3, #2
 8040724:	6313      	str	r3, [r2, #48]	; 0x30
 8040726:	4b0e      	ldr	r3, [pc, #56]	; (8040760 <MX_GPIO_Init+0x98>)
 8040728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804072a:	f003 0302 	and.w	r3, r3, #2
 804072e:	603b      	str	r3, [r7, #0]
 8040730:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8040732:	2200      	movs	r2, #0
 8040734:	2180      	movs	r1, #128	; 0x80
 8040736:	480b      	ldr	r0, [pc, #44]	; (8040764 <MX_GPIO_Init+0x9c>)
 8040738:	f000 fcac 	bl	8041094 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 804073c:	2380      	movs	r3, #128	; 0x80
 804073e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8040740:	2301      	movs	r3, #1
 8040742:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040744:	2300      	movs	r3, #0
 8040746:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040748:	2300      	movs	r3, #0
 804074a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 804074c:	f107 030c 	add.w	r3, r7, #12
 8040750:	4619      	mov	r1, r3
 8040752:	4804      	ldr	r0, [pc, #16]	; (8040764 <MX_GPIO_Init+0x9c>)
 8040754:	f000 fb1a 	bl	8040d8c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8040758:	bf00      	nop
 804075a:	3720      	adds	r7, #32
 804075c:	46bd      	mov	sp, r7
 804075e:	bd80      	pop	{r7, pc}
 8040760:	40023800 	.word	0x40023800
 8040764:	40020400 	.word	0x40020400

08040768 <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8040768:	b580      	push	{r7, lr}
 804076a:	b082      	sub	sp, #8
 804076c:	af00      	add	r7, sp, #0
 804076e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8040770:	1d39      	adds	r1, r7, #4
 8040772:	f04f 33ff 	mov.w	r3, #4294967295
 8040776:	2201      	movs	r2, #1
 8040778:	4803      	ldr	r0, [pc, #12]	; (8040788 <__io_putchar+0x20>)
 804077a:	f001 f964 	bl	8041a46 <HAL_UART_Transmit>

  return ch;
 804077e:	687b      	ldr	r3, [r7, #4]
}
 8040780:	4618      	mov	r0, r3
 8040782:	3708      	adds	r7, #8
 8040784:	46bd      	mov	sp, r7
 8040786:	bd80      	pop	{r7, pc}
 8040788:	20000084 	.word	0x20000084

0804078c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 804078c:	b480      	push	{r7}
 804078e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8040790:	b672      	cpsid	i
}
 8040792:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8040794:	e7fe      	b.n	8040794 <Error_Handler+0x8>
	...

08040798 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8040798:	b480      	push	{r7}
 804079a:	b083      	sub	sp, #12
 804079c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 804079e:	2300      	movs	r3, #0
 80407a0:	607b      	str	r3, [r7, #4]
 80407a2:	4b10      	ldr	r3, [pc, #64]	; (80407e4 <HAL_MspInit+0x4c>)
 80407a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80407a6:	4a0f      	ldr	r2, [pc, #60]	; (80407e4 <HAL_MspInit+0x4c>)
 80407a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80407ac:	6453      	str	r3, [r2, #68]	; 0x44
 80407ae:	4b0d      	ldr	r3, [pc, #52]	; (80407e4 <HAL_MspInit+0x4c>)
 80407b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80407b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80407b6:	607b      	str	r3, [r7, #4]
 80407b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80407ba:	2300      	movs	r3, #0
 80407bc:	603b      	str	r3, [r7, #0]
 80407be:	4b09      	ldr	r3, [pc, #36]	; (80407e4 <HAL_MspInit+0x4c>)
 80407c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80407c2:	4a08      	ldr	r2, [pc, #32]	; (80407e4 <HAL_MspInit+0x4c>)
 80407c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80407c8:	6413      	str	r3, [r2, #64]	; 0x40
 80407ca:	4b06      	ldr	r3, [pc, #24]	; (80407e4 <HAL_MspInit+0x4c>)
 80407cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80407ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80407d2:	603b      	str	r3, [r7, #0]
 80407d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80407d6:	bf00      	nop
 80407d8:	370c      	adds	r7, #12
 80407da:	46bd      	mov	sp, r7
 80407dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80407e0:	4770      	bx	lr
 80407e2:	bf00      	nop
 80407e4:	40023800 	.word	0x40023800

080407e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80407e8:	b580      	push	{r7, lr}
 80407ea:	b08a      	sub	sp, #40	; 0x28
 80407ec:	af00      	add	r7, sp, #0
 80407ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80407f0:	f107 0314 	add.w	r3, r7, #20
 80407f4:	2200      	movs	r2, #0
 80407f6:	601a      	str	r2, [r3, #0]
 80407f8:	605a      	str	r2, [r3, #4]
 80407fa:	609a      	str	r2, [r3, #8]
 80407fc:	60da      	str	r2, [r3, #12]
 80407fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8040800:	687b      	ldr	r3, [r7, #4]
 8040802:	681b      	ldr	r3, [r3, #0]
 8040804:	4a19      	ldr	r2, [pc, #100]	; (804086c <HAL_UART_MspInit+0x84>)
 8040806:	4293      	cmp	r3, r2
 8040808:	d12c      	bne.n	8040864 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 804080a:	2300      	movs	r3, #0
 804080c:	613b      	str	r3, [r7, #16]
 804080e:	4b18      	ldr	r3, [pc, #96]	; (8040870 <HAL_UART_MspInit+0x88>)
 8040810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8040812:	4a17      	ldr	r2, [pc, #92]	; (8040870 <HAL_UART_MspInit+0x88>)
 8040814:	f043 0310 	orr.w	r3, r3, #16
 8040818:	6453      	str	r3, [r2, #68]	; 0x44
 804081a:	4b15      	ldr	r3, [pc, #84]	; (8040870 <HAL_UART_MspInit+0x88>)
 804081c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804081e:	f003 0310 	and.w	r3, r3, #16
 8040822:	613b      	str	r3, [r7, #16]
 8040824:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8040826:	2300      	movs	r3, #0
 8040828:	60fb      	str	r3, [r7, #12]
 804082a:	4b11      	ldr	r3, [pc, #68]	; (8040870 <HAL_UART_MspInit+0x88>)
 804082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804082e:	4a10      	ldr	r2, [pc, #64]	; (8040870 <HAL_UART_MspInit+0x88>)
 8040830:	f043 0301 	orr.w	r3, r3, #1
 8040834:	6313      	str	r3, [r2, #48]	; 0x30
 8040836:	4b0e      	ldr	r3, [pc, #56]	; (8040870 <HAL_UART_MspInit+0x88>)
 8040838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804083a:	f003 0301 	and.w	r3, r3, #1
 804083e:	60fb      	str	r3, [r7, #12]
 8040840:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8040842:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8040846:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8040848:	2302      	movs	r3, #2
 804084a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 804084c:	2300      	movs	r3, #0
 804084e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8040850:	2303      	movs	r3, #3
 8040852:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8040854:	2307      	movs	r3, #7
 8040856:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8040858:	f107 0314 	add.w	r3, r7, #20
 804085c:	4619      	mov	r1, r3
 804085e:	4805      	ldr	r0, [pc, #20]	; (8040874 <HAL_UART_MspInit+0x8c>)
 8040860:	f000 fa94 	bl	8040d8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8040864:	bf00      	nop
 8040866:	3728      	adds	r7, #40	; 0x28
 8040868:	46bd      	mov	sp, r7
 804086a:	bd80      	pop	{r7, pc}
 804086c:	40011000 	.word	0x40011000
 8040870:	40023800 	.word	0x40023800
 8040874:	40020000 	.word	0x40020000

08040878 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8040878:	b480      	push	{r7}
 804087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 804087c:	e7fe      	b.n	804087c <NMI_Handler+0x4>

0804087e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 804087e:	b480      	push	{r7}
 8040880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8040882:	e7fe      	b.n	8040882 <HardFault_Handler+0x4>

08040884 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8040884:	b480      	push	{r7}
 8040886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8040888:	e7fe      	b.n	8040888 <MemManage_Handler+0x4>

0804088a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 804088a:	b480      	push	{r7}
 804088c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 804088e:	e7fe      	b.n	804088e <BusFault_Handler+0x4>

08040890 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8040890:	b480      	push	{r7}
 8040892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8040894:	e7fe      	b.n	8040894 <UsageFault_Handler+0x4>

08040896 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8040896:	b480      	push	{r7}
 8040898:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 804089a:	bf00      	nop
 804089c:	46bd      	mov	sp, r7
 804089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80408a2:	4770      	bx	lr

080408a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80408a4:	b480      	push	{r7}
 80408a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80408a8:	bf00      	nop
 80408aa:	46bd      	mov	sp, r7
 80408ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80408b0:	4770      	bx	lr

080408b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80408b2:	b480      	push	{r7}
 80408b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80408b6:	bf00      	nop
 80408b8:	46bd      	mov	sp, r7
 80408ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80408be:	4770      	bx	lr

080408c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80408c0:	b580      	push	{r7, lr}
 80408c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80408c4:	f000 f938 	bl	8040b38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80408c8:	bf00      	nop
 80408ca:	bd80      	pop	{r7, pc}

080408cc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80408cc:	b580      	push	{r7, lr}
 80408ce:	b086      	sub	sp, #24
 80408d0:	af00      	add	r7, sp, #0
 80408d2:	60f8      	str	r0, [r7, #12]
 80408d4:	60b9      	str	r1, [r7, #8]
 80408d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80408d8:	2300      	movs	r3, #0
 80408da:	617b      	str	r3, [r7, #20]
 80408dc:	e00a      	b.n	80408f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80408de:	f3af 8000 	nop.w
 80408e2:	4601      	mov	r1, r0
 80408e4:	68bb      	ldr	r3, [r7, #8]
 80408e6:	1c5a      	adds	r2, r3, #1
 80408e8:	60ba      	str	r2, [r7, #8]
 80408ea:	b2ca      	uxtb	r2, r1
 80408ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80408ee:	697b      	ldr	r3, [r7, #20]
 80408f0:	3301      	adds	r3, #1
 80408f2:	617b      	str	r3, [r7, #20]
 80408f4:	697a      	ldr	r2, [r7, #20]
 80408f6:	687b      	ldr	r3, [r7, #4]
 80408f8:	429a      	cmp	r2, r3
 80408fa:	dbf0      	blt.n	80408de <_read+0x12>
  }

  return len;
 80408fc:	687b      	ldr	r3, [r7, #4]
}
 80408fe:	4618      	mov	r0, r3
 8040900:	3718      	adds	r7, #24
 8040902:	46bd      	mov	sp, r7
 8040904:	bd80      	pop	{r7, pc}

08040906 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8040906:	b580      	push	{r7, lr}
 8040908:	b086      	sub	sp, #24
 804090a:	af00      	add	r7, sp, #0
 804090c:	60f8      	str	r0, [r7, #12]
 804090e:	60b9      	str	r1, [r7, #8]
 8040910:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8040912:	2300      	movs	r3, #0
 8040914:	617b      	str	r3, [r7, #20]
 8040916:	e009      	b.n	804092c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8040918:	68bb      	ldr	r3, [r7, #8]
 804091a:	1c5a      	adds	r2, r3, #1
 804091c:	60ba      	str	r2, [r7, #8]
 804091e:	781b      	ldrb	r3, [r3, #0]
 8040920:	4618      	mov	r0, r3
 8040922:	f7ff ff21 	bl	8040768 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8040926:	697b      	ldr	r3, [r7, #20]
 8040928:	3301      	adds	r3, #1
 804092a:	617b      	str	r3, [r7, #20]
 804092c:	697a      	ldr	r2, [r7, #20]
 804092e:	687b      	ldr	r3, [r7, #4]
 8040930:	429a      	cmp	r2, r3
 8040932:	dbf1      	blt.n	8040918 <_write+0x12>
  }
  return len;
 8040934:	687b      	ldr	r3, [r7, #4]
}
 8040936:	4618      	mov	r0, r3
 8040938:	3718      	adds	r7, #24
 804093a:	46bd      	mov	sp, r7
 804093c:	bd80      	pop	{r7, pc}

0804093e <_close>:

int _close(int file)
{
 804093e:	b480      	push	{r7}
 8040940:	b083      	sub	sp, #12
 8040942:	af00      	add	r7, sp, #0
 8040944:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8040946:	f04f 33ff 	mov.w	r3, #4294967295
}
 804094a:	4618      	mov	r0, r3
 804094c:	370c      	adds	r7, #12
 804094e:	46bd      	mov	sp, r7
 8040950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040954:	4770      	bx	lr

08040956 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8040956:	b480      	push	{r7}
 8040958:	b083      	sub	sp, #12
 804095a:	af00      	add	r7, sp, #0
 804095c:	6078      	str	r0, [r7, #4]
 804095e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8040960:	683b      	ldr	r3, [r7, #0]
 8040962:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8040966:	605a      	str	r2, [r3, #4]
  return 0;
 8040968:	2300      	movs	r3, #0
}
 804096a:	4618      	mov	r0, r3
 804096c:	370c      	adds	r7, #12
 804096e:	46bd      	mov	sp, r7
 8040970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040974:	4770      	bx	lr

08040976 <_isatty>:

int _isatty(int file)
{
 8040976:	b480      	push	{r7}
 8040978:	b083      	sub	sp, #12
 804097a:	af00      	add	r7, sp, #0
 804097c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 804097e:	2301      	movs	r3, #1
}
 8040980:	4618      	mov	r0, r3
 8040982:	370c      	adds	r7, #12
 8040984:	46bd      	mov	sp, r7
 8040986:	f85d 7b04 	ldr.w	r7, [sp], #4
 804098a:	4770      	bx	lr

0804098c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 804098c:	b480      	push	{r7}
 804098e:	b085      	sub	sp, #20
 8040990:	af00      	add	r7, sp, #0
 8040992:	60f8      	str	r0, [r7, #12]
 8040994:	60b9      	str	r1, [r7, #8]
 8040996:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8040998:	2300      	movs	r3, #0
}
 804099a:	4618      	mov	r0, r3
 804099c:	3714      	adds	r7, #20
 804099e:	46bd      	mov	sp, r7
 80409a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80409a4:	4770      	bx	lr
	...

080409a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80409a8:	b580      	push	{r7, lr}
 80409aa:	b086      	sub	sp, #24
 80409ac:	af00      	add	r7, sp, #0
 80409ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80409b0:	4a14      	ldr	r2, [pc, #80]	; (8040a04 <_sbrk+0x5c>)
 80409b2:	4b15      	ldr	r3, [pc, #84]	; (8040a08 <_sbrk+0x60>)
 80409b4:	1ad3      	subs	r3, r2, r3
 80409b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80409b8:	697b      	ldr	r3, [r7, #20]
 80409ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80409bc:	4b13      	ldr	r3, [pc, #76]	; (8040a0c <_sbrk+0x64>)
 80409be:	681b      	ldr	r3, [r3, #0]
 80409c0:	2b00      	cmp	r3, #0
 80409c2:	d102      	bne.n	80409ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80409c4:	4b11      	ldr	r3, [pc, #68]	; (8040a0c <_sbrk+0x64>)
 80409c6:	4a12      	ldr	r2, [pc, #72]	; (8040a10 <_sbrk+0x68>)
 80409c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80409ca:	4b10      	ldr	r3, [pc, #64]	; (8040a0c <_sbrk+0x64>)
 80409cc:	681a      	ldr	r2, [r3, #0]
 80409ce:	687b      	ldr	r3, [r7, #4]
 80409d0:	4413      	add	r3, r2
 80409d2:	693a      	ldr	r2, [r7, #16]
 80409d4:	429a      	cmp	r2, r3
 80409d6:	d207      	bcs.n	80409e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80409d8:	f001 fcfe 	bl	80423d8 <__errno>
 80409dc:	4603      	mov	r3, r0
 80409de:	220c      	movs	r2, #12
 80409e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80409e2:	f04f 33ff 	mov.w	r3, #4294967295
 80409e6:	e009      	b.n	80409fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80409e8:	4b08      	ldr	r3, [pc, #32]	; (8040a0c <_sbrk+0x64>)
 80409ea:	681b      	ldr	r3, [r3, #0]
 80409ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80409ee:	4b07      	ldr	r3, [pc, #28]	; (8040a0c <_sbrk+0x64>)
 80409f0:	681a      	ldr	r2, [r3, #0]
 80409f2:	687b      	ldr	r3, [r7, #4]
 80409f4:	4413      	add	r3, r2
 80409f6:	4a05      	ldr	r2, [pc, #20]	; (8040a0c <_sbrk+0x64>)
 80409f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80409fa:	68fb      	ldr	r3, [r7, #12]
}
 80409fc:	4618      	mov	r0, r3
 80409fe:	3718      	adds	r7, #24
 8040a00:	46bd      	mov	sp, r7
 8040a02:	bd80      	pop	{r7, pc}
 8040a04:	20020000 	.word	0x20020000
 8040a08:	00000400 	.word	0x00000400
 8040a0c:	200000c8 	.word	0x200000c8
 8040a10:	20000220 	.word	0x20000220

08040a14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8040a14:	b480      	push	{r7}
 8040a16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8040a18:	4b07      	ldr	r3, [pc, #28]	; (8040a38 <SystemInit+0x24>)
 8040a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8040a1e:	4a06      	ldr	r2, [pc, #24]	; (8040a38 <SystemInit+0x24>)
 8040a20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8040a24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8040a28:	4b03      	ldr	r3, [pc, #12]	; (8040a38 <SystemInit+0x24>)
 8040a2a:	4a04      	ldr	r2, [pc, #16]	; (8040a3c <SystemInit+0x28>)
 8040a2c:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8040a2e:	bf00      	nop
 8040a30:	46bd      	mov	sp, r7
 8040a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040a36:	4770      	bx	lr
 8040a38:	e000ed00 	.word	0xe000ed00
 8040a3c:	08040000 	.word	0x08040000

08040a40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8040a40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8040a78 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8040a44:	480d      	ldr	r0, [pc, #52]	; (8040a7c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8040a46:	490e      	ldr	r1, [pc, #56]	; (8040a80 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8040a48:	4a0e      	ldr	r2, [pc, #56]	; (8040a84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8040a4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8040a4c:	e002      	b.n	8040a54 <LoopCopyDataInit>

08040a4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8040a4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8040a50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8040a52:	3304      	adds	r3, #4

08040a54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8040a54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8040a56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8040a58:	d3f9      	bcc.n	8040a4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8040a5a:	4a0b      	ldr	r2, [pc, #44]	; (8040a88 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8040a5c:	4c0b      	ldr	r4, [pc, #44]	; (8040a8c <LoopFillZerobss+0x26>)
  movs r3, #0
 8040a5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8040a60:	e001      	b.n	8040a66 <LoopFillZerobss>

08040a62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8040a62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8040a64:	3204      	adds	r2, #4

08040a66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8040a66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8040a68:	d3fb      	bcc.n	8040a62 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8040a6a:	f7ff ffd3 	bl	8040a14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8040a6e:	f001 fcb9 	bl	80423e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8040a72:	f7ff fd83 	bl	804057c <main>
  bx  lr    
 8040a76:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8040a78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8040a7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8040a80:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8040a84:	0804300c 	.word	0x0804300c
  ldr r2, =_sbss
 8040a88:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8040a8c:	2000021c 	.word	0x2000021c

08040a90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8040a90:	e7fe      	b.n	8040a90 <ADC_IRQHandler>
	...

08040a94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8040a94:	b580      	push	{r7, lr}
 8040a96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8040a98:	4b0e      	ldr	r3, [pc, #56]	; (8040ad4 <HAL_Init+0x40>)
 8040a9a:	681b      	ldr	r3, [r3, #0]
 8040a9c:	4a0d      	ldr	r2, [pc, #52]	; (8040ad4 <HAL_Init+0x40>)
 8040a9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8040aa2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8040aa4:	4b0b      	ldr	r3, [pc, #44]	; (8040ad4 <HAL_Init+0x40>)
 8040aa6:	681b      	ldr	r3, [r3, #0]
 8040aa8:	4a0a      	ldr	r2, [pc, #40]	; (8040ad4 <HAL_Init+0x40>)
 8040aaa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8040aae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8040ab0:	4b08      	ldr	r3, [pc, #32]	; (8040ad4 <HAL_Init+0x40>)
 8040ab2:	681b      	ldr	r3, [r3, #0]
 8040ab4:	4a07      	ldr	r2, [pc, #28]	; (8040ad4 <HAL_Init+0x40>)
 8040ab6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8040aba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8040abc:	2003      	movs	r0, #3
 8040abe:	f000 f931 	bl	8040d24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8040ac2:	200f      	movs	r0, #15
 8040ac4:	f000 f808 	bl	8040ad8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8040ac8:	f7ff fe66 	bl	8040798 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8040acc:	2300      	movs	r3, #0
}
 8040ace:	4618      	mov	r0, r3
 8040ad0:	bd80      	pop	{r7, pc}
 8040ad2:	bf00      	nop
 8040ad4:	40023c00 	.word	0x40023c00

08040ad8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8040ad8:	b580      	push	{r7, lr}
 8040ada:	b082      	sub	sp, #8
 8040adc:	af00      	add	r7, sp, #0
 8040ade:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8040ae0:	4b12      	ldr	r3, [pc, #72]	; (8040b2c <HAL_InitTick+0x54>)
 8040ae2:	681a      	ldr	r2, [r3, #0]
 8040ae4:	4b12      	ldr	r3, [pc, #72]	; (8040b30 <HAL_InitTick+0x58>)
 8040ae6:	781b      	ldrb	r3, [r3, #0]
 8040ae8:	4619      	mov	r1, r3
 8040aea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8040aee:	fbb3 f3f1 	udiv	r3, r3, r1
 8040af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8040af6:	4618      	mov	r0, r3
 8040af8:	f000 f93b 	bl	8040d72 <HAL_SYSTICK_Config>
 8040afc:	4603      	mov	r3, r0
 8040afe:	2b00      	cmp	r3, #0
 8040b00:	d001      	beq.n	8040b06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8040b02:	2301      	movs	r3, #1
 8040b04:	e00e      	b.n	8040b24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8040b06:	687b      	ldr	r3, [r7, #4]
 8040b08:	2b0f      	cmp	r3, #15
 8040b0a:	d80a      	bhi.n	8040b22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8040b0c:	2200      	movs	r2, #0
 8040b0e:	6879      	ldr	r1, [r7, #4]
 8040b10:	f04f 30ff 	mov.w	r0, #4294967295
 8040b14:	f000 f911 	bl	8040d3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8040b18:	4a06      	ldr	r2, [pc, #24]	; (8040b34 <HAL_InitTick+0x5c>)
 8040b1a:	687b      	ldr	r3, [r7, #4]
 8040b1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8040b1e:	2300      	movs	r3, #0
 8040b20:	e000      	b.n	8040b24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8040b22:	2301      	movs	r3, #1
}
 8040b24:	4618      	mov	r0, r3
 8040b26:	3708      	adds	r7, #8
 8040b28:	46bd      	mov	sp, r7
 8040b2a:	bd80      	pop	{r7, pc}
 8040b2c:	20000000 	.word	0x20000000
 8040b30:	20000008 	.word	0x20000008
 8040b34:	20000004 	.word	0x20000004

08040b38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8040b38:	b480      	push	{r7}
 8040b3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8040b3c:	4b06      	ldr	r3, [pc, #24]	; (8040b58 <HAL_IncTick+0x20>)
 8040b3e:	781b      	ldrb	r3, [r3, #0]
 8040b40:	461a      	mov	r2, r3
 8040b42:	4b06      	ldr	r3, [pc, #24]	; (8040b5c <HAL_IncTick+0x24>)
 8040b44:	681b      	ldr	r3, [r3, #0]
 8040b46:	4413      	add	r3, r2
 8040b48:	4a04      	ldr	r2, [pc, #16]	; (8040b5c <HAL_IncTick+0x24>)
 8040b4a:	6013      	str	r3, [r2, #0]
}
 8040b4c:	bf00      	nop
 8040b4e:	46bd      	mov	sp, r7
 8040b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040b54:	4770      	bx	lr
 8040b56:	bf00      	nop
 8040b58:	20000008 	.word	0x20000008
 8040b5c:	200000cc 	.word	0x200000cc

08040b60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8040b60:	b480      	push	{r7}
 8040b62:	af00      	add	r7, sp, #0
  return uwTick;
 8040b64:	4b03      	ldr	r3, [pc, #12]	; (8040b74 <HAL_GetTick+0x14>)
 8040b66:	681b      	ldr	r3, [r3, #0]
}
 8040b68:	4618      	mov	r0, r3
 8040b6a:	46bd      	mov	sp, r7
 8040b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040b70:	4770      	bx	lr
 8040b72:	bf00      	nop
 8040b74:	200000cc 	.word	0x200000cc

08040b78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8040b78:	b580      	push	{r7, lr}
 8040b7a:	b084      	sub	sp, #16
 8040b7c:	af00      	add	r7, sp, #0
 8040b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8040b80:	f7ff ffee 	bl	8040b60 <HAL_GetTick>
 8040b84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8040b86:	687b      	ldr	r3, [r7, #4]
 8040b88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8040b8a:	68fb      	ldr	r3, [r7, #12]
 8040b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8040b90:	d005      	beq.n	8040b9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8040b92:	4b0a      	ldr	r3, [pc, #40]	; (8040bbc <HAL_Delay+0x44>)
 8040b94:	781b      	ldrb	r3, [r3, #0]
 8040b96:	461a      	mov	r2, r3
 8040b98:	68fb      	ldr	r3, [r7, #12]
 8040b9a:	4413      	add	r3, r2
 8040b9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8040b9e:	bf00      	nop
 8040ba0:	f7ff ffde 	bl	8040b60 <HAL_GetTick>
 8040ba4:	4602      	mov	r2, r0
 8040ba6:	68bb      	ldr	r3, [r7, #8]
 8040ba8:	1ad3      	subs	r3, r2, r3
 8040baa:	68fa      	ldr	r2, [r7, #12]
 8040bac:	429a      	cmp	r2, r3
 8040bae:	d8f7      	bhi.n	8040ba0 <HAL_Delay+0x28>
  {
  }
}
 8040bb0:	bf00      	nop
 8040bb2:	bf00      	nop
 8040bb4:	3710      	adds	r7, #16
 8040bb6:	46bd      	mov	sp, r7
 8040bb8:	bd80      	pop	{r7, pc}
 8040bba:	bf00      	nop
 8040bbc:	20000008 	.word	0x20000008

08040bc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8040bc0:	b480      	push	{r7}
 8040bc2:	b085      	sub	sp, #20
 8040bc4:	af00      	add	r7, sp, #0
 8040bc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8040bc8:	687b      	ldr	r3, [r7, #4]
 8040bca:	f003 0307 	and.w	r3, r3, #7
 8040bce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8040bd0:	4b0c      	ldr	r3, [pc, #48]	; (8040c04 <__NVIC_SetPriorityGrouping+0x44>)
 8040bd2:	68db      	ldr	r3, [r3, #12]
 8040bd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8040bd6:	68ba      	ldr	r2, [r7, #8]
 8040bd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8040bdc:	4013      	ands	r3, r2
 8040bde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8040be0:	68fb      	ldr	r3, [r7, #12]
 8040be2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8040be4:	68bb      	ldr	r3, [r7, #8]
 8040be6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8040be8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8040bec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8040bf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8040bf2:	4a04      	ldr	r2, [pc, #16]	; (8040c04 <__NVIC_SetPriorityGrouping+0x44>)
 8040bf4:	68bb      	ldr	r3, [r7, #8]
 8040bf6:	60d3      	str	r3, [r2, #12]
}
 8040bf8:	bf00      	nop
 8040bfa:	3714      	adds	r7, #20
 8040bfc:	46bd      	mov	sp, r7
 8040bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040c02:	4770      	bx	lr
 8040c04:	e000ed00 	.word	0xe000ed00

08040c08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8040c08:	b480      	push	{r7}
 8040c0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8040c0c:	4b04      	ldr	r3, [pc, #16]	; (8040c20 <__NVIC_GetPriorityGrouping+0x18>)
 8040c0e:	68db      	ldr	r3, [r3, #12]
 8040c10:	0a1b      	lsrs	r3, r3, #8
 8040c12:	f003 0307 	and.w	r3, r3, #7
}
 8040c16:	4618      	mov	r0, r3
 8040c18:	46bd      	mov	sp, r7
 8040c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040c1e:	4770      	bx	lr
 8040c20:	e000ed00 	.word	0xe000ed00

08040c24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8040c24:	b480      	push	{r7}
 8040c26:	b083      	sub	sp, #12
 8040c28:	af00      	add	r7, sp, #0
 8040c2a:	4603      	mov	r3, r0
 8040c2c:	6039      	str	r1, [r7, #0]
 8040c2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8040c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040c34:	2b00      	cmp	r3, #0
 8040c36:	db0a      	blt.n	8040c4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8040c38:	683b      	ldr	r3, [r7, #0]
 8040c3a:	b2da      	uxtb	r2, r3
 8040c3c:	490c      	ldr	r1, [pc, #48]	; (8040c70 <__NVIC_SetPriority+0x4c>)
 8040c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040c42:	0112      	lsls	r2, r2, #4
 8040c44:	b2d2      	uxtb	r2, r2
 8040c46:	440b      	add	r3, r1
 8040c48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8040c4c:	e00a      	b.n	8040c64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8040c4e:	683b      	ldr	r3, [r7, #0]
 8040c50:	b2da      	uxtb	r2, r3
 8040c52:	4908      	ldr	r1, [pc, #32]	; (8040c74 <__NVIC_SetPriority+0x50>)
 8040c54:	79fb      	ldrb	r3, [r7, #7]
 8040c56:	f003 030f 	and.w	r3, r3, #15
 8040c5a:	3b04      	subs	r3, #4
 8040c5c:	0112      	lsls	r2, r2, #4
 8040c5e:	b2d2      	uxtb	r2, r2
 8040c60:	440b      	add	r3, r1
 8040c62:	761a      	strb	r2, [r3, #24]
}
 8040c64:	bf00      	nop
 8040c66:	370c      	adds	r7, #12
 8040c68:	46bd      	mov	sp, r7
 8040c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040c6e:	4770      	bx	lr
 8040c70:	e000e100 	.word	0xe000e100
 8040c74:	e000ed00 	.word	0xe000ed00

08040c78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8040c78:	b480      	push	{r7}
 8040c7a:	b089      	sub	sp, #36	; 0x24
 8040c7c:	af00      	add	r7, sp, #0
 8040c7e:	60f8      	str	r0, [r7, #12]
 8040c80:	60b9      	str	r1, [r7, #8]
 8040c82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8040c84:	68fb      	ldr	r3, [r7, #12]
 8040c86:	f003 0307 	and.w	r3, r3, #7
 8040c8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8040c8c:	69fb      	ldr	r3, [r7, #28]
 8040c8e:	f1c3 0307 	rsb	r3, r3, #7
 8040c92:	2b04      	cmp	r3, #4
 8040c94:	bf28      	it	cs
 8040c96:	2304      	movcs	r3, #4
 8040c98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8040c9a:	69fb      	ldr	r3, [r7, #28]
 8040c9c:	3304      	adds	r3, #4
 8040c9e:	2b06      	cmp	r3, #6
 8040ca0:	d902      	bls.n	8040ca8 <NVIC_EncodePriority+0x30>
 8040ca2:	69fb      	ldr	r3, [r7, #28]
 8040ca4:	3b03      	subs	r3, #3
 8040ca6:	e000      	b.n	8040caa <NVIC_EncodePriority+0x32>
 8040ca8:	2300      	movs	r3, #0
 8040caa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8040cac:	f04f 32ff 	mov.w	r2, #4294967295
 8040cb0:	69bb      	ldr	r3, [r7, #24]
 8040cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8040cb6:	43da      	mvns	r2, r3
 8040cb8:	68bb      	ldr	r3, [r7, #8]
 8040cba:	401a      	ands	r2, r3
 8040cbc:	697b      	ldr	r3, [r7, #20]
 8040cbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8040cc0:	f04f 31ff 	mov.w	r1, #4294967295
 8040cc4:	697b      	ldr	r3, [r7, #20]
 8040cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8040cca:	43d9      	mvns	r1, r3
 8040ccc:	687b      	ldr	r3, [r7, #4]
 8040cce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8040cd0:	4313      	orrs	r3, r2
         );
}
 8040cd2:	4618      	mov	r0, r3
 8040cd4:	3724      	adds	r7, #36	; 0x24
 8040cd6:	46bd      	mov	sp, r7
 8040cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040cdc:	4770      	bx	lr
	...

08040ce0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8040ce0:	b580      	push	{r7, lr}
 8040ce2:	b082      	sub	sp, #8
 8040ce4:	af00      	add	r7, sp, #0
 8040ce6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8040ce8:	687b      	ldr	r3, [r7, #4]
 8040cea:	3b01      	subs	r3, #1
 8040cec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8040cf0:	d301      	bcc.n	8040cf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8040cf2:	2301      	movs	r3, #1
 8040cf4:	e00f      	b.n	8040d16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8040cf6:	4a0a      	ldr	r2, [pc, #40]	; (8040d20 <SysTick_Config+0x40>)
 8040cf8:	687b      	ldr	r3, [r7, #4]
 8040cfa:	3b01      	subs	r3, #1
 8040cfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8040cfe:	210f      	movs	r1, #15
 8040d00:	f04f 30ff 	mov.w	r0, #4294967295
 8040d04:	f7ff ff8e 	bl	8040c24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8040d08:	4b05      	ldr	r3, [pc, #20]	; (8040d20 <SysTick_Config+0x40>)
 8040d0a:	2200      	movs	r2, #0
 8040d0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8040d0e:	4b04      	ldr	r3, [pc, #16]	; (8040d20 <SysTick_Config+0x40>)
 8040d10:	2207      	movs	r2, #7
 8040d12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8040d14:	2300      	movs	r3, #0
}
 8040d16:	4618      	mov	r0, r3
 8040d18:	3708      	adds	r7, #8
 8040d1a:	46bd      	mov	sp, r7
 8040d1c:	bd80      	pop	{r7, pc}
 8040d1e:	bf00      	nop
 8040d20:	e000e010 	.word	0xe000e010

08040d24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8040d24:	b580      	push	{r7, lr}
 8040d26:	b082      	sub	sp, #8
 8040d28:	af00      	add	r7, sp, #0
 8040d2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8040d2c:	6878      	ldr	r0, [r7, #4]
 8040d2e:	f7ff ff47 	bl	8040bc0 <__NVIC_SetPriorityGrouping>
}
 8040d32:	bf00      	nop
 8040d34:	3708      	adds	r7, #8
 8040d36:	46bd      	mov	sp, r7
 8040d38:	bd80      	pop	{r7, pc}

08040d3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8040d3a:	b580      	push	{r7, lr}
 8040d3c:	b086      	sub	sp, #24
 8040d3e:	af00      	add	r7, sp, #0
 8040d40:	4603      	mov	r3, r0
 8040d42:	60b9      	str	r1, [r7, #8]
 8040d44:	607a      	str	r2, [r7, #4]
 8040d46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8040d48:	2300      	movs	r3, #0
 8040d4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8040d4c:	f7ff ff5c 	bl	8040c08 <__NVIC_GetPriorityGrouping>
 8040d50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8040d52:	687a      	ldr	r2, [r7, #4]
 8040d54:	68b9      	ldr	r1, [r7, #8]
 8040d56:	6978      	ldr	r0, [r7, #20]
 8040d58:	f7ff ff8e 	bl	8040c78 <NVIC_EncodePriority>
 8040d5c:	4602      	mov	r2, r0
 8040d5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8040d62:	4611      	mov	r1, r2
 8040d64:	4618      	mov	r0, r3
 8040d66:	f7ff ff5d 	bl	8040c24 <__NVIC_SetPriority>
}
 8040d6a:	bf00      	nop
 8040d6c:	3718      	adds	r7, #24
 8040d6e:	46bd      	mov	sp, r7
 8040d70:	bd80      	pop	{r7, pc}

08040d72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8040d72:	b580      	push	{r7, lr}
 8040d74:	b082      	sub	sp, #8
 8040d76:	af00      	add	r7, sp, #0
 8040d78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8040d7a:	6878      	ldr	r0, [r7, #4]
 8040d7c:	f7ff ffb0 	bl	8040ce0 <SysTick_Config>
 8040d80:	4603      	mov	r3, r0
}
 8040d82:	4618      	mov	r0, r3
 8040d84:	3708      	adds	r7, #8
 8040d86:	46bd      	mov	sp, r7
 8040d88:	bd80      	pop	{r7, pc}
	...

08040d8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8040d8c:	b480      	push	{r7}
 8040d8e:	b089      	sub	sp, #36	; 0x24
 8040d90:	af00      	add	r7, sp, #0
 8040d92:	6078      	str	r0, [r7, #4]
 8040d94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8040d96:	2300      	movs	r3, #0
 8040d98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8040d9a:	2300      	movs	r3, #0
 8040d9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8040d9e:	2300      	movs	r3, #0
 8040da0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8040da2:	2300      	movs	r3, #0
 8040da4:	61fb      	str	r3, [r7, #28]
 8040da6:	e159      	b.n	804105c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8040da8:	2201      	movs	r2, #1
 8040daa:	69fb      	ldr	r3, [r7, #28]
 8040dac:	fa02 f303 	lsl.w	r3, r2, r3
 8040db0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8040db2:	683b      	ldr	r3, [r7, #0]
 8040db4:	681b      	ldr	r3, [r3, #0]
 8040db6:	697a      	ldr	r2, [r7, #20]
 8040db8:	4013      	ands	r3, r2
 8040dba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8040dbc:	693a      	ldr	r2, [r7, #16]
 8040dbe:	697b      	ldr	r3, [r7, #20]
 8040dc0:	429a      	cmp	r2, r3
 8040dc2:	f040 8148 	bne.w	8041056 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8040dc6:	683b      	ldr	r3, [r7, #0]
 8040dc8:	685b      	ldr	r3, [r3, #4]
 8040dca:	f003 0303 	and.w	r3, r3, #3
 8040dce:	2b01      	cmp	r3, #1
 8040dd0:	d005      	beq.n	8040dde <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8040dd2:	683b      	ldr	r3, [r7, #0]
 8040dd4:	685b      	ldr	r3, [r3, #4]
 8040dd6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8040dda:	2b02      	cmp	r3, #2
 8040ddc:	d130      	bne.n	8040e40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8040dde:	687b      	ldr	r3, [r7, #4]
 8040de0:	689b      	ldr	r3, [r3, #8]
 8040de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8040de4:	69fb      	ldr	r3, [r7, #28]
 8040de6:	005b      	lsls	r3, r3, #1
 8040de8:	2203      	movs	r2, #3
 8040dea:	fa02 f303 	lsl.w	r3, r2, r3
 8040dee:	43db      	mvns	r3, r3
 8040df0:	69ba      	ldr	r2, [r7, #24]
 8040df2:	4013      	ands	r3, r2
 8040df4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8040df6:	683b      	ldr	r3, [r7, #0]
 8040df8:	68da      	ldr	r2, [r3, #12]
 8040dfa:	69fb      	ldr	r3, [r7, #28]
 8040dfc:	005b      	lsls	r3, r3, #1
 8040dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8040e02:	69ba      	ldr	r2, [r7, #24]
 8040e04:	4313      	orrs	r3, r2
 8040e06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8040e08:	687b      	ldr	r3, [r7, #4]
 8040e0a:	69ba      	ldr	r2, [r7, #24]
 8040e0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8040e0e:	687b      	ldr	r3, [r7, #4]
 8040e10:	685b      	ldr	r3, [r3, #4]
 8040e12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8040e14:	2201      	movs	r2, #1
 8040e16:	69fb      	ldr	r3, [r7, #28]
 8040e18:	fa02 f303 	lsl.w	r3, r2, r3
 8040e1c:	43db      	mvns	r3, r3
 8040e1e:	69ba      	ldr	r2, [r7, #24]
 8040e20:	4013      	ands	r3, r2
 8040e22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8040e24:	683b      	ldr	r3, [r7, #0]
 8040e26:	685b      	ldr	r3, [r3, #4]
 8040e28:	091b      	lsrs	r3, r3, #4
 8040e2a:	f003 0201 	and.w	r2, r3, #1
 8040e2e:	69fb      	ldr	r3, [r7, #28]
 8040e30:	fa02 f303 	lsl.w	r3, r2, r3
 8040e34:	69ba      	ldr	r2, [r7, #24]
 8040e36:	4313      	orrs	r3, r2
 8040e38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8040e3a:	687b      	ldr	r3, [r7, #4]
 8040e3c:	69ba      	ldr	r2, [r7, #24]
 8040e3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8040e40:	683b      	ldr	r3, [r7, #0]
 8040e42:	685b      	ldr	r3, [r3, #4]
 8040e44:	f003 0303 	and.w	r3, r3, #3
 8040e48:	2b03      	cmp	r3, #3
 8040e4a:	d017      	beq.n	8040e7c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8040e4c:	687b      	ldr	r3, [r7, #4]
 8040e4e:	68db      	ldr	r3, [r3, #12]
 8040e50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8040e52:	69fb      	ldr	r3, [r7, #28]
 8040e54:	005b      	lsls	r3, r3, #1
 8040e56:	2203      	movs	r2, #3
 8040e58:	fa02 f303 	lsl.w	r3, r2, r3
 8040e5c:	43db      	mvns	r3, r3
 8040e5e:	69ba      	ldr	r2, [r7, #24]
 8040e60:	4013      	ands	r3, r2
 8040e62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8040e64:	683b      	ldr	r3, [r7, #0]
 8040e66:	689a      	ldr	r2, [r3, #8]
 8040e68:	69fb      	ldr	r3, [r7, #28]
 8040e6a:	005b      	lsls	r3, r3, #1
 8040e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8040e70:	69ba      	ldr	r2, [r7, #24]
 8040e72:	4313      	orrs	r3, r2
 8040e74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8040e76:	687b      	ldr	r3, [r7, #4]
 8040e78:	69ba      	ldr	r2, [r7, #24]
 8040e7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8040e7c:	683b      	ldr	r3, [r7, #0]
 8040e7e:	685b      	ldr	r3, [r3, #4]
 8040e80:	f003 0303 	and.w	r3, r3, #3
 8040e84:	2b02      	cmp	r3, #2
 8040e86:	d123      	bne.n	8040ed0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8040e88:	69fb      	ldr	r3, [r7, #28]
 8040e8a:	08da      	lsrs	r2, r3, #3
 8040e8c:	687b      	ldr	r3, [r7, #4]
 8040e8e:	3208      	adds	r2, #8
 8040e90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8040e94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8040e96:	69fb      	ldr	r3, [r7, #28]
 8040e98:	f003 0307 	and.w	r3, r3, #7
 8040e9c:	009b      	lsls	r3, r3, #2
 8040e9e:	220f      	movs	r2, #15
 8040ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8040ea4:	43db      	mvns	r3, r3
 8040ea6:	69ba      	ldr	r2, [r7, #24]
 8040ea8:	4013      	ands	r3, r2
 8040eaa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8040eac:	683b      	ldr	r3, [r7, #0]
 8040eae:	691a      	ldr	r2, [r3, #16]
 8040eb0:	69fb      	ldr	r3, [r7, #28]
 8040eb2:	f003 0307 	and.w	r3, r3, #7
 8040eb6:	009b      	lsls	r3, r3, #2
 8040eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8040ebc:	69ba      	ldr	r2, [r7, #24]
 8040ebe:	4313      	orrs	r3, r2
 8040ec0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8040ec2:	69fb      	ldr	r3, [r7, #28]
 8040ec4:	08da      	lsrs	r2, r3, #3
 8040ec6:	687b      	ldr	r3, [r7, #4]
 8040ec8:	3208      	adds	r2, #8
 8040eca:	69b9      	ldr	r1, [r7, #24]
 8040ecc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8040ed0:	687b      	ldr	r3, [r7, #4]
 8040ed2:	681b      	ldr	r3, [r3, #0]
 8040ed4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8040ed6:	69fb      	ldr	r3, [r7, #28]
 8040ed8:	005b      	lsls	r3, r3, #1
 8040eda:	2203      	movs	r2, #3
 8040edc:	fa02 f303 	lsl.w	r3, r2, r3
 8040ee0:	43db      	mvns	r3, r3
 8040ee2:	69ba      	ldr	r2, [r7, #24]
 8040ee4:	4013      	ands	r3, r2
 8040ee6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8040ee8:	683b      	ldr	r3, [r7, #0]
 8040eea:	685b      	ldr	r3, [r3, #4]
 8040eec:	f003 0203 	and.w	r2, r3, #3
 8040ef0:	69fb      	ldr	r3, [r7, #28]
 8040ef2:	005b      	lsls	r3, r3, #1
 8040ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8040ef8:	69ba      	ldr	r2, [r7, #24]
 8040efa:	4313      	orrs	r3, r2
 8040efc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8040efe:	687b      	ldr	r3, [r7, #4]
 8040f00:	69ba      	ldr	r2, [r7, #24]
 8040f02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8040f04:	683b      	ldr	r3, [r7, #0]
 8040f06:	685b      	ldr	r3, [r3, #4]
 8040f08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8040f0c:	2b00      	cmp	r3, #0
 8040f0e:	f000 80a2 	beq.w	8041056 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8040f12:	2300      	movs	r3, #0
 8040f14:	60fb      	str	r3, [r7, #12]
 8040f16:	4b57      	ldr	r3, [pc, #348]	; (8041074 <HAL_GPIO_Init+0x2e8>)
 8040f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8040f1a:	4a56      	ldr	r2, [pc, #344]	; (8041074 <HAL_GPIO_Init+0x2e8>)
 8040f1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8040f20:	6453      	str	r3, [r2, #68]	; 0x44
 8040f22:	4b54      	ldr	r3, [pc, #336]	; (8041074 <HAL_GPIO_Init+0x2e8>)
 8040f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8040f26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8040f2a:	60fb      	str	r3, [r7, #12]
 8040f2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8040f2e:	4a52      	ldr	r2, [pc, #328]	; (8041078 <HAL_GPIO_Init+0x2ec>)
 8040f30:	69fb      	ldr	r3, [r7, #28]
 8040f32:	089b      	lsrs	r3, r3, #2
 8040f34:	3302      	adds	r3, #2
 8040f36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8040f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8040f3c:	69fb      	ldr	r3, [r7, #28]
 8040f3e:	f003 0303 	and.w	r3, r3, #3
 8040f42:	009b      	lsls	r3, r3, #2
 8040f44:	220f      	movs	r2, #15
 8040f46:	fa02 f303 	lsl.w	r3, r2, r3
 8040f4a:	43db      	mvns	r3, r3
 8040f4c:	69ba      	ldr	r2, [r7, #24]
 8040f4e:	4013      	ands	r3, r2
 8040f50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8040f52:	687b      	ldr	r3, [r7, #4]
 8040f54:	4a49      	ldr	r2, [pc, #292]	; (804107c <HAL_GPIO_Init+0x2f0>)
 8040f56:	4293      	cmp	r3, r2
 8040f58:	d019      	beq.n	8040f8e <HAL_GPIO_Init+0x202>
 8040f5a:	687b      	ldr	r3, [r7, #4]
 8040f5c:	4a48      	ldr	r2, [pc, #288]	; (8041080 <HAL_GPIO_Init+0x2f4>)
 8040f5e:	4293      	cmp	r3, r2
 8040f60:	d013      	beq.n	8040f8a <HAL_GPIO_Init+0x1fe>
 8040f62:	687b      	ldr	r3, [r7, #4]
 8040f64:	4a47      	ldr	r2, [pc, #284]	; (8041084 <HAL_GPIO_Init+0x2f8>)
 8040f66:	4293      	cmp	r3, r2
 8040f68:	d00d      	beq.n	8040f86 <HAL_GPIO_Init+0x1fa>
 8040f6a:	687b      	ldr	r3, [r7, #4]
 8040f6c:	4a46      	ldr	r2, [pc, #280]	; (8041088 <HAL_GPIO_Init+0x2fc>)
 8040f6e:	4293      	cmp	r3, r2
 8040f70:	d007      	beq.n	8040f82 <HAL_GPIO_Init+0x1f6>
 8040f72:	687b      	ldr	r3, [r7, #4]
 8040f74:	4a45      	ldr	r2, [pc, #276]	; (804108c <HAL_GPIO_Init+0x300>)
 8040f76:	4293      	cmp	r3, r2
 8040f78:	d101      	bne.n	8040f7e <HAL_GPIO_Init+0x1f2>
 8040f7a:	2304      	movs	r3, #4
 8040f7c:	e008      	b.n	8040f90 <HAL_GPIO_Init+0x204>
 8040f7e:	2307      	movs	r3, #7
 8040f80:	e006      	b.n	8040f90 <HAL_GPIO_Init+0x204>
 8040f82:	2303      	movs	r3, #3
 8040f84:	e004      	b.n	8040f90 <HAL_GPIO_Init+0x204>
 8040f86:	2302      	movs	r3, #2
 8040f88:	e002      	b.n	8040f90 <HAL_GPIO_Init+0x204>
 8040f8a:	2301      	movs	r3, #1
 8040f8c:	e000      	b.n	8040f90 <HAL_GPIO_Init+0x204>
 8040f8e:	2300      	movs	r3, #0
 8040f90:	69fa      	ldr	r2, [r7, #28]
 8040f92:	f002 0203 	and.w	r2, r2, #3
 8040f96:	0092      	lsls	r2, r2, #2
 8040f98:	4093      	lsls	r3, r2
 8040f9a:	69ba      	ldr	r2, [r7, #24]
 8040f9c:	4313      	orrs	r3, r2
 8040f9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8040fa0:	4935      	ldr	r1, [pc, #212]	; (8041078 <HAL_GPIO_Init+0x2ec>)
 8040fa2:	69fb      	ldr	r3, [r7, #28]
 8040fa4:	089b      	lsrs	r3, r3, #2
 8040fa6:	3302      	adds	r3, #2
 8040fa8:	69ba      	ldr	r2, [r7, #24]
 8040faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8040fae:	4b38      	ldr	r3, [pc, #224]	; (8041090 <HAL_GPIO_Init+0x304>)
 8040fb0:	689b      	ldr	r3, [r3, #8]
 8040fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8040fb4:	693b      	ldr	r3, [r7, #16]
 8040fb6:	43db      	mvns	r3, r3
 8040fb8:	69ba      	ldr	r2, [r7, #24]
 8040fba:	4013      	ands	r3, r2
 8040fbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8040fbe:	683b      	ldr	r3, [r7, #0]
 8040fc0:	685b      	ldr	r3, [r3, #4]
 8040fc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8040fc6:	2b00      	cmp	r3, #0
 8040fc8:	d003      	beq.n	8040fd2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8040fca:	69ba      	ldr	r2, [r7, #24]
 8040fcc:	693b      	ldr	r3, [r7, #16]
 8040fce:	4313      	orrs	r3, r2
 8040fd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8040fd2:	4a2f      	ldr	r2, [pc, #188]	; (8041090 <HAL_GPIO_Init+0x304>)
 8040fd4:	69bb      	ldr	r3, [r7, #24]
 8040fd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8040fd8:	4b2d      	ldr	r3, [pc, #180]	; (8041090 <HAL_GPIO_Init+0x304>)
 8040fda:	68db      	ldr	r3, [r3, #12]
 8040fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8040fde:	693b      	ldr	r3, [r7, #16]
 8040fe0:	43db      	mvns	r3, r3
 8040fe2:	69ba      	ldr	r2, [r7, #24]
 8040fe4:	4013      	ands	r3, r2
 8040fe6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8040fe8:	683b      	ldr	r3, [r7, #0]
 8040fea:	685b      	ldr	r3, [r3, #4]
 8040fec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8040ff0:	2b00      	cmp	r3, #0
 8040ff2:	d003      	beq.n	8040ffc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8040ff4:	69ba      	ldr	r2, [r7, #24]
 8040ff6:	693b      	ldr	r3, [r7, #16]
 8040ff8:	4313      	orrs	r3, r2
 8040ffa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8040ffc:	4a24      	ldr	r2, [pc, #144]	; (8041090 <HAL_GPIO_Init+0x304>)
 8040ffe:	69bb      	ldr	r3, [r7, #24]
 8041000:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8041002:	4b23      	ldr	r3, [pc, #140]	; (8041090 <HAL_GPIO_Init+0x304>)
 8041004:	685b      	ldr	r3, [r3, #4]
 8041006:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8041008:	693b      	ldr	r3, [r7, #16]
 804100a:	43db      	mvns	r3, r3
 804100c:	69ba      	ldr	r2, [r7, #24]
 804100e:	4013      	ands	r3, r2
 8041010:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8041012:	683b      	ldr	r3, [r7, #0]
 8041014:	685b      	ldr	r3, [r3, #4]
 8041016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 804101a:	2b00      	cmp	r3, #0
 804101c:	d003      	beq.n	8041026 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 804101e:	69ba      	ldr	r2, [r7, #24]
 8041020:	693b      	ldr	r3, [r7, #16]
 8041022:	4313      	orrs	r3, r2
 8041024:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8041026:	4a1a      	ldr	r2, [pc, #104]	; (8041090 <HAL_GPIO_Init+0x304>)
 8041028:	69bb      	ldr	r3, [r7, #24]
 804102a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 804102c:	4b18      	ldr	r3, [pc, #96]	; (8041090 <HAL_GPIO_Init+0x304>)
 804102e:	681b      	ldr	r3, [r3, #0]
 8041030:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8041032:	693b      	ldr	r3, [r7, #16]
 8041034:	43db      	mvns	r3, r3
 8041036:	69ba      	ldr	r2, [r7, #24]
 8041038:	4013      	ands	r3, r2
 804103a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 804103c:	683b      	ldr	r3, [r7, #0]
 804103e:	685b      	ldr	r3, [r3, #4]
 8041040:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8041044:	2b00      	cmp	r3, #0
 8041046:	d003      	beq.n	8041050 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8041048:	69ba      	ldr	r2, [r7, #24]
 804104a:	693b      	ldr	r3, [r7, #16]
 804104c:	4313      	orrs	r3, r2
 804104e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8041050:	4a0f      	ldr	r2, [pc, #60]	; (8041090 <HAL_GPIO_Init+0x304>)
 8041052:	69bb      	ldr	r3, [r7, #24]
 8041054:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8041056:	69fb      	ldr	r3, [r7, #28]
 8041058:	3301      	adds	r3, #1
 804105a:	61fb      	str	r3, [r7, #28]
 804105c:	69fb      	ldr	r3, [r7, #28]
 804105e:	2b0f      	cmp	r3, #15
 8041060:	f67f aea2 	bls.w	8040da8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8041064:	bf00      	nop
 8041066:	bf00      	nop
 8041068:	3724      	adds	r7, #36	; 0x24
 804106a:	46bd      	mov	sp, r7
 804106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041070:	4770      	bx	lr
 8041072:	bf00      	nop
 8041074:	40023800 	.word	0x40023800
 8041078:	40013800 	.word	0x40013800
 804107c:	40020000 	.word	0x40020000
 8041080:	40020400 	.word	0x40020400
 8041084:	40020800 	.word	0x40020800
 8041088:	40020c00 	.word	0x40020c00
 804108c:	40021000 	.word	0x40021000
 8041090:	40013c00 	.word	0x40013c00

08041094 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8041094:	b480      	push	{r7}
 8041096:	b083      	sub	sp, #12
 8041098:	af00      	add	r7, sp, #0
 804109a:	6078      	str	r0, [r7, #4]
 804109c:	460b      	mov	r3, r1
 804109e:	807b      	strh	r3, [r7, #2]
 80410a0:	4613      	mov	r3, r2
 80410a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80410a4:	787b      	ldrb	r3, [r7, #1]
 80410a6:	2b00      	cmp	r3, #0
 80410a8:	d003      	beq.n	80410b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80410aa:	887a      	ldrh	r2, [r7, #2]
 80410ac:	687b      	ldr	r3, [r7, #4]
 80410ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80410b0:	e003      	b.n	80410ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80410b2:	887b      	ldrh	r3, [r7, #2]
 80410b4:	041a      	lsls	r2, r3, #16
 80410b6:	687b      	ldr	r3, [r7, #4]
 80410b8:	619a      	str	r2, [r3, #24]
}
 80410ba:	bf00      	nop
 80410bc:	370c      	adds	r7, #12
 80410be:	46bd      	mov	sp, r7
 80410c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80410c4:	4770      	bx	lr

080410c6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80410c6:	b480      	push	{r7}
 80410c8:	b085      	sub	sp, #20
 80410ca:	af00      	add	r7, sp, #0
 80410cc:	6078      	str	r0, [r7, #4]
 80410ce:	460b      	mov	r3, r1
 80410d0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80410d2:	687b      	ldr	r3, [r7, #4]
 80410d4:	695b      	ldr	r3, [r3, #20]
 80410d6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80410d8:	887a      	ldrh	r2, [r7, #2]
 80410da:	68fb      	ldr	r3, [r7, #12]
 80410dc:	4013      	ands	r3, r2
 80410de:	041a      	lsls	r2, r3, #16
 80410e0:	68fb      	ldr	r3, [r7, #12]
 80410e2:	43d9      	mvns	r1, r3
 80410e4:	887b      	ldrh	r3, [r7, #2]
 80410e6:	400b      	ands	r3, r1
 80410e8:	431a      	orrs	r2, r3
 80410ea:	687b      	ldr	r3, [r7, #4]
 80410ec:	619a      	str	r2, [r3, #24]
}
 80410ee:	bf00      	nop
 80410f0:	3714      	adds	r7, #20
 80410f2:	46bd      	mov	sp, r7
 80410f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80410f8:	4770      	bx	lr
	...

080410fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80410fc:	b580      	push	{r7, lr}
 80410fe:	b086      	sub	sp, #24
 8041100:	af00      	add	r7, sp, #0
 8041102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8041104:	687b      	ldr	r3, [r7, #4]
 8041106:	2b00      	cmp	r3, #0
 8041108:	d101      	bne.n	804110e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 804110a:	2301      	movs	r3, #1
 804110c:	e267      	b.n	80415de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 804110e:	687b      	ldr	r3, [r7, #4]
 8041110:	681b      	ldr	r3, [r3, #0]
 8041112:	f003 0301 	and.w	r3, r3, #1
 8041116:	2b00      	cmp	r3, #0
 8041118:	d075      	beq.n	8041206 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 804111a:	4b88      	ldr	r3, [pc, #544]	; (804133c <HAL_RCC_OscConfig+0x240>)
 804111c:	689b      	ldr	r3, [r3, #8]
 804111e:	f003 030c 	and.w	r3, r3, #12
 8041122:	2b04      	cmp	r3, #4
 8041124:	d00c      	beq.n	8041140 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8041126:	4b85      	ldr	r3, [pc, #532]	; (804133c <HAL_RCC_OscConfig+0x240>)
 8041128:	689b      	ldr	r3, [r3, #8]
 804112a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 804112e:	2b08      	cmp	r3, #8
 8041130:	d112      	bne.n	8041158 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8041132:	4b82      	ldr	r3, [pc, #520]	; (804133c <HAL_RCC_OscConfig+0x240>)
 8041134:	685b      	ldr	r3, [r3, #4]
 8041136:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 804113a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 804113e:	d10b      	bne.n	8041158 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8041140:	4b7e      	ldr	r3, [pc, #504]	; (804133c <HAL_RCC_OscConfig+0x240>)
 8041142:	681b      	ldr	r3, [r3, #0]
 8041144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8041148:	2b00      	cmp	r3, #0
 804114a:	d05b      	beq.n	8041204 <HAL_RCC_OscConfig+0x108>
 804114c:	687b      	ldr	r3, [r7, #4]
 804114e:	685b      	ldr	r3, [r3, #4]
 8041150:	2b00      	cmp	r3, #0
 8041152:	d157      	bne.n	8041204 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8041154:	2301      	movs	r3, #1
 8041156:	e242      	b.n	80415de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8041158:	687b      	ldr	r3, [r7, #4]
 804115a:	685b      	ldr	r3, [r3, #4]
 804115c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8041160:	d106      	bne.n	8041170 <HAL_RCC_OscConfig+0x74>
 8041162:	4b76      	ldr	r3, [pc, #472]	; (804133c <HAL_RCC_OscConfig+0x240>)
 8041164:	681b      	ldr	r3, [r3, #0]
 8041166:	4a75      	ldr	r2, [pc, #468]	; (804133c <HAL_RCC_OscConfig+0x240>)
 8041168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 804116c:	6013      	str	r3, [r2, #0]
 804116e:	e01d      	b.n	80411ac <HAL_RCC_OscConfig+0xb0>
 8041170:	687b      	ldr	r3, [r7, #4]
 8041172:	685b      	ldr	r3, [r3, #4]
 8041174:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8041178:	d10c      	bne.n	8041194 <HAL_RCC_OscConfig+0x98>
 804117a:	4b70      	ldr	r3, [pc, #448]	; (804133c <HAL_RCC_OscConfig+0x240>)
 804117c:	681b      	ldr	r3, [r3, #0]
 804117e:	4a6f      	ldr	r2, [pc, #444]	; (804133c <HAL_RCC_OscConfig+0x240>)
 8041180:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8041184:	6013      	str	r3, [r2, #0]
 8041186:	4b6d      	ldr	r3, [pc, #436]	; (804133c <HAL_RCC_OscConfig+0x240>)
 8041188:	681b      	ldr	r3, [r3, #0]
 804118a:	4a6c      	ldr	r2, [pc, #432]	; (804133c <HAL_RCC_OscConfig+0x240>)
 804118c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8041190:	6013      	str	r3, [r2, #0]
 8041192:	e00b      	b.n	80411ac <HAL_RCC_OscConfig+0xb0>
 8041194:	4b69      	ldr	r3, [pc, #420]	; (804133c <HAL_RCC_OscConfig+0x240>)
 8041196:	681b      	ldr	r3, [r3, #0]
 8041198:	4a68      	ldr	r2, [pc, #416]	; (804133c <HAL_RCC_OscConfig+0x240>)
 804119a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 804119e:	6013      	str	r3, [r2, #0]
 80411a0:	4b66      	ldr	r3, [pc, #408]	; (804133c <HAL_RCC_OscConfig+0x240>)
 80411a2:	681b      	ldr	r3, [r3, #0]
 80411a4:	4a65      	ldr	r2, [pc, #404]	; (804133c <HAL_RCC_OscConfig+0x240>)
 80411a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80411aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80411ac:	687b      	ldr	r3, [r7, #4]
 80411ae:	685b      	ldr	r3, [r3, #4]
 80411b0:	2b00      	cmp	r3, #0
 80411b2:	d013      	beq.n	80411dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80411b4:	f7ff fcd4 	bl	8040b60 <HAL_GetTick>
 80411b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80411ba:	e008      	b.n	80411ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80411bc:	f7ff fcd0 	bl	8040b60 <HAL_GetTick>
 80411c0:	4602      	mov	r2, r0
 80411c2:	693b      	ldr	r3, [r7, #16]
 80411c4:	1ad3      	subs	r3, r2, r3
 80411c6:	2b64      	cmp	r3, #100	; 0x64
 80411c8:	d901      	bls.n	80411ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80411ca:	2303      	movs	r3, #3
 80411cc:	e207      	b.n	80415de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80411ce:	4b5b      	ldr	r3, [pc, #364]	; (804133c <HAL_RCC_OscConfig+0x240>)
 80411d0:	681b      	ldr	r3, [r3, #0]
 80411d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80411d6:	2b00      	cmp	r3, #0
 80411d8:	d0f0      	beq.n	80411bc <HAL_RCC_OscConfig+0xc0>
 80411da:	e014      	b.n	8041206 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80411dc:	f7ff fcc0 	bl	8040b60 <HAL_GetTick>
 80411e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80411e2:	e008      	b.n	80411f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80411e4:	f7ff fcbc 	bl	8040b60 <HAL_GetTick>
 80411e8:	4602      	mov	r2, r0
 80411ea:	693b      	ldr	r3, [r7, #16]
 80411ec:	1ad3      	subs	r3, r2, r3
 80411ee:	2b64      	cmp	r3, #100	; 0x64
 80411f0:	d901      	bls.n	80411f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80411f2:	2303      	movs	r3, #3
 80411f4:	e1f3      	b.n	80415de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80411f6:	4b51      	ldr	r3, [pc, #324]	; (804133c <HAL_RCC_OscConfig+0x240>)
 80411f8:	681b      	ldr	r3, [r3, #0]
 80411fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80411fe:	2b00      	cmp	r3, #0
 8041200:	d1f0      	bne.n	80411e4 <HAL_RCC_OscConfig+0xe8>
 8041202:	e000      	b.n	8041206 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8041204:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8041206:	687b      	ldr	r3, [r7, #4]
 8041208:	681b      	ldr	r3, [r3, #0]
 804120a:	f003 0302 	and.w	r3, r3, #2
 804120e:	2b00      	cmp	r3, #0
 8041210:	d063      	beq.n	80412da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8041212:	4b4a      	ldr	r3, [pc, #296]	; (804133c <HAL_RCC_OscConfig+0x240>)
 8041214:	689b      	ldr	r3, [r3, #8]
 8041216:	f003 030c 	and.w	r3, r3, #12
 804121a:	2b00      	cmp	r3, #0
 804121c:	d00b      	beq.n	8041236 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 804121e:	4b47      	ldr	r3, [pc, #284]	; (804133c <HAL_RCC_OscConfig+0x240>)
 8041220:	689b      	ldr	r3, [r3, #8]
 8041222:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8041226:	2b08      	cmp	r3, #8
 8041228:	d11c      	bne.n	8041264 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 804122a:	4b44      	ldr	r3, [pc, #272]	; (804133c <HAL_RCC_OscConfig+0x240>)
 804122c:	685b      	ldr	r3, [r3, #4]
 804122e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8041232:	2b00      	cmp	r3, #0
 8041234:	d116      	bne.n	8041264 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8041236:	4b41      	ldr	r3, [pc, #260]	; (804133c <HAL_RCC_OscConfig+0x240>)
 8041238:	681b      	ldr	r3, [r3, #0]
 804123a:	f003 0302 	and.w	r3, r3, #2
 804123e:	2b00      	cmp	r3, #0
 8041240:	d005      	beq.n	804124e <HAL_RCC_OscConfig+0x152>
 8041242:	687b      	ldr	r3, [r7, #4]
 8041244:	68db      	ldr	r3, [r3, #12]
 8041246:	2b01      	cmp	r3, #1
 8041248:	d001      	beq.n	804124e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 804124a:	2301      	movs	r3, #1
 804124c:	e1c7      	b.n	80415de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 804124e:	4b3b      	ldr	r3, [pc, #236]	; (804133c <HAL_RCC_OscConfig+0x240>)
 8041250:	681b      	ldr	r3, [r3, #0]
 8041252:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8041256:	687b      	ldr	r3, [r7, #4]
 8041258:	691b      	ldr	r3, [r3, #16]
 804125a:	00db      	lsls	r3, r3, #3
 804125c:	4937      	ldr	r1, [pc, #220]	; (804133c <HAL_RCC_OscConfig+0x240>)
 804125e:	4313      	orrs	r3, r2
 8041260:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8041262:	e03a      	b.n	80412da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8041264:	687b      	ldr	r3, [r7, #4]
 8041266:	68db      	ldr	r3, [r3, #12]
 8041268:	2b00      	cmp	r3, #0
 804126a:	d020      	beq.n	80412ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 804126c:	4b34      	ldr	r3, [pc, #208]	; (8041340 <HAL_RCC_OscConfig+0x244>)
 804126e:	2201      	movs	r2, #1
 8041270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041272:	f7ff fc75 	bl	8040b60 <HAL_GetTick>
 8041276:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8041278:	e008      	b.n	804128c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 804127a:	f7ff fc71 	bl	8040b60 <HAL_GetTick>
 804127e:	4602      	mov	r2, r0
 8041280:	693b      	ldr	r3, [r7, #16]
 8041282:	1ad3      	subs	r3, r2, r3
 8041284:	2b02      	cmp	r3, #2
 8041286:	d901      	bls.n	804128c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8041288:	2303      	movs	r3, #3
 804128a:	e1a8      	b.n	80415de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 804128c:	4b2b      	ldr	r3, [pc, #172]	; (804133c <HAL_RCC_OscConfig+0x240>)
 804128e:	681b      	ldr	r3, [r3, #0]
 8041290:	f003 0302 	and.w	r3, r3, #2
 8041294:	2b00      	cmp	r3, #0
 8041296:	d0f0      	beq.n	804127a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8041298:	4b28      	ldr	r3, [pc, #160]	; (804133c <HAL_RCC_OscConfig+0x240>)
 804129a:	681b      	ldr	r3, [r3, #0]
 804129c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80412a0:	687b      	ldr	r3, [r7, #4]
 80412a2:	691b      	ldr	r3, [r3, #16]
 80412a4:	00db      	lsls	r3, r3, #3
 80412a6:	4925      	ldr	r1, [pc, #148]	; (804133c <HAL_RCC_OscConfig+0x240>)
 80412a8:	4313      	orrs	r3, r2
 80412aa:	600b      	str	r3, [r1, #0]
 80412ac:	e015      	b.n	80412da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80412ae:	4b24      	ldr	r3, [pc, #144]	; (8041340 <HAL_RCC_OscConfig+0x244>)
 80412b0:	2200      	movs	r2, #0
 80412b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80412b4:	f7ff fc54 	bl	8040b60 <HAL_GetTick>
 80412b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80412ba:	e008      	b.n	80412ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80412bc:	f7ff fc50 	bl	8040b60 <HAL_GetTick>
 80412c0:	4602      	mov	r2, r0
 80412c2:	693b      	ldr	r3, [r7, #16]
 80412c4:	1ad3      	subs	r3, r2, r3
 80412c6:	2b02      	cmp	r3, #2
 80412c8:	d901      	bls.n	80412ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80412ca:	2303      	movs	r3, #3
 80412cc:	e187      	b.n	80415de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80412ce:	4b1b      	ldr	r3, [pc, #108]	; (804133c <HAL_RCC_OscConfig+0x240>)
 80412d0:	681b      	ldr	r3, [r3, #0]
 80412d2:	f003 0302 	and.w	r3, r3, #2
 80412d6:	2b00      	cmp	r3, #0
 80412d8:	d1f0      	bne.n	80412bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80412da:	687b      	ldr	r3, [r7, #4]
 80412dc:	681b      	ldr	r3, [r3, #0]
 80412de:	f003 0308 	and.w	r3, r3, #8
 80412e2:	2b00      	cmp	r3, #0
 80412e4:	d036      	beq.n	8041354 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80412e6:	687b      	ldr	r3, [r7, #4]
 80412e8:	695b      	ldr	r3, [r3, #20]
 80412ea:	2b00      	cmp	r3, #0
 80412ec:	d016      	beq.n	804131c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80412ee:	4b15      	ldr	r3, [pc, #84]	; (8041344 <HAL_RCC_OscConfig+0x248>)
 80412f0:	2201      	movs	r2, #1
 80412f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80412f4:	f7ff fc34 	bl	8040b60 <HAL_GetTick>
 80412f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80412fa:	e008      	b.n	804130e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80412fc:	f7ff fc30 	bl	8040b60 <HAL_GetTick>
 8041300:	4602      	mov	r2, r0
 8041302:	693b      	ldr	r3, [r7, #16]
 8041304:	1ad3      	subs	r3, r2, r3
 8041306:	2b02      	cmp	r3, #2
 8041308:	d901      	bls.n	804130e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 804130a:	2303      	movs	r3, #3
 804130c:	e167      	b.n	80415de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 804130e:	4b0b      	ldr	r3, [pc, #44]	; (804133c <HAL_RCC_OscConfig+0x240>)
 8041310:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8041312:	f003 0302 	and.w	r3, r3, #2
 8041316:	2b00      	cmp	r3, #0
 8041318:	d0f0      	beq.n	80412fc <HAL_RCC_OscConfig+0x200>
 804131a:	e01b      	b.n	8041354 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 804131c:	4b09      	ldr	r3, [pc, #36]	; (8041344 <HAL_RCC_OscConfig+0x248>)
 804131e:	2200      	movs	r2, #0
 8041320:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8041322:	f7ff fc1d 	bl	8040b60 <HAL_GetTick>
 8041326:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8041328:	e00e      	b.n	8041348 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 804132a:	f7ff fc19 	bl	8040b60 <HAL_GetTick>
 804132e:	4602      	mov	r2, r0
 8041330:	693b      	ldr	r3, [r7, #16]
 8041332:	1ad3      	subs	r3, r2, r3
 8041334:	2b02      	cmp	r3, #2
 8041336:	d907      	bls.n	8041348 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8041338:	2303      	movs	r3, #3
 804133a:	e150      	b.n	80415de <HAL_RCC_OscConfig+0x4e2>
 804133c:	40023800 	.word	0x40023800
 8041340:	42470000 	.word	0x42470000
 8041344:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8041348:	4b88      	ldr	r3, [pc, #544]	; (804156c <HAL_RCC_OscConfig+0x470>)
 804134a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 804134c:	f003 0302 	and.w	r3, r3, #2
 8041350:	2b00      	cmp	r3, #0
 8041352:	d1ea      	bne.n	804132a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8041354:	687b      	ldr	r3, [r7, #4]
 8041356:	681b      	ldr	r3, [r3, #0]
 8041358:	f003 0304 	and.w	r3, r3, #4
 804135c:	2b00      	cmp	r3, #0
 804135e:	f000 8097 	beq.w	8041490 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8041362:	2300      	movs	r3, #0
 8041364:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8041366:	4b81      	ldr	r3, [pc, #516]	; (804156c <HAL_RCC_OscConfig+0x470>)
 8041368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804136a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 804136e:	2b00      	cmp	r3, #0
 8041370:	d10f      	bne.n	8041392 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8041372:	2300      	movs	r3, #0
 8041374:	60bb      	str	r3, [r7, #8]
 8041376:	4b7d      	ldr	r3, [pc, #500]	; (804156c <HAL_RCC_OscConfig+0x470>)
 8041378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804137a:	4a7c      	ldr	r2, [pc, #496]	; (804156c <HAL_RCC_OscConfig+0x470>)
 804137c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8041380:	6413      	str	r3, [r2, #64]	; 0x40
 8041382:	4b7a      	ldr	r3, [pc, #488]	; (804156c <HAL_RCC_OscConfig+0x470>)
 8041384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 804138a:	60bb      	str	r3, [r7, #8]
 804138c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 804138e:	2301      	movs	r3, #1
 8041390:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8041392:	4b77      	ldr	r3, [pc, #476]	; (8041570 <HAL_RCC_OscConfig+0x474>)
 8041394:	681b      	ldr	r3, [r3, #0]
 8041396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 804139a:	2b00      	cmp	r3, #0
 804139c:	d118      	bne.n	80413d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 804139e:	4b74      	ldr	r3, [pc, #464]	; (8041570 <HAL_RCC_OscConfig+0x474>)
 80413a0:	681b      	ldr	r3, [r3, #0]
 80413a2:	4a73      	ldr	r2, [pc, #460]	; (8041570 <HAL_RCC_OscConfig+0x474>)
 80413a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80413a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80413aa:	f7ff fbd9 	bl	8040b60 <HAL_GetTick>
 80413ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80413b0:	e008      	b.n	80413c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80413b2:	f7ff fbd5 	bl	8040b60 <HAL_GetTick>
 80413b6:	4602      	mov	r2, r0
 80413b8:	693b      	ldr	r3, [r7, #16]
 80413ba:	1ad3      	subs	r3, r2, r3
 80413bc:	2b02      	cmp	r3, #2
 80413be:	d901      	bls.n	80413c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80413c0:	2303      	movs	r3, #3
 80413c2:	e10c      	b.n	80415de <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80413c4:	4b6a      	ldr	r3, [pc, #424]	; (8041570 <HAL_RCC_OscConfig+0x474>)
 80413c6:	681b      	ldr	r3, [r3, #0]
 80413c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80413cc:	2b00      	cmp	r3, #0
 80413ce:	d0f0      	beq.n	80413b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80413d0:	687b      	ldr	r3, [r7, #4]
 80413d2:	689b      	ldr	r3, [r3, #8]
 80413d4:	2b01      	cmp	r3, #1
 80413d6:	d106      	bne.n	80413e6 <HAL_RCC_OscConfig+0x2ea>
 80413d8:	4b64      	ldr	r3, [pc, #400]	; (804156c <HAL_RCC_OscConfig+0x470>)
 80413da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80413dc:	4a63      	ldr	r2, [pc, #396]	; (804156c <HAL_RCC_OscConfig+0x470>)
 80413de:	f043 0301 	orr.w	r3, r3, #1
 80413e2:	6713      	str	r3, [r2, #112]	; 0x70
 80413e4:	e01c      	b.n	8041420 <HAL_RCC_OscConfig+0x324>
 80413e6:	687b      	ldr	r3, [r7, #4]
 80413e8:	689b      	ldr	r3, [r3, #8]
 80413ea:	2b05      	cmp	r3, #5
 80413ec:	d10c      	bne.n	8041408 <HAL_RCC_OscConfig+0x30c>
 80413ee:	4b5f      	ldr	r3, [pc, #380]	; (804156c <HAL_RCC_OscConfig+0x470>)
 80413f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80413f2:	4a5e      	ldr	r2, [pc, #376]	; (804156c <HAL_RCC_OscConfig+0x470>)
 80413f4:	f043 0304 	orr.w	r3, r3, #4
 80413f8:	6713      	str	r3, [r2, #112]	; 0x70
 80413fa:	4b5c      	ldr	r3, [pc, #368]	; (804156c <HAL_RCC_OscConfig+0x470>)
 80413fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80413fe:	4a5b      	ldr	r2, [pc, #364]	; (804156c <HAL_RCC_OscConfig+0x470>)
 8041400:	f043 0301 	orr.w	r3, r3, #1
 8041404:	6713      	str	r3, [r2, #112]	; 0x70
 8041406:	e00b      	b.n	8041420 <HAL_RCC_OscConfig+0x324>
 8041408:	4b58      	ldr	r3, [pc, #352]	; (804156c <HAL_RCC_OscConfig+0x470>)
 804140a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804140c:	4a57      	ldr	r2, [pc, #348]	; (804156c <HAL_RCC_OscConfig+0x470>)
 804140e:	f023 0301 	bic.w	r3, r3, #1
 8041412:	6713      	str	r3, [r2, #112]	; 0x70
 8041414:	4b55      	ldr	r3, [pc, #340]	; (804156c <HAL_RCC_OscConfig+0x470>)
 8041416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041418:	4a54      	ldr	r2, [pc, #336]	; (804156c <HAL_RCC_OscConfig+0x470>)
 804141a:	f023 0304 	bic.w	r3, r3, #4
 804141e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8041420:	687b      	ldr	r3, [r7, #4]
 8041422:	689b      	ldr	r3, [r3, #8]
 8041424:	2b00      	cmp	r3, #0
 8041426:	d015      	beq.n	8041454 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8041428:	f7ff fb9a 	bl	8040b60 <HAL_GetTick>
 804142c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 804142e:	e00a      	b.n	8041446 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8041430:	f7ff fb96 	bl	8040b60 <HAL_GetTick>
 8041434:	4602      	mov	r2, r0
 8041436:	693b      	ldr	r3, [r7, #16]
 8041438:	1ad3      	subs	r3, r2, r3
 804143a:	f241 3288 	movw	r2, #5000	; 0x1388
 804143e:	4293      	cmp	r3, r2
 8041440:	d901      	bls.n	8041446 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8041442:	2303      	movs	r3, #3
 8041444:	e0cb      	b.n	80415de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8041446:	4b49      	ldr	r3, [pc, #292]	; (804156c <HAL_RCC_OscConfig+0x470>)
 8041448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804144a:	f003 0302 	and.w	r3, r3, #2
 804144e:	2b00      	cmp	r3, #0
 8041450:	d0ee      	beq.n	8041430 <HAL_RCC_OscConfig+0x334>
 8041452:	e014      	b.n	804147e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8041454:	f7ff fb84 	bl	8040b60 <HAL_GetTick>
 8041458:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 804145a:	e00a      	b.n	8041472 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 804145c:	f7ff fb80 	bl	8040b60 <HAL_GetTick>
 8041460:	4602      	mov	r2, r0
 8041462:	693b      	ldr	r3, [r7, #16]
 8041464:	1ad3      	subs	r3, r2, r3
 8041466:	f241 3288 	movw	r2, #5000	; 0x1388
 804146a:	4293      	cmp	r3, r2
 804146c:	d901      	bls.n	8041472 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 804146e:	2303      	movs	r3, #3
 8041470:	e0b5      	b.n	80415de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8041472:	4b3e      	ldr	r3, [pc, #248]	; (804156c <HAL_RCC_OscConfig+0x470>)
 8041474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041476:	f003 0302 	and.w	r3, r3, #2
 804147a:	2b00      	cmp	r3, #0
 804147c:	d1ee      	bne.n	804145c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 804147e:	7dfb      	ldrb	r3, [r7, #23]
 8041480:	2b01      	cmp	r3, #1
 8041482:	d105      	bne.n	8041490 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8041484:	4b39      	ldr	r3, [pc, #228]	; (804156c <HAL_RCC_OscConfig+0x470>)
 8041486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041488:	4a38      	ldr	r2, [pc, #224]	; (804156c <HAL_RCC_OscConfig+0x470>)
 804148a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 804148e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8041490:	687b      	ldr	r3, [r7, #4]
 8041492:	699b      	ldr	r3, [r3, #24]
 8041494:	2b00      	cmp	r3, #0
 8041496:	f000 80a1 	beq.w	80415dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 804149a:	4b34      	ldr	r3, [pc, #208]	; (804156c <HAL_RCC_OscConfig+0x470>)
 804149c:	689b      	ldr	r3, [r3, #8]
 804149e:	f003 030c 	and.w	r3, r3, #12
 80414a2:	2b08      	cmp	r3, #8
 80414a4:	d05c      	beq.n	8041560 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80414a6:	687b      	ldr	r3, [r7, #4]
 80414a8:	699b      	ldr	r3, [r3, #24]
 80414aa:	2b02      	cmp	r3, #2
 80414ac:	d141      	bne.n	8041532 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80414ae:	4b31      	ldr	r3, [pc, #196]	; (8041574 <HAL_RCC_OscConfig+0x478>)
 80414b0:	2200      	movs	r2, #0
 80414b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80414b4:	f7ff fb54 	bl	8040b60 <HAL_GetTick>
 80414b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80414ba:	e008      	b.n	80414ce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80414bc:	f7ff fb50 	bl	8040b60 <HAL_GetTick>
 80414c0:	4602      	mov	r2, r0
 80414c2:	693b      	ldr	r3, [r7, #16]
 80414c4:	1ad3      	subs	r3, r2, r3
 80414c6:	2b02      	cmp	r3, #2
 80414c8:	d901      	bls.n	80414ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80414ca:	2303      	movs	r3, #3
 80414cc:	e087      	b.n	80415de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80414ce:	4b27      	ldr	r3, [pc, #156]	; (804156c <HAL_RCC_OscConfig+0x470>)
 80414d0:	681b      	ldr	r3, [r3, #0]
 80414d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80414d6:	2b00      	cmp	r3, #0
 80414d8:	d1f0      	bne.n	80414bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80414da:	687b      	ldr	r3, [r7, #4]
 80414dc:	69da      	ldr	r2, [r3, #28]
 80414de:	687b      	ldr	r3, [r7, #4]
 80414e0:	6a1b      	ldr	r3, [r3, #32]
 80414e2:	431a      	orrs	r2, r3
 80414e4:	687b      	ldr	r3, [r7, #4]
 80414e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80414e8:	019b      	lsls	r3, r3, #6
 80414ea:	431a      	orrs	r2, r3
 80414ec:	687b      	ldr	r3, [r7, #4]
 80414ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80414f0:	085b      	lsrs	r3, r3, #1
 80414f2:	3b01      	subs	r3, #1
 80414f4:	041b      	lsls	r3, r3, #16
 80414f6:	431a      	orrs	r2, r3
 80414f8:	687b      	ldr	r3, [r7, #4]
 80414fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80414fc:	061b      	lsls	r3, r3, #24
 80414fe:	491b      	ldr	r1, [pc, #108]	; (804156c <HAL_RCC_OscConfig+0x470>)
 8041500:	4313      	orrs	r3, r2
 8041502:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8041504:	4b1b      	ldr	r3, [pc, #108]	; (8041574 <HAL_RCC_OscConfig+0x478>)
 8041506:	2201      	movs	r2, #1
 8041508:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 804150a:	f7ff fb29 	bl	8040b60 <HAL_GetTick>
 804150e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8041510:	e008      	b.n	8041524 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8041512:	f7ff fb25 	bl	8040b60 <HAL_GetTick>
 8041516:	4602      	mov	r2, r0
 8041518:	693b      	ldr	r3, [r7, #16]
 804151a:	1ad3      	subs	r3, r2, r3
 804151c:	2b02      	cmp	r3, #2
 804151e:	d901      	bls.n	8041524 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8041520:	2303      	movs	r3, #3
 8041522:	e05c      	b.n	80415de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8041524:	4b11      	ldr	r3, [pc, #68]	; (804156c <HAL_RCC_OscConfig+0x470>)
 8041526:	681b      	ldr	r3, [r3, #0]
 8041528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 804152c:	2b00      	cmp	r3, #0
 804152e:	d0f0      	beq.n	8041512 <HAL_RCC_OscConfig+0x416>
 8041530:	e054      	b.n	80415dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8041532:	4b10      	ldr	r3, [pc, #64]	; (8041574 <HAL_RCC_OscConfig+0x478>)
 8041534:	2200      	movs	r2, #0
 8041536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8041538:	f7ff fb12 	bl	8040b60 <HAL_GetTick>
 804153c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 804153e:	e008      	b.n	8041552 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8041540:	f7ff fb0e 	bl	8040b60 <HAL_GetTick>
 8041544:	4602      	mov	r2, r0
 8041546:	693b      	ldr	r3, [r7, #16]
 8041548:	1ad3      	subs	r3, r2, r3
 804154a:	2b02      	cmp	r3, #2
 804154c:	d901      	bls.n	8041552 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 804154e:	2303      	movs	r3, #3
 8041550:	e045      	b.n	80415de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8041552:	4b06      	ldr	r3, [pc, #24]	; (804156c <HAL_RCC_OscConfig+0x470>)
 8041554:	681b      	ldr	r3, [r3, #0]
 8041556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 804155a:	2b00      	cmp	r3, #0
 804155c:	d1f0      	bne.n	8041540 <HAL_RCC_OscConfig+0x444>
 804155e:	e03d      	b.n	80415dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8041560:	687b      	ldr	r3, [r7, #4]
 8041562:	699b      	ldr	r3, [r3, #24]
 8041564:	2b01      	cmp	r3, #1
 8041566:	d107      	bne.n	8041578 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8041568:	2301      	movs	r3, #1
 804156a:	e038      	b.n	80415de <HAL_RCC_OscConfig+0x4e2>
 804156c:	40023800 	.word	0x40023800
 8041570:	40007000 	.word	0x40007000
 8041574:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8041578:	4b1b      	ldr	r3, [pc, #108]	; (80415e8 <HAL_RCC_OscConfig+0x4ec>)
 804157a:	685b      	ldr	r3, [r3, #4]
 804157c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 804157e:	687b      	ldr	r3, [r7, #4]
 8041580:	699b      	ldr	r3, [r3, #24]
 8041582:	2b01      	cmp	r3, #1
 8041584:	d028      	beq.n	80415d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8041586:	68fb      	ldr	r3, [r7, #12]
 8041588:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 804158c:	687b      	ldr	r3, [r7, #4]
 804158e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8041590:	429a      	cmp	r2, r3
 8041592:	d121      	bne.n	80415d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8041594:	68fb      	ldr	r3, [r7, #12]
 8041596:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 804159a:	687b      	ldr	r3, [r7, #4]
 804159c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 804159e:	429a      	cmp	r2, r3
 80415a0:	d11a      	bne.n	80415d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80415a2:	68fa      	ldr	r2, [r7, #12]
 80415a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80415a8:	4013      	ands	r3, r2
 80415aa:	687a      	ldr	r2, [r7, #4]
 80415ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80415ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80415b0:	4293      	cmp	r3, r2
 80415b2:	d111      	bne.n	80415d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80415b4:	68fb      	ldr	r3, [r7, #12]
 80415b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80415ba:	687b      	ldr	r3, [r7, #4]
 80415bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80415be:	085b      	lsrs	r3, r3, #1
 80415c0:	3b01      	subs	r3, #1
 80415c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80415c4:	429a      	cmp	r2, r3
 80415c6:	d107      	bne.n	80415d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80415c8:	68fb      	ldr	r3, [r7, #12]
 80415ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80415ce:	687b      	ldr	r3, [r7, #4]
 80415d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80415d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80415d4:	429a      	cmp	r2, r3
 80415d6:	d001      	beq.n	80415dc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80415d8:	2301      	movs	r3, #1
 80415da:	e000      	b.n	80415de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80415dc:	2300      	movs	r3, #0
}
 80415de:	4618      	mov	r0, r3
 80415e0:	3718      	adds	r7, #24
 80415e2:	46bd      	mov	sp, r7
 80415e4:	bd80      	pop	{r7, pc}
 80415e6:	bf00      	nop
 80415e8:	40023800 	.word	0x40023800

080415ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80415ec:	b580      	push	{r7, lr}
 80415ee:	b084      	sub	sp, #16
 80415f0:	af00      	add	r7, sp, #0
 80415f2:	6078      	str	r0, [r7, #4]
 80415f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80415f6:	687b      	ldr	r3, [r7, #4]
 80415f8:	2b00      	cmp	r3, #0
 80415fa:	d101      	bne.n	8041600 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80415fc:	2301      	movs	r3, #1
 80415fe:	e0cc      	b.n	804179a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8041600:	4b68      	ldr	r3, [pc, #416]	; (80417a4 <HAL_RCC_ClockConfig+0x1b8>)
 8041602:	681b      	ldr	r3, [r3, #0]
 8041604:	f003 0307 	and.w	r3, r3, #7
 8041608:	683a      	ldr	r2, [r7, #0]
 804160a:	429a      	cmp	r2, r3
 804160c:	d90c      	bls.n	8041628 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 804160e:	4b65      	ldr	r3, [pc, #404]	; (80417a4 <HAL_RCC_ClockConfig+0x1b8>)
 8041610:	683a      	ldr	r2, [r7, #0]
 8041612:	b2d2      	uxtb	r2, r2
 8041614:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8041616:	4b63      	ldr	r3, [pc, #396]	; (80417a4 <HAL_RCC_ClockConfig+0x1b8>)
 8041618:	681b      	ldr	r3, [r3, #0]
 804161a:	f003 0307 	and.w	r3, r3, #7
 804161e:	683a      	ldr	r2, [r7, #0]
 8041620:	429a      	cmp	r2, r3
 8041622:	d001      	beq.n	8041628 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8041624:	2301      	movs	r3, #1
 8041626:	e0b8      	b.n	804179a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8041628:	687b      	ldr	r3, [r7, #4]
 804162a:	681b      	ldr	r3, [r3, #0]
 804162c:	f003 0302 	and.w	r3, r3, #2
 8041630:	2b00      	cmp	r3, #0
 8041632:	d020      	beq.n	8041676 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8041634:	687b      	ldr	r3, [r7, #4]
 8041636:	681b      	ldr	r3, [r3, #0]
 8041638:	f003 0304 	and.w	r3, r3, #4
 804163c:	2b00      	cmp	r3, #0
 804163e:	d005      	beq.n	804164c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8041640:	4b59      	ldr	r3, [pc, #356]	; (80417a8 <HAL_RCC_ClockConfig+0x1bc>)
 8041642:	689b      	ldr	r3, [r3, #8]
 8041644:	4a58      	ldr	r2, [pc, #352]	; (80417a8 <HAL_RCC_ClockConfig+0x1bc>)
 8041646:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 804164a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 804164c:	687b      	ldr	r3, [r7, #4]
 804164e:	681b      	ldr	r3, [r3, #0]
 8041650:	f003 0308 	and.w	r3, r3, #8
 8041654:	2b00      	cmp	r3, #0
 8041656:	d005      	beq.n	8041664 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8041658:	4b53      	ldr	r3, [pc, #332]	; (80417a8 <HAL_RCC_ClockConfig+0x1bc>)
 804165a:	689b      	ldr	r3, [r3, #8]
 804165c:	4a52      	ldr	r2, [pc, #328]	; (80417a8 <HAL_RCC_ClockConfig+0x1bc>)
 804165e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8041662:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8041664:	4b50      	ldr	r3, [pc, #320]	; (80417a8 <HAL_RCC_ClockConfig+0x1bc>)
 8041666:	689b      	ldr	r3, [r3, #8]
 8041668:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 804166c:	687b      	ldr	r3, [r7, #4]
 804166e:	689b      	ldr	r3, [r3, #8]
 8041670:	494d      	ldr	r1, [pc, #308]	; (80417a8 <HAL_RCC_ClockConfig+0x1bc>)
 8041672:	4313      	orrs	r3, r2
 8041674:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8041676:	687b      	ldr	r3, [r7, #4]
 8041678:	681b      	ldr	r3, [r3, #0]
 804167a:	f003 0301 	and.w	r3, r3, #1
 804167e:	2b00      	cmp	r3, #0
 8041680:	d044      	beq.n	804170c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8041682:	687b      	ldr	r3, [r7, #4]
 8041684:	685b      	ldr	r3, [r3, #4]
 8041686:	2b01      	cmp	r3, #1
 8041688:	d107      	bne.n	804169a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 804168a:	4b47      	ldr	r3, [pc, #284]	; (80417a8 <HAL_RCC_ClockConfig+0x1bc>)
 804168c:	681b      	ldr	r3, [r3, #0]
 804168e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8041692:	2b00      	cmp	r3, #0
 8041694:	d119      	bne.n	80416ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8041696:	2301      	movs	r3, #1
 8041698:	e07f      	b.n	804179a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 804169a:	687b      	ldr	r3, [r7, #4]
 804169c:	685b      	ldr	r3, [r3, #4]
 804169e:	2b02      	cmp	r3, #2
 80416a0:	d003      	beq.n	80416aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80416a2:	687b      	ldr	r3, [r7, #4]
 80416a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80416a6:	2b03      	cmp	r3, #3
 80416a8:	d107      	bne.n	80416ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80416aa:	4b3f      	ldr	r3, [pc, #252]	; (80417a8 <HAL_RCC_ClockConfig+0x1bc>)
 80416ac:	681b      	ldr	r3, [r3, #0]
 80416ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80416b2:	2b00      	cmp	r3, #0
 80416b4:	d109      	bne.n	80416ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80416b6:	2301      	movs	r3, #1
 80416b8:	e06f      	b.n	804179a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80416ba:	4b3b      	ldr	r3, [pc, #236]	; (80417a8 <HAL_RCC_ClockConfig+0x1bc>)
 80416bc:	681b      	ldr	r3, [r3, #0]
 80416be:	f003 0302 	and.w	r3, r3, #2
 80416c2:	2b00      	cmp	r3, #0
 80416c4:	d101      	bne.n	80416ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80416c6:	2301      	movs	r3, #1
 80416c8:	e067      	b.n	804179a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80416ca:	4b37      	ldr	r3, [pc, #220]	; (80417a8 <HAL_RCC_ClockConfig+0x1bc>)
 80416cc:	689b      	ldr	r3, [r3, #8]
 80416ce:	f023 0203 	bic.w	r2, r3, #3
 80416d2:	687b      	ldr	r3, [r7, #4]
 80416d4:	685b      	ldr	r3, [r3, #4]
 80416d6:	4934      	ldr	r1, [pc, #208]	; (80417a8 <HAL_RCC_ClockConfig+0x1bc>)
 80416d8:	4313      	orrs	r3, r2
 80416da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80416dc:	f7ff fa40 	bl	8040b60 <HAL_GetTick>
 80416e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80416e2:	e00a      	b.n	80416fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80416e4:	f7ff fa3c 	bl	8040b60 <HAL_GetTick>
 80416e8:	4602      	mov	r2, r0
 80416ea:	68fb      	ldr	r3, [r7, #12]
 80416ec:	1ad3      	subs	r3, r2, r3
 80416ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80416f2:	4293      	cmp	r3, r2
 80416f4:	d901      	bls.n	80416fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80416f6:	2303      	movs	r3, #3
 80416f8:	e04f      	b.n	804179a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80416fa:	4b2b      	ldr	r3, [pc, #172]	; (80417a8 <HAL_RCC_ClockConfig+0x1bc>)
 80416fc:	689b      	ldr	r3, [r3, #8]
 80416fe:	f003 020c 	and.w	r2, r3, #12
 8041702:	687b      	ldr	r3, [r7, #4]
 8041704:	685b      	ldr	r3, [r3, #4]
 8041706:	009b      	lsls	r3, r3, #2
 8041708:	429a      	cmp	r2, r3
 804170a:	d1eb      	bne.n	80416e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 804170c:	4b25      	ldr	r3, [pc, #148]	; (80417a4 <HAL_RCC_ClockConfig+0x1b8>)
 804170e:	681b      	ldr	r3, [r3, #0]
 8041710:	f003 0307 	and.w	r3, r3, #7
 8041714:	683a      	ldr	r2, [r7, #0]
 8041716:	429a      	cmp	r2, r3
 8041718:	d20c      	bcs.n	8041734 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 804171a:	4b22      	ldr	r3, [pc, #136]	; (80417a4 <HAL_RCC_ClockConfig+0x1b8>)
 804171c:	683a      	ldr	r2, [r7, #0]
 804171e:	b2d2      	uxtb	r2, r2
 8041720:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8041722:	4b20      	ldr	r3, [pc, #128]	; (80417a4 <HAL_RCC_ClockConfig+0x1b8>)
 8041724:	681b      	ldr	r3, [r3, #0]
 8041726:	f003 0307 	and.w	r3, r3, #7
 804172a:	683a      	ldr	r2, [r7, #0]
 804172c:	429a      	cmp	r2, r3
 804172e:	d001      	beq.n	8041734 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8041730:	2301      	movs	r3, #1
 8041732:	e032      	b.n	804179a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8041734:	687b      	ldr	r3, [r7, #4]
 8041736:	681b      	ldr	r3, [r3, #0]
 8041738:	f003 0304 	and.w	r3, r3, #4
 804173c:	2b00      	cmp	r3, #0
 804173e:	d008      	beq.n	8041752 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8041740:	4b19      	ldr	r3, [pc, #100]	; (80417a8 <HAL_RCC_ClockConfig+0x1bc>)
 8041742:	689b      	ldr	r3, [r3, #8]
 8041744:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8041748:	687b      	ldr	r3, [r7, #4]
 804174a:	68db      	ldr	r3, [r3, #12]
 804174c:	4916      	ldr	r1, [pc, #88]	; (80417a8 <HAL_RCC_ClockConfig+0x1bc>)
 804174e:	4313      	orrs	r3, r2
 8041750:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8041752:	687b      	ldr	r3, [r7, #4]
 8041754:	681b      	ldr	r3, [r3, #0]
 8041756:	f003 0308 	and.w	r3, r3, #8
 804175a:	2b00      	cmp	r3, #0
 804175c:	d009      	beq.n	8041772 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 804175e:	4b12      	ldr	r3, [pc, #72]	; (80417a8 <HAL_RCC_ClockConfig+0x1bc>)
 8041760:	689b      	ldr	r3, [r3, #8]
 8041762:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8041766:	687b      	ldr	r3, [r7, #4]
 8041768:	691b      	ldr	r3, [r3, #16]
 804176a:	00db      	lsls	r3, r3, #3
 804176c:	490e      	ldr	r1, [pc, #56]	; (80417a8 <HAL_RCC_ClockConfig+0x1bc>)
 804176e:	4313      	orrs	r3, r2
 8041770:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8041772:	f000 f821 	bl	80417b8 <HAL_RCC_GetSysClockFreq>
 8041776:	4602      	mov	r2, r0
 8041778:	4b0b      	ldr	r3, [pc, #44]	; (80417a8 <HAL_RCC_ClockConfig+0x1bc>)
 804177a:	689b      	ldr	r3, [r3, #8]
 804177c:	091b      	lsrs	r3, r3, #4
 804177e:	f003 030f 	and.w	r3, r3, #15
 8041782:	490a      	ldr	r1, [pc, #40]	; (80417ac <HAL_RCC_ClockConfig+0x1c0>)
 8041784:	5ccb      	ldrb	r3, [r1, r3]
 8041786:	fa22 f303 	lsr.w	r3, r2, r3
 804178a:	4a09      	ldr	r2, [pc, #36]	; (80417b0 <HAL_RCC_ClockConfig+0x1c4>)
 804178c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 804178e:	4b09      	ldr	r3, [pc, #36]	; (80417b4 <HAL_RCC_ClockConfig+0x1c8>)
 8041790:	681b      	ldr	r3, [r3, #0]
 8041792:	4618      	mov	r0, r3
 8041794:	f7ff f9a0 	bl	8040ad8 <HAL_InitTick>

  return HAL_OK;
 8041798:	2300      	movs	r3, #0
}
 804179a:	4618      	mov	r0, r3
 804179c:	3710      	adds	r7, #16
 804179e:	46bd      	mov	sp, r7
 80417a0:	bd80      	pop	{r7, pc}
 80417a2:	bf00      	nop
 80417a4:	40023c00 	.word	0x40023c00
 80417a8:	40023800 	.word	0x40023800
 80417ac:	08042fb0 	.word	0x08042fb0
 80417b0:	20000000 	.word	0x20000000
 80417b4:	20000004 	.word	0x20000004

080417b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80417b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80417bc:	b090      	sub	sp, #64	; 0x40
 80417be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80417c0:	2300      	movs	r3, #0
 80417c2:	637b      	str	r3, [r7, #52]	; 0x34
 80417c4:	2300      	movs	r3, #0
 80417c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80417c8:	2300      	movs	r3, #0
 80417ca:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80417cc:	2300      	movs	r3, #0
 80417ce:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80417d0:	4b59      	ldr	r3, [pc, #356]	; (8041938 <HAL_RCC_GetSysClockFreq+0x180>)
 80417d2:	689b      	ldr	r3, [r3, #8]
 80417d4:	f003 030c 	and.w	r3, r3, #12
 80417d8:	2b08      	cmp	r3, #8
 80417da:	d00d      	beq.n	80417f8 <HAL_RCC_GetSysClockFreq+0x40>
 80417dc:	2b08      	cmp	r3, #8
 80417de:	f200 80a1 	bhi.w	8041924 <HAL_RCC_GetSysClockFreq+0x16c>
 80417e2:	2b00      	cmp	r3, #0
 80417e4:	d002      	beq.n	80417ec <HAL_RCC_GetSysClockFreq+0x34>
 80417e6:	2b04      	cmp	r3, #4
 80417e8:	d003      	beq.n	80417f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80417ea:	e09b      	b.n	8041924 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80417ec:	4b53      	ldr	r3, [pc, #332]	; (804193c <HAL_RCC_GetSysClockFreq+0x184>)
 80417ee:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80417f0:	e09b      	b.n	804192a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80417f2:	4b53      	ldr	r3, [pc, #332]	; (8041940 <HAL_RCC_GetSysClockFreq+0x188>)
 80417f4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80417f6:	e098      	b.n	804192a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80417f8:	4b4f      	ldr	r3, [pc, #316]	; (8041938 <HAL_RCC_GetSysClockFreq+0x180>)
 80417fa:	685b      	ldr	r3, [r3, #4]
 80417fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8041800:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8041802:	4b4d      	ldr	r3, [pc, #308]	; (8041938 <HAL_RCC_GetSysClockFreq+0x180>)
 8041804:	685b      	ldr	r3, [r3, #4]
 8041806:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 804180a:	2b00      	cmp	r3, #0
 804180c:	d028      	beq.n	8041860 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 804180e:	4b4a      	ldr	r3, [pc, #296]	; (8041938 <HAL_RCC_GetSysClockFreq+0x180>)
 8041810:	685b      	ldr	r3, [r3, #4]
 8041812:	099b      	lsrs	r3, r3, #6
 8041814:	2200      	movs	r2, #0
 8041816:	623b      	str	r3, [r7, #32]
 8041818:	627a      	str	r2, [r7, #36]	; 0x24
 804181a:	6a3b      	ldr	r3, [r7, #32]
 804181c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8041820:	2100      	movs	r1, #0
 8041822:	4b47      	ldr	r3, [pc, #284]	; (8041940 <HAL_RCC_GetSysClockFreq+0x188>)
 8041824:	fb03 f201 	mul.w	r2, r3, r1
 8041828:	2300      	movs	r3, #0
 804182a:	fb00 f303 	mul.w	r3, r0, r3
 804182e:	4413      	add	r3, r2
 8041830:	4a43      	ldr	r2, [pc, #268]	; (8041940 <HAL_RCC_GetSysClockFreq+0x188>)
 8041832:	fba0 1202 	umull	r1, r2, r0, r2
 8041836:	62fa      	str	r2, [r7, #44]	; 0x2c
 8041838:	460a      	mov	r2, r1
 804183a:	62ba      	str	r2, [r7, #40]	; 0x28
 804183c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 804183e:	4413      	add	r3, r2
 8041840:	62fb      	str	r3, [r7, #44]	; 0x2c
 8041842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8041844:	2200      	movs	r2, #0
 8041846:	61bb      	str	r3, [r7, #24]
 8041848:	61fa      	str	r2, [r7, #28]
 804184a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 804184e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8041852:	f7fe fd15 	bl	8040280 <__aeabi_uldivmod>
 8041856:	4602      	mov	r2, r0
 8041858:	460b      	mov	r3, r1
 804185a:	4613      	mov	r3, r2
 804185c:	63fb      	str	r3, [r7, #60]	; 0x3c
 804185e:	e053      	b.n	8041908 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8041860:	4b35      	ldr	r3, [pc, #212]	; (8041938 <HAL_RCC_GetSysClockFreq+0x180>)
 8041862:	685b      	ldr	r3, [r3, #4]
 8041864:	099b      	lsrs	r3, r3, #6
 8041866:	2200      	movs	r2, #0
 8041868:	613b      	str	r3, [r7, #16]
 804186a:	617a      	str	r2, [r7, #20]
 804186c:	693b      	ldr	r3, [r7, #16]
 804186e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8041872:	f04f 0b00 	mov.w	fp, #0
 8041876:	4652      	mov	r2, sl
 8041878:	465b      	mov	r3, fp
 804187a:	f04f 0000 	mov.w	r0, #0
 804187e:	f04f 0100 	mov.w	r1, #0
 8041882:	0159      	lsls	r1, r3, #5
 8041884:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8041888:	0150      	lsls	r0, r2, #5
 804188a:	4602      	mov	r2, r0
 804188c:	460b      	mov	r3, r1
 804188e:	ebb2 080a 	subs.w	r8, r2, sl
 8041892:	eb63 090b 	sbc.w	r9, r3, fp
 8041896:	f04f 0200 	mov.w	r2, #0
 804189a:	f04f 0300 	mov.w	r3, #0
 804189e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80418a2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80418a6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80418aa:	ebb2 0408 	subs.w	r4, r2, r8
 80418ae:	eb63 0509 	sbc.w	r5, r3, r9
 80418b2:	f04f 0200 	mov.w	r2, #0
 80418b6:	f04f 0300 	mov.w	r3, #0
 80418ba:	00eb      	lsls	r3, r5, #3
 80418bc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80418c0:	00e2      	lsls	r2, r4, #3
 80418c2:	4614      	mov	r4, r2
 80418c4:	461d      	mov	r5, r3
 80418c6:	eb14 030a 	adds.w	r3, r4, sl
 80418ca:	603b      	str	r3, [r7, #0]
 80418cc:	eb45 030b 	adc.w	r3, r5, fp
 80418d0:	607b      	str	r3, [r7, #4]
 80418d2:	f04f 0200 	mov.w	r2, #0
 80418d6:	f04f 0300 	mov.w	r3, #0
 80418da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80418de:	4629      	mov	r1, r5
 80418e0:	028b      	lsls	r3, r1, #10
 80418e2:	4621      	mov	r1, r4
 80418e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80418e8:	4621      	mov	r1, r4
 80418ea:	028a      	lsls	r2, r1, #10
 80418ec:	4610      	mov	r0, r2
 80418ee:	4619      	mov	r1, r3
 80418f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80418f2:	2200      	movs	r2, #0
 80418f4:	60bb      	str	r3, [r7, #8]
 80418f6:	60fa      	str	r2, [r7, #12]
 80418f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80418fc:	f7fe fcc0 	bl	8040280 <__aeabi_uldivmod>
 8041900:	4602      	mov	r2, r0
 8041902:	460b      	mov	r3, r1
 8041904:	4613      	mov	r3, r2
 8041906:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8041908:	4b0b      	ldr	r3, [pc, #44]	; (8041938 <HAL_RCC_GetSysClockFreq+0x180>)
 804190a:	685b      	ldr	r3, [r3, #4]
 804190c:	0c1b      	lsrs	r3, r3, #16
 804190e:	f003 0303 	and.w	r3, r3, #3
 8041912:	3301      	adds	r3, #1
 8041914:	005b      	lsls	r3, r3, #1
 8041916:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8041918:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 804191a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 804191c:	fbb2 f3f3 	udiv	r3, r2, r3
 8041920:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8041922:	e002      	b.n	804192a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8041924:	4b05      	ldr	r3, [pc, #20]	; (804193c <HAL_RCC_GetSysClockFreq+0x184>)
 8041926:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8041928:	bf00      	nop
    }
  }
  return sysclockfreq;
 804192a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 804192c:	4618      	mov	r0, r3
 804192e:	3740      	adds	r7, #64	; 0x40
 8041930:	46bd      	mov	sp, r7
 8041932:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8041936:	bf00      	nop
 8041938:	40023800 	.word	0x40023800
 804193c:	00f42400 	.word	0x00f42400
 8041940:	017d7840 	.word	0x017d7840

08041944 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8041944:	b480      	push	{r7}
 8041946:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8041948:	4b03      	ldr	r3, [pc, #12]	; (8041958 <HAL_RCC_GetHCLKFreq+0x14>)
 804194a:	681b      	ldr	r3, [r3, #0]
}
 804194c:	4618      	mov	r0, r3
 804194e:	46bd      	mov	sp, r7
 8041950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041954:	4770      	bx	lr
 8041956:	bf00      	nop
 8041958:	20000000 	.word	0x20000000

0804195c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 804195c:	b580      	push	{r7, lr}
 804195e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8041960:	f7ff fff0 	bl	8041944 <HAL_RCC_GetHCLKFreq>
 8041964:	4602      	mov	r2, r0
 8041966:	4b05      	ldr	r3, [pc, #20]	; (804197c <HAL_RCC_GetPCLK1Freq+0x20>)
 8041968:	689b      	ldr	r3, [r3, #8]
 804196a:	0a9b      	lsrs	r3, r3, #10
 804196c:	f003 0307 	and.w	r3, r3, #7
 8041970:	4903      	ldr	r1, [pc, #12]	; (8041980 <HAL_RCC_GetPCLK1Freq+0x24>)
 8041972:	5ccb      	ldrb	r3, [r1, r3]
 8041974:	fa22 f303 	lsr.w	r3, r2, r3
}
 8041978:	4618      	mov	r0, r3
 804197a:	bd80      	pop	{r7, pc}
 804197c:	40023800 	.word	0x40023800
 8041980:	08042fc0 	.word	0x08042fc0

08041984 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8041984:	b580      	push	{r7, lr}
 8041986:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8041988:	f7ff ffdc 	bl	8041944 <HAL_RCC_GetHCLKFreq>
 804198c:	4602      	mov	r2, r0
 804198e:	4b05      	ldr	r3, [pc, #20]	; (80419a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8041990:	689b      	ldr	r3, [r3, #8]
 8041992:	0b5b      	lsrs	r3, r3, #13
 8041994:	f003 0307 	and.w	r3, r3, #7
 8041998:	4903      	ldr	r1, [pc, #12]	; (80419a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 804199a:	5ccb      	ldrb	r3, [r1, r3]
 804199c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80419a0:	4618      	mov	r0, r3
 80419a2:	bd80      	pop	{r7, pc}
 80419a4:	40023800 	.word	0x40023800
 80419a8:	08042fc0 	.word	0x08042fc0

080419ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80419ac:	b580      	push	{r7, lr}
 80419ae:	b082      	sub	sp, #8
 80419b0:	af00      	add	r7, sp, #0
 80419b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80419b4:	687b      	ldr	r3, [r7, #4]
 80419b6:	2b00      	cmp	r3, #0
 80419b8:	d101      	bne.n	80419be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80419ba:	2301      	movs	r3, #1
 80419bc:	e03f      	b.n	8041a3e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80419be:	687b      	ldr	r3, [r7, #4]
 80419c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80419c4:	b2db      	uxtb	r3, r3
 80419c6:	2b00      	cmp	r3, #0
 80419c8:	d106      	bne.n	80419d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80419ca:	687b      	ldr	r3, [r7, #4]
 80419cc:	2200      	movs	r2, #0
 80419ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80419d2:	6878      	ldr	r0, [r7, #4]
 80419d4:	f7fe ff08 	bl	80407e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80419d8:	687b      	ldr	r3, [r7, #4]
 80419da:	2224      	movs	r2, #36	; 0x24
 80419dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80419e0:	687b      	ldr	r3, [r7, #4]
 80419e2:	681b      	ldr	r3, [r3, #0]
 80419e4:	68da      	ldr	r2, [r3, #12]
 80419e6:	687b      	ldr	r3, [r7, #4]
 80419e8:	681b      	ldr	r3, [r3, #0]
 80419ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80419ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80419f0:	6878      	ldr	r0, [r7, #4]
 80419f2:	f000 f929 	bl	8041c48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80419f6:	687b      	ldr	r3, [r7, #4]
 80419f8:	681b      	ldr	r3, [r3, #0]
 80419fa:	691a      	ldr	r2, [r3, #16]
 80419fc:	687b      	ldr	r3, [r7, #4]
 80419fe:	681b      	ldr	r3, [r3, #0]
 8041a00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8041a04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8041a06:	687b      	ldr	r3, [r7, #4]
 8041a08:	681b      	ldr	r3, [r3, #0]
 8041a0a:	695a      	ldr	r2, [r3, #20]
 8041a0c:	687b      	ldr	r3, [r7, #4]
 8041a0e:	681b      	ldr	r3, [r3, #0]
 8041a10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8041a14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8041a16:	687b      	ldr	r3, [r7, #4]
 8041a18:	681b      	ldr	r3, [r3, #0]
 8041a1a:	68da      	ldr	r2, [r3, #12]
 8041a1c:	687b      	ldr	r3, [r7, #4]
 8041a1e:	681b      	ldr	r3, [r3, #0]
 8041a20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8041a24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8041a26:	687b      	ldr	r3, [r7, #4]
 8041a28:	2200      	movs	r2, #0
 8041a2a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8041a2c:	687b      	ldr	r3, [r7, #4]
 8041a2e:	2220      	movs	r2, #32
 8041a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8041a34:	687b      	ldr	r3, [r7, #4]
 8041a36:	2220      	movs	r2, #32
 8041a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8041a3c:	2300      	movs	r3, #0
}
 8041a3e:	4618      	mov	r0, r3
 8041a40:	3708      	adds	r7, #8
 8041a42:	46bd      	mov	sp, r7
 8041a44:	bd80      	pop	{r7, pc}

08041a46 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8041a46:	b580      	push	{r7, lr}
 8041a48:	b08a      	sub	sp, #40	; 0x28
 8041a4a:	af02      	add	r7, sp, #8
 8041a4c:	60f8      	str	r0, [r7, #12]
 8041a4e:	60b9      	str	r1, [r7, #8]
 8041a50:	603b      	str	r3, [r7, #0]
 8041a52:	4613      	mov	r3, r2
 8041a54:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8041a56:	2300      	movs	r3, #0
 8041a58:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8041a5a:	68fb      	ldr	r3, [r7, #12]
 8041a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8041a60:	b2db      	uxtb	r3, r3
 8041a62:	2b20      	cmp	r3, #32
 8041a64:	d17c      	bne.n	8041b60 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8041a66:	68bb      	ldr	r3, [r7, #8]
 8041a68:	2b00      	cmp	r3, #0
 8041a6a:	d002      	beq.n	8041a72 <HAL_UART_Transmit+0x2c>
 8041a6c:	88fb      	ldrh	r3, [r7, #6]
 8041a6e:	2b00      	cmp	r3, #0
 8041a70:	d101      	bne.n	8041a76 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8041a72:	2301      	movs	r3, #1
 8041a74:	e075      	b.n	8041b62 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8041a76:	68fb      	ldr	r3, [r7, #12]
 8041a78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8041a7c:	2b01      	cmp	r3, #1
 8041a7e:	d101      	bne.n	8041a84 <HAL_UART_Transmit+0x3e>
 8041a80:	2302      	movs	r3, #2
 8041a82:	e06e      	b.n	8041b62 <HAL_UART_Transmit+0x11c>
 8041a84:	68fb      	ldr	r3, [r7, #12]
 8041a86:	2201      	movs	r2, #1
 8041a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8041a8c:	68fb      	ldr	r3, [r7, #12]
 8041a8e:	2200      	movs	r2, #0
 8041a90:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8041a92:	68fb      	ldr	r3, [r7, #12]
 8041a94:	2221      	movs	r2, #33	; 0x21
 8041a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8041a9a:	f7ff f861 	bl	8040b60 <HAL_GetTick>
 8041a9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8041aa0:	68fb      	ldr	r3, [r7, #12]
 8041aa2:	88fa      	ldrh	r2, [r7, #6]
 8041aa4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8041aa6:	68fb      	ldr	r3, [r7, #12]
 8041aa8:	88fa      	ldrh	r2, [r7, #6]
 8041aaa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8041aac:	68fb      	ldr	r3, [r7, #12]
 8041aae:	689b      	ldr	r3, [r3, #8]
 8041ab0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8041ab4:	d108      	bne.n	8041ac8 <HAL_UART_Transmit+0x82>
 8041ab6:	68fb      	ldr	r3, [r7, #12]
 8041ab8:	691b      	ldr	r3, [r3, #16]
 8041aba:	2b00      	cmp	r3, #0
 8041abc:	d104      	bne.n	8041ac8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8041abe:	2300      	movs	r3, #0
 8041ac0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8041ac2:	68bb      	ldr	r3, [r7, #8]
 8041ac4:	61bb      	str	r3, [r7, #24]
 8041ac6:	e003      	b.n	8041ad0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8041ac8:	68bb      	ldr	r3, [r7, #8]
 8041aca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8041acc:	2300      	movs	r3, #0
 8041ace:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8041ad0:	68fb      	ldr	r3, [r7, #12]
 8041ad2:	2200      	movs	r2, #0
 8041ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8041ad8:	e02a      	b.n	8041b30 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8041ada:	683b      	ldr	r3, [r7, #0]
 8041adc:	9300      	str	r3, [sp, #0]
 8041ade:	697b      	ldr	r3, [r7, #20]
 8041ae0:	2200      	movs	r2, #0
 8041ae2:	2180      	movs	r1, #128	; 0x80
 8041ae4:	68f8      	ldr	r0, [r7, #12]
 8041ae6:	f000 f840 	bl	8041b6a <UART_WaitOnFlagUntilTimeout>
 8041aea:	4603      	mov	r3, r0
 8041aec:	2b00      	cmp	r3, #0
 8041aee:	d001      	beq.n	8041af4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8041af0:	2303      	movs	r3, #3
 8041af2:	e036      	b.n	8041b62 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8041af4:	69fb      	ldr	r3, [r7, #28]
 8041af6:	2b00      	cmp	r3, #0
 8041af8:	d10b      	bne.n	8041b12 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8041afa:	69bb      	ldr	r3, [r7, #24]
 8041afc:	881b      	ldrh	r3, [r3, #0]
 8041afe:	461a      	mov	r2, r3
 8041b00:	68fb      	ldr	r3, [r7, #12]
 8041b02:	681b      	ldr	r3, [r3, #0]
 8041b04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8041b08:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8041b0a:	69bb      	ldr	r3, [r7, #24]
 8041b0c:	3302      	adds	r3, #2
 8041b0e:	61bb      	str	r3, [r7, #24]
 8041b10:	e007      	b.n	8041b22 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8041b12:	69fb      	ldr	r3, [r7, #28]
 8041b14:	781a      	ldrb	r2, [r3, #0]
 8041b16:	68fb      	ldr	r3, [r7, #12]
 8041b18:	681b      	ldr	r3, [r3, #0]
 8041b1a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8041b1c:	69fb      	ldr	r3, [r7, #28]
 8041b1e:	3301      	adds	r3, #1
 8041b20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8041b22:	68fb      	ldr	r3, [r7, #12]
 8041b24:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8041b26:	b29b      	uxth	r3, r3
 8041b28:	3b01      	subs	r3, #1
 8041b2a:	b29a      	uxth	r2, r3
 8041b2c:	68fb      	ldr	r3, [r7, #12]
 8041b2e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8041b30:	68fb      	ldr	r3, [r7, #12]
 8041b32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8041b34:	b29b      	uxth	r3, r3
 8041b36:	2b00      	cmp	r3, #0
 8041b38:	d1cf      	bne.n	8041ada <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8041b3a:	683b      	ldr	r3, [r7, #0]
 8041b3c:	9300      	str	r3, [sp, #0]
 8041b3e:	697b      	ldr	r3, [r7, #20]
 8041b40:	2200      	movs	r2, #0
 8041b42:	2140      	movs	r1, #64	; 0x40
 8041b44:	68f8      	ldr	r0, [r7, #12]
 8041b46:	f000 f810 	bl	8041b6a <UART_WaitOnFlagUntilTimeout>
 8041b4a:	4603      	mov	r3, r0
 8041b4c:	2b00      	cmp	r3, #0
 8041b4e:	d001      	beq.n	8041b54 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8041b50:	2303      	movs	r3, #3
 8041b52:	e006      	b.n	8041b62 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8041b54:	68fb      	ldr	r3, [r7, #12]
 8041b56:	2220      	movs	r2, #32
 8041b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8041b5c:	2300      	movs	r3, #0
 8041b5e:	e000      	b.n	8041b62 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8041b60:	2302      	movs	r3, #2
  }
}
 8041b62:	4618      	mov	r0, r3
 8041b64:	3720      	adds	r7, #32
 8041b66:	46bd      	mov	sp, r7
 8041b68:	bd80      	pop	{r7, pc}

08041b6a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8041b6a:	b580      	push	{r7, lr}
 8041b6c:	b090      	sub	sp, #64	; 0x40
 8041b6e:	af00      	add	r7, sp, #0
 8041b70:	60f8      	str	r0, [r7, #12]
 8041b72:	60b9      	str	r1, [r7, #8]
 8041b74:	603b      	str	r3, [r7, #0]
 8041b76:	4613      	mov	r3, r2
 8041b78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8041b7a:	e050      	b.n	8041c1e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8041b7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8041b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8041b82:	d04c      	beq.n	8041c1e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8041b84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8041b86:	2b00      	cmp	r3, #0
 8041b88:	d007      	beq.n	8041b9a <UART_WaitOnFlagUntilTimeout+0x30>
 8041b8a:	f7fe ffe9 	bl	8040b60 <HAL_GetTick>
 8041b8e:	4602      	mov	r2, r0
 8041b90:	683b      	ldr	r3, [r7, #0]
 8041b92:	1ad3      	subs	r3, r2, r3
 8041b94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8041b96:	429a      	cmp	r2, r3
 8041b98:	d241      	bcs.n	8041c1e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8041b9a:	68fb      	ldr	r3, [r7, #12]
 8041b9c:	681b      	ldr	r3, [r3, #0]
 8041b9e:	330c      	adds	r3, #12
 8041ba0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8041ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8041ba4:	e853 3f00 	ldrex	r3, [r3]
 8041ba8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8041baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8041bac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8041bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8041bb2:	68fb      	ldr	r3, [r7, #12]
 8041bb4:	681b      	ldr	r3, [r3, #0]
 8041bb6:	330c      	adds	r3, #12
 8041bb8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8041bba:	637a      	str	r2, [r7, #52]	; 0x34
 8041bbc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8041bbe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8041bc0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8041bc2:	e841 2300 	strex	r3, r2, [r1]
 8041bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8041bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8041bca:	2b00      	cmp	r3, #0
 8041bcc:	d1e5      	bne.n	8041b9a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8041bce:	68fb      	ldr	r3, [r7, #12]
 8041bd0:	681b      	ldr	r3, [r3, #0]
 8041bd2:	3314      	adds	r3, #20
 8041bd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8041bd6:	697b      	ldr	r3, [r7, #20]
 8041bd8:	e853 3f00 	ldrex	r3, [r3]
 8041bdc:	613b      	str	r3, [r7, #16]
   return(result);
 8041bde:	693b      	ldr	r3, [r7, #16]
 8041be0:	f023 0301 	bic.w	r3, r3, #1
 8041be4:	63bb      	str	r3, [r7, #56]	; 0x38
 8041be6:	68fb      	ldr	r3, [r7, #12]
 8041be8:	681b      	ldr	r3, [r3, #0]
 8041bea:	3314      	adds	r3, #20
 8041bec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8041bee:	623a      	str	r2, [r7, #32]
 8041bf0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8041bf2:	69f9      	ldr	r1, [r7, #28]
 8041bf4:	6a3a      	ldr	r2, [r7, #32]
 8041bf6:	e841 2300 	strex	r3, r2, [r1]
 8041bfa:	61bb      	str	r3, [r7, #24]
   return(result);
 8041bfc:	69bb      	ldr	r3, [r7, #24]
 8041bfe:	2b00      	cmp	r3, #0
 8041c00:	d1e5      	bne.n	8041bce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8041c02:	68fb      	ldr	r3, [r7, #12]
 8041c04:	2220      	movs	r2, #32
 8041c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8041c0a:	68fb      	ldr	r3, [r7, #12]
 8041c0c:	2220      	movs	r2, #32
 8041c0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8041c12:	68fb      	ldr	r3, [r7, #12]
 8041c14:	2200      	movs	r2, #0
 8041c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8041c1a:	2303      	movs	r3, #3
 8041c1c:	e00f      	b.n	8041c3e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8041c1e:	68fb      	ldr	r3, [r7, #12]
 8041c20:	681b      	ldr	r3, [r3, #0]
 8041c22:	681a      	ldr	r2, [r3, #0]
 8041c24:	68bb      	ldr	r3, [r7, #8]
 8041c26:	4013      	ands	r3, r2
 8041c28:	68ba      	ldr	r2, [r7, #8]
 8041c2a:	429a      	cmp	r2, r3
 8041c2c:	bf0c      	ite	eq
 8041c2e:	2301      	moveq	r3, #1
 8041c30:	2300      	movne	r3, #0
 8041c32:	b2db      	uxtb	r3, r3
 8041c34:	461a      	mov	r2, r3
 8041c36:	79fb      	ldrb	r3, [r7, #7]
 8041c38:	429a      	cmp	r2, r3
 8041c3a:	d09f      	beq.n	8041b7c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8041c3c:	2300      	movs	r3, #0
}
 8041c3e:	4618      	mov	r0, r3
 8041c40:	3740      	adds	r7, #64	; 0x40
 8041c42:	46bd      	mov	sp, r7
 8041c44:	bd80      	pop	{r7, pc}
	...

08041c48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8041c48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8041c4c:	b0c0      	sub	sp, #256	; 0x100
 8041c4e:	af00      	add	r7, sp, #0
 8041c50:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8041c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8041c58:	681b      	ldr	r3, [r3, #0]
 8041c5a:	691b      	ldr	r3, [r3, #16]
 8041c5c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8041c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8041c64:	68d9      	ldr	r1, [r3, #12]
 8041c66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8041c6a:	681a      	ldr	r2, [r3, #0]
 8041c6c:	ea40 0301 	orr.w	r3, r0, r1
 8041c70:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8041c72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8041c76:	689a      	ldr	r2, [r3, #8]
 8041c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8041c7c:	691b      	ldr	r3, [r3, #16]
 8041c7e:	431a      	orrs	r2, r3
 8041c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8041c84:	695b      	ldr	r3, [r3, #20]
 8041c86:	431a      	orrs	r2, r3
 8041c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8041c8c:	69db      	ldr	r3, [r3, #28]
 8041c8e:	4313      	orrs	r3, r2
 8041c90:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8041c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8041c98:	681b      	ldr	r3, [r3, #0]
 8041c9a:	68db      	ldr	r3, [r3, #12]
 8041c9c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8041ca0:	f021 010c 	bic.w	r1, r1, #12
 8041ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8041ca8:	681a      	ldr	r2, [r3, #0]
 8041caa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8041cae:	430b      	orrs	r3, r1
 8041cb0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8041cb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8041cb6:	681b      	ldr	r3, [r3, #0]
 8041cb8:	695b      	ldr	r3, [r3, #20]
 8041cba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8041cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8041cc2:	6999      	ldr	r1, [r3, #24]
 8041cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8041cc8:	681a      	ldr	r2, [r3, #0]
 8041cca:	ea40 0301 	orr.w	r3, r0, r1
 8041cce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8041cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8041cd4:	681a      	ldr	r2, [r3, #0]
 8041cd6:	4b8f      	ldr	r3, [pc, #572]	; (8041f14 <UART_SetConfig+0x2cc>)
 8041cd8:	429a      	cmp	r2, r3
 8041cda:	d005      	beq.n	8041ce8 <UART_SetConfig+0xa0>
 8041cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8041ce0:	681a      	ldr	r2, [r3, #0]
 8041ce2:	4b8d      	ldr	r3, [pc, #564]	; (8041f18 <UART_SetConfig+0x2d0>)
 8041ce4:	429a      	cmp	r2, r3
 8041ce6:	d104      	bne.n	8041cf2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8041ce8:	f7ff fe4c 	bl	8041984 <HAL_RCC_GetPCLK2Freq>
 8041cec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8041cf0:	e003      	b.n	8041cfa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8041cf2:	f7ff fe33 	bl	804195c <HAL_RCC_GetPCLK1Freq>
 8041cf6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8041cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8041cfe:	69db      	ldr	r3, [r3, #28]
 8041d00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8041d04:	f040 810c 	bne.w	8041f20 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8041d08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8041d0c:	2200      	movs	r2, #0
 8041d0e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8041d12:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8041d16:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8041d1a:	4622      	mov	r2, r4
 8041d1c:	462b      	mov	r3, r5
 8041d1e:	1891      	adds	r1, r2, r2
 8041d20:	65b9      	str	r1, [r7, #88]	; 0x58
 8041d22:	415b      	adcs	r3, r3
 8041d24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8041d26:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8041d2a:	4621      	mov	r1, r4
 8041d2c:	eb12 0801 	adds.w	r8, r2, r1
 8041d30:	4629      	mov	r1, r5
 8041d32:	eb43 0901 	adc.w	r9, r3, r1
 8041d36:	f04f 0200 	mov.w	r2, #0
 8041d3a:	f04f 0300 	mov.w	r3, #0
 8041d3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8041d42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8041d46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8041d4a:	4690      	mov	r8, r2
 8041d4c:	4699      	mov	r9, r3
 8041d4e:	4623      	mov	r3, r4
 8041d50:	eb18 0303 	adds.w	r3, r8, r3
 8041d54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8041d58:	462b      	mov	r3, r5
 8041d5a:	eb49 0303 	adc.w	r3, r9, r3
 8041d5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8041d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8041d66:	685b      	ldr	r3, [r3, #4]
 8041d68:	2200      	movs	r2, #0
 8041d6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8041d6e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8041d72:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8041d76:	460b      	mov	r3, r1
 8041d78:	18db      	adds	r3, r3, r3
 8041d7a:	653b      	str	r3, [r7, #80]	; 0x50
 8041d7c:	4613      	mov	r3, r2
 8041d7e:	eb42 0303 	adc.w	r3, r2, r3
 8041d82:	657b      	str	r3, [r7, #84]	; 0x54
 8041d84:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8041d88:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8041d8c:	f7fe fa78 	bl	8040280 <__aeabi_uldivmod>
 8041d90:	4602      	mov	r2, r0
 8041d92:	460b      	mov	r3, r1
 8041d94:	4b61      	ldr	r3, [pc, #388]	; (8041f1c <UART_SetConfig+0x2d4>)
 8041d96:	fba3 2302 	umull	r2, r3, r3, r2
 8041d9a:	095b      	lsrs	r3, r3, #5
 8041d9c:	011c      	lsls	r4, r3, #4
 8041d9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8041da2:	2200      	movs	r2, #0
 8041da4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8041da8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8041dac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8041db0:	4642      	mov	r2, r8
 8041db2:	464b      	mov	r3, r9
 8041db4:	1891      	adds	r1, r2, r2
 8041db6:	64b9      	str	r1, [r7, #72]	; 0x48
 8041db8:	415b      	adcs	r3, r3
 8041dba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8041dbc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8041dc0:	4641      	mov	r1, r8
 8041dc2:	eb12 0a01 	adds.w	sl, r2, r1
 8041dc6:	4649      	mov	r1, r9
 8041dc8:	eb43 0b01 	adc.w	fp, r3, r1
 8041dcc:	f04f 0200 	mov.w	r2, #0
 8041dd0:	f04f 0300 	mov.w	r3, #0
 8041dd4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8041dd8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8041ddc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8041de0:	4692      	mov	sl, r2
 8041de2:	469b      	mov	fp, r3
 8041de4:	4643      	mov	r3, r8
 8041de6:	eb1a 0303 	adds.w	r3, sl, r3
 8041dea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8041dee:	464b      	mov	r3, r9
 8041df0:	eb4b 0303 	adc.w	r3, fp, r3
 8041df4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8041df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8041dfc:	685b      	ldr	r3, [r3, #4]
 8041dfe:	2200      	movs	r2, #0
 8041e00:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8041e04:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8041e08:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8041e0c:	460b      	mov	r3, r1
 8041e0e:	18db      	adds	r3, r3, r3
 8041e10:	643b      	str	r3, [r7, #64]	; 0x40
 8041e12:	4613      	mov	r3, r2
 8041e14:	eb42 0303 	adc.w	r3, r2, r3
 8041e18:	647b      	str	r3, [r7, #68]	; 0x44
 8041e1a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8041e1e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8041e22:	f7fe fa2d 	bl	8040280 <__aeabi_uldivmod>
 8041e26:	4602      	mov	r2, r0
 8041e28:	460b      	mov	r3, r1
 8041e2a:	4611      	mov	r1, r2
 8041e2c:	4b3b      	ldr	r3, [pc, #236]	; (8041f1c <UART_SetConfig+0x2d4>)
 8041e2e:	fba3 2301 	umull	r2, r3, r3, r1
 8041e32:	095b      	lsrs	r3, r3, #5
 8041e34:	2264      	movs	r2, #100	; 0x64
 8041e36:	fb02 f303 	mul.w	r3, r2, r3
 8041e3a:	1acb      	subs	r3, r1, r3
 8041e3c:	00db      	lsls	r3, r3, #3
 8041e3e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8041e42:	4b36      	ldr	r3, [pc, #216]	; (8041f1c <UART_SetConfig+0x2d4>)
 8041e44:	fba3 2302 	umull	r2, r3, r3, r2
 8041e48:	095b      	lsrs	r3, r3, #5
 8041e4a:	005b      	lsls	r3, r3, #1
 8041e4c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8041e50:	441c      	add	r4, r3
 8041e52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8041e56:	2200      	movs	r2, #0
 8041e58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8041e5c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8041e60:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8041e64:	4642      	mov	r2, r8
 8041e66:	464b      	mov	r3, r9
 8041e68:	1891      	adds	r1, r2, r2
 8041e6a:	63b9      	str	r1, [r7, #56]	; 0x38
 8041e6c:	415b      	adcs	r3, r3
 8041e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8041e70:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8041e74:	4641      	mov	r1, r8
 8041e76:	1851      	adds	r1, r2, r1
 8041e78:	6339      	str	r1, [r7, #48]	; 0x30
 8041e7a:	4649      	mov	r1, r9
 8041e7c:	414b      	adcs	r3, r1
 8041e7e:	637b      	str	r3, [r7, #52]	; 0x34
 8041e80:	f04f 0200 	mov.w	r2, #0
 8041e84:	f04f 0300 	mov.w	r3, #0
 8041e88:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8041e8c:	4659      	mov	r1, fp
 8041e8e:	00cb      	lsls	r3, r1, #3
 8041e90:	4651      	mov	r1, sl
 8041e92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8041e96:	4651      	mov	r1, sl
 8041e98:	00ca      	lsls	r2, r1, #3
 8041e9a:	4610      	mov	r0, r2
 8041e9c:	4619      	mov	r1, r3
 8041e9e:	4603      	mov	r3, r0
 8041ea0:	4642      	mov	r2, r8
 8041ea2:	189b      	adds	r3, r3, r2
 8041ea4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8041ea8:	464b      	mov	r3, r9
 8041eaa:	460a      	mov	r2, r1
 8041eac:	eb42 0303 	adc.w	r3, r2, r3
 8041eb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8041eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8041eb8:	685b      	ldr	r3, [r3, #4]
 8041eba:	2200      	movs	r2, #0
 8041ebc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8041ec0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8041ec4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8041ec8:	460b      	mov	r3, r1
 8041eca:	18db      	adds	r3, r3, r3
 8041ecc:	62bb      	str	r3, [r7, #40]	; 0x28
 8041ece:	4613      	mov	r3, r2
 8041ed0:	eb42 0303 	adc.w	r3, r2, r3
 8041ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8041ed6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8041eda:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8041ede:	f7fe f9cf 	bl	8040280 <__aeabi_uldivmod>
 8041ee2:	4602      	mov	r2, r0
 8041ee4:	460b      	mov	r3, r1
 8041ee6:	4b0d      	ldr	r3, [pc, #52]	; (8041f1c <UART_SetConfig+0x2d4>)
 8041ee8:	fba3 1302 	umull	r1, r3, r3, r2
 8041eec:	095b      	lsrs	r3, r3, #5
 8041eee:	2164      	movs	r1, #100	; 0x64
 8041ef0:	fb01 f303 	mul.w	r3, r1, r3
 8041ef4:	1ad3      	subs	r3, r2, r3
 8041ef6:	00db      	lsls	r3, r3, #3
 8041ef8:	3332      	adds	r3, #50	; 0x32
 8041efa:	4a08      	ldr	r2, [pc, #32]	; (8041f1c <UART_SetConfig+0x2d4>)
 8041efc:	fba2 2303 	umull	r2, r3, r2, r3
 8041f00:	095b      	lsrs	r3, r3, #5
 8041f02:	f003 0207 	and.w	r2, r3, #7
 8041f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8041f0a:	681b      	ldr	r3, [r3, #0]
 8041f0c:	4422      	add	r2, r4
 8041f0e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8041f10:	e106      	b.n	8042120 <UART_SetConfig+0x4d8>
 8041f12:	bf00      	nop
 8041f14:	40011000 	.word	0x40011000
 8041f18:	40011400 	.word	0x40011400
 8041f1c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8041f20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8041f24:	2200      	movs	r2, #0
 8041f26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8041f2a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8041f2e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8041f32:	4642      	mov	r2, r8
 8041f34:	464b      	mov	r3, r9
 8041f36:	1891      	adds	r1, r2, r2
 8041f38:	6239      	str	r1, [r7, #32]
 8041f3a:	415b      	adcs	r3, r3
 8041f3c:	627b      	str	r3, [r7, #36]	; 0x24
 8041f3e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8041f42:	4641      	mov	r1, r8
 8041f44:	1854      	adds	r4, r2, r1
 8041f46:	4649      	mov	r1, r9
 8041f48:	eb43 0501 	adc.w	r5, r3, r1
 8041f4c:	f04f 0200 	mov.w	r2, #0
 8041f50:	f04f 0300 	mov.w	r3, #0
 8041f54:	00eb      	lsls	r3, r5, #3
 8041f56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8041f5a:	00e2      	lsls	r2, r4, #3
 8041f5c:	4614      	mov	r4, r2
 8041f5e:	461d      	mov	r5, r3
 8041f60:	4643      	mov	r3, r8
 8041f62:	18e3      	adds	r3, r4, r3
 8041f64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8041f68:	464b      	mov	r3, r9
 8041f6a:	eb45 0303 	adc.w	r3, r5, r3
 8041f6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8041f72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8041f76:	685b      	ldr	r3, [r3, #4]
 8041f78:	2200      	movs	r2, #0
 8041f7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8041f7e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8041f82:	f04f 0200 	mov.w	r2, #0
 8041f86:	f04f 0300 	mov.w	r3, #0
 8041f8a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8041f8e:	4629      	mov	r1, r5
 8041f90:	008b      	lsls	r3, r1, #2
 8041f92:	4621      	mov	r1, r4
 8041f94:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8041f98:	4621      	mov	r1, r4
 8041f9a:	008a      	lsls	r2, r1, #2
 8041f9c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8041fa0:	f7fe f96e 	bl	8040280 <__aeabi_uldivmod>
 8041fa4:	4602      	mov	r2, r0
 8041fa6:	460b      	mov	r3, r1
 8041fa8:	4b60      	ldr	r3, [pc, #384]	; (804212c <UART_SetConfig+0x4e4>)
 8041faa:	fba3 2302 	umull	r2, r3, r3, r2
 8041fae:	095b      	lsrs	r3, r3, #5
 8041fb0:	011c      	lsls	r4, r3, #4
 8041fb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8041fb6:	2200      	movs	r2, #0
 8041fb8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8041fbc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8041fc0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8041fc4:	4642      	mov	r2, r8
 8041fc6:	464b      	mov	r3, r9
 8041fc8:	1891      	adds	r1, r2, r2
 8041fca:	61b9      	str	r1, [r7, #24]
 8041fcc:	415b      	adcs	r3, r3
 8041fce:	61fb      	str	r3, [r7, #28]
 8041fd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8041fd4:	4641      	mov	r1, r8
 8041fd6:	1851      	adds	r1, r2, r1
 8041fd8:	6139      	str	r1, [r7, #16]
 8041fda:	4649      	mov	r1, r9
 8041fdc:	414b      	adcs	r3, r1
 8041fde:	617b      	str	r3, [r7, #20]
 8041fe0:	f04f 0200 	mov.w	r2, #0
 8041fe4:	f04f 0300 	mov.w	r3, #0
 8041fe8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8041fec:	4659      	mov	r1, fp
 8041fee:	00cb      	lsls	r3, r1, #3
 8041ff0:	4651      	mov	r1, sl
 8041ff2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8041ff6:	4651      	mov	r1, sl
 8041ff8:	00ca      	lsls	r2, r1, #3
 8041ffa:	4610      	mov	r0, r2
 8041ffc:	4619      	mov	r1, r3
 8041ffe:	4603      	mov	r3, r0
 8042000:	4642      	mov	r2, r8
 8042002:	189b      	adds	r3, r3, r2
 8042004:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8042008:	464b      	mov	r3, r9
 804200a:	460a      	mov	r2, r1
 804200c:	eb42 0303 	adc.w	r3, r2, r3
 8042010:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8042014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8042018:	685b      	ldr	r3, [r3, #4]
 804201a:	2200      	movs	r2, #0
 804201c:	67bb      	str	r3, [r7, #120]	; 0x78
 804201e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8042020:	f04f 0200 	mov.w	r2, #0
 8042024:	f04f 0300 	mov.w	r3, #0
 8042028:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 804202c:	4649      	mov	r1, r9
 804202e:	008b      	lsls	r3, r1, #2
 8042030:	4641      	mov	r1, r8
 8042032:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8042036:	4641      	mov	r1, r8
 8042038:	008a      	lsls	r2, r1, #2
 804203a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 804203e:	f7fe f91f 	bl	8040280 <__aeabi_uldivmod>
 8042042:	4602      	mov	r2, r0
 8042044:	460b      	mov	r3, r1
 8042046:	4611      	mov	r1, r2
 8042048:	4b38      	ldr	r3, [pc, #224]	; (804212c <UART_SetConfig+0x4e4>)
 804204a:	fba3 2301 	umull	r2, r3, r3, r1
 804204e:	095b      	lsrs	r3, r3, #5
 8042050:	2264      	movs	r2, #100	; 0x64
 8042052:	fb02 f303 	mul.w	r3, r2, r3
 8042056:	1acb      	subs	r3, r1, r3
 8042058:	011b      	lsls	r3, r3, #4
 804205a:	3332      	adds	r3, #50	; 0x32
 804205c:	4a33      	ldr	r2, [pc, #204]	; (804212c <UART_SetConfig+0x4e4>)
 804205e:	fba2 2303 	umull	r2, r3, r2, r3
 8042062:	095b      	lsrs	r3, r3, #5
 8042064:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8042068:	441c      	add	r4, r3
 804206a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 804206e:	2200      	movs	r2, #0
 8042070:	673b      	str	r3, [r7, #112]	; 0x70
 8042072:	677a      	str	r2, [r7, #116]	; 0x74
 8042074:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8042078:	4642      	mov	r2, r8
 804207a:	464b      	mov	r3, r9
 804207c:	1891      	adds	r1, r2, r2
 804207e:	60b9      	str	r1, [r7, #8]
 8042080:	415b      	adcs	r3, r3
 8042082:	60fb      	str	r3, [r7, #12]
 8042084:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8042088:	4641      	mov	r1, r8
 804208a:	1851      	adds	r1, r2, r1
 804208c:	6039      	str	r1, [r7, #0]
 804208e:	4649      	mov	r1, r9
 8042090:	414b      	adcs	r3, r1
 8042092:	607b      	str	r3, [r7, #4]
 8042094:	f04f 0200 	mov.w	r2, #0
 8042098:	f04f 0300 	mov.w	r3, #0
 804209c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80420a0:	4659      	mov	r1, fp
 80420a2:	00cb      	lsls	r3, r1, #3
 80420a4:	4651      	mov	r1, sl
 80420a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80420aa:	4651      	mov	r1, sl
 80420ac:	00ca      	lsls	r2, r1, #3
 80420ae:	4610      	mov	r0, r2
 80420b0:	4619      	mov	r1, r3
 80420b2:	4603      	mov	r3, r0
 80420b4:	4642      	mov	r2, r8
 80420b6:	189b      	adds	r3, r3, r2
 80420b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80420ba:	464b      	mov	r3, r9
 80420bc:	460a      	mov	r2, r1
 80420be:	eb42 0303 	adc.w	r3, r2, r3
 80420c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80420c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80420c8:	685b      	ldr	r3, [r3, #4]
 80420ca:	2200      	movs	r2, #0
 80420cc:	663b      	str	r3, [r7, #96]	; 0x60
 80420ce:	667a      	str	r2, [r7, #100]	; 0x64
 80420d0:	f04f 0200 	mov.w	r2, #0
 80420d4:	f04f 0300 	mov.w	r3, #0
 80420d8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80420dc:	4649      	mov	r1, r9
 80420de:	008b      	lsls	r3, r1, #2
 80420e0:	4641      	mov	r1, r8
 80420e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80420e6:	4641      	mov	r1, r8
 80420e8:	008a      	lsls	r2, r1, #2
 80420ea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80420ee:	f7fe f8c7 	bl	8040280 <__aeabi_uldivmod>
 80420f2:	4602      	mov	r2, r0
 80420f4:	460b      	mov	r3, r1
 80420f6:	4b0d      	ldr	r3, [pc, #52]	; (804212c <UART_SetConfig+0x4e4>)
 80420f8:	fba3 1302 	umull	r1, r3, r3, r2
 80420fc:	095b      	lsrs	r3, r3, #5
 80420fe:	2164      	movs	r1, #100	; 0x64
 8042100:	fb01 f303 	mul.w	r3, r1, r3
 8042104:	1ad3      	subs	r3, r2, r3
 8042106:	011b      	lsls	r3, r3, #4
 8042108:	3332      	adds	r3, #50	; 0x32
 804210a:	4a08      	ldr	r2, [pc, #32]	; (804212c <UART_SetConfig+0x4e4>)
 804210c:	fba2 2303 	umull	r2, r3, r2, r3
 8042110:	095b      	lsrs	r3, r3, #5
 8042112:	f003 020f 	and.w	r2, r3, #15
 8042116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 804211a:	681b      	ldr	r3, [r3, #0]
 804211c:	4422      	add	r2, r4
 804211e:	609a      	str	r2, [r3, #8]
}
 8042120:	bf00      	nop
 8042122:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8042126:	46bd      	mov	sp, r7
 8042128:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 804212c:	51eb851f 	.word	0x51eb851f

08042130 <std>:
 8042130:	2300      	movs	r3, #0
 8042132:	b510      	push	{r4, lr}
 8042134:	4604      	mov	r4, r0
 8042136:	e9c0 3300 	strd	r3, r3, [r0]
 804213a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 804213e:	6083      	str	r3, [r0, #8]
 8042140:	8181      	strh	r1, [r0, #12]
 8042142:	6643      	str	r3, [r0, #100]	; 0x64
 8042144:	81c2      	strh	r2, [r0, #14]
 8042146:	6183      	str	r3, [r0, #24]
 8042148:	4619      	mov	r1, r3
 804214a:	2208      	movs	r2, #8
 804214c:	305c      	adds	r0, #92	; 0x5c
 804214e:	f000 f8f4 	bl	804233a <memset>
 8042152:	4b05      	ldr	r3, [pc, #20]	; (8042168 <std+0x38>)
 8042154:	6263      	str	r3, [r4, #36]	; 0x24
 8042156:	4b05      	ldr	r3, [pc, #20]	; (804216c <std+0x3c>)
 8042158:	62a3      	str	r3, [r4, #40]	; 0x28
 804215a:	4b05      	ldr	r3, [pc, #20]	; (8042170 <std+0x40>)
 804215c:	62e3      	str	r3, [r4, #44]	; 0x2c
 804215e:	4b05      	ldr	r3, [pc, #20]	; (8042174 <std+0x44>)
 8042160:	6224      	str	r4, [r4, #32]
 8042162:	6323      	str	r3, [r4, #48]	; 0x30
 8042164:	bd10      	pop	{r4, pc}
 8042166:	bf00      	nop
 8042168:	080422b5 	.word	0x080422b5
 804216c:	080422d7 	.word	0x080422d7
 8042170:	0804230f 	.word	0x0804230f
 8042174:	08042333 	.word	0x08042333

08042178 <stdio_exit_handler>:
 8042178:	4a02      	ldr	r2, [pc, #8]	; (8042184 <stdio_exit_handler+0xc>)
 804217a:	4903      	ldr	r1, [pc, #12]	; (8042188 <stdio_exit_handler+0x10>)
 804217c:	4803      	ldr	r0, [pc, #12]	; (804218c <stdio_exit_handler+0x14>)
 804217e:	f000 b869 	b.w	8042254 <_fwalk_sglue>
 8042182:	bf00      	nop
 8042184:	2000000c 	.word	0x2000000c
 8042188:	08042cd5 	.word	0x08042cd5
 804218c:	20000018 	.word	0x20000018

08042190 <cleanup_stdio>:
 8042190:	6841      	ldr	r1, [r0, #4]
 8042192:	4b0c      	ldr	r3, [pc, #48]	; (80421c4 <cleanup_stdio+0x34>)
 8042194:	4299      	cmp	r1, r3
 8042196:	b510      	push	{r4, lr}
 8042198:	4604      	mov	r4, r0
 804219a:	d001      	beq.n	80421a0 <cleanup_stdio+0x10>
 804219c:	f000 fd9a 	bl	8042cd4 <_fflush_r>
 80421a0:	68a1      	ldr	r1, [r4, #8]
 80421a2:	4b09      	ldr	r3, [pc, #36]	; (80421c8 <cleanup_stdio+0x38>)
 80421a4:	4299      	cmp	r1, r3
 80421a6:	d002      	beq.n	80421ae <cleanup_stdio+0x1e>
 80421a8:	4620      	mov	r0, r4
 80421aa:	f000 fd93 	bl	8042cd4 <_fflush_r>
 80421ae:	68e1      	ldr	r1, [r4, #12]
 80421b0:	4b06      	ldr	r3, [pc, #24]	; (80421cc <cleanup_stdio+0x3c>)
 80421b2:	4299      	cmp	r1, r3
 80421b4:	d004      	beq.n	80421c0 <cleanup_stdio+0x30>
 80421b6:	4620      	mov	r0, r4
 80421b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80421bc:	f000 bd8a 	b.w	8042cd4 <_fflush_r>
 80421c0:	bd10      	pop	{r4, pc}
 80421c2:	bf00      	nop
 80421c4:	200000d0 	.word	0x200000d0
 80421c8:	20000138 	.word	0x20000138
 80421cc:	200001a0 	.word	0x200001a0

080421d0 <global_stdio_init.part.0>:
 80421d0:	b510      	push	{r4, lr}
 80421d2:	4b0b      	ldr	r3, [pc, #44]	; (8042200 <global_stdio_init.part.0+0x30>)
 80421d4:	4c0b      	ldr	r4, [pc, #44]	; (8042204 <global_stdio_init.part.0+0x34>)
 80421d6:	4a0c      	ldr	r2, [pc, #48]	; (8042208 <global_stdio_init.part.0+0x38>)
 80421d8:	601a      	str	r2, [r3, #0]
 80421da:	4620      	mov	r0, r4
 80421dc:	2200      	movs	r2, #0
 80421de:	2104      	movs	r1, #4
 80421e0:	f7ff ffa6 	bl	8042130 <std>
 80421e4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80421e8:	2201      	movs	r2, #1
 80421ea:	2109      	movs	r1, #9
 80421ec:	f7ff ffa0 	bl	8042130 <std>
 80421f0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80421f4:	2202      	movs	r2, #2
 80421f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80421fa:	2112      	movs	r1, #18
 80421fc:	f7ff bf98 	b.w	8042130 <std>
 8042200:	20000208 	.word	0x20000208
 8042204:	200000d0 	.word	0x200000d0
 8042208:	08042179 	.word	0x08042179

0804220c <__sfp_lock_acquire>:
 804220c:	4801      	ldr	r0, [pc, #4]	; (8042214 <__sfp_lock_acquire+0x8>)
 804220e:	f000 b90d 	b.w	804242c <__retarget_lock_acquire_recursive>
 8042212:	bf00      	nop
 8042214:	20000211 	.word	0x20000211

08042218 <__sfp_lock_release>:
 8042218:	4801      	ldr	r0, [pc, #4]	; (8042220 <__sfp_lock_release+0x8>)
 804221a:	f000 b908 	b.w	804242e <__retarget_lock_release_recursive>
 804221e:	bf00      	nop
 8042220:	20000211 	.word	0x20000211

08042224 <__sinit>:
 8042224:	b510      	push	{r4, lr}
 8042226:	4604      	mov	r4, r0
 8042228:	f7ff fff0 	bl	804220c <__sfp_lock_acquire>
 804222c:	6a23      	ldr	r3, [r4, #32]
 804222e:	b11b      	cbz	r3, 8042238 <__sinit+0x14>
 8042230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8042234:	f7ff bff0 	b.w	8042218 <__sfp_lock_release>
 8042238:	4b04      	ldr	r3, [pc, #16]	; (804224c <__sinit+0x28>)
 804223a:	6223      	str	r3, [r4, #32]
 804223c:	4b04      	ldr	r3, [pc, #16]	; (8042250 <__sinit+0x2c>)
 804223e:	681b      	ldr	r3, [r3, #0]
 8042240:	2b00      	cmp	r3, #0
 8042242:	d1f5      	bne.n	8042230 <__sinit+0xc>
 8042244:	f7ff ffc4 	bl	80421d0 <global_stdio_init.part.0>
 8042248:	e7f2      	b.n	8042230 <__sinit+0xc>
 804224a:	bf00      	nop
 804224c:	08042191 	.word	0x08042191
 8042250:	20000208 	.word	0x20000208

08042254 <_fwalk_sglue>:
 8042254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8042258:	4607      	mov	r7, r0
 804225a:	4688      	mov	r8, r1
 804225c:	4614      	mov	r4, r2
 804225e:	2600      	movs	r6, #0
 8042260:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8042264:	f1b9 0901 	subs.w	r9, r9, #1
 8042268:	d505      	bpl.n	8042276 <_fwalk_sglue+0x22>
 804226a:	6824      	ldr	r4, [r4, #0]
 804226c:	2c00      	cmp	r4, #0
 804226e:	d1f7      	bne.n	8042260 <_fwalk_sglue+0xc>
 8042270:	4630      	mov	r0, r6
 8042272:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8042276:	89ab      	ldrh	r3, [r5, #12]
 8042278:	2b01      	cmp	r3, #1
 804227a:	d907      	bls.n	804228c <_fwalk_sglue+0x38>
 804227c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8042280:	3301      	adds	r3, #1
 8042282:	d003      	beq.n	804228c <_fwalk_sglue+0x38>
 8042284:	4629      	mov	r1, r5
 8042286:	4638      	mov	r0, r7
 8042288:	47c0      	blx	r8
 804228a:	4306      	orrs	r6, r0
 804228c:	3568      	adds	r5, #104	; 0x68
 804228e:	e7e9      	b.n	8042264 <_fwalk_sglue+0x10>

08042290 <iprintf>:
 8042290:	b40f      	push	{r0, r1, r2, r3}
 8042292:	b507      	push	{r0, r1, r2, lr}
 8042294:	4906      	ldr	r1, [pc, #24]	; (80422b0 <iprintf+0x20>)
 8042296:	ab04      	add	r3, sp, #16
 8042298:	6808      	ldr	r0, [r1, #0]
 804229a:	f853 2b04 	ldr.w	r2, [r3], #4
 804229e:	6881      	ldr	r1, [r0, #8]
 80422a0:	9301      	str	r3, [sp, #4]
 80422a2:	f000 f9e7 	bl	8042674 <_vfiprintf_r>
 80422a6:	b003      	add	sp, #12
 80422a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80422ac:	b004      	add	sp, #16
 80422ae:	4770      	bx	lr
 80422b0:	20000064 	.word	0x20000064

080422b4 <__sread>:
 80422b4:	b510      	push	{r4, lr}
 80422b6:	460c      	mov	r4, r1
 80422b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80422bc:	f000 f868 	bl	8042390 <_read_r>
 80422c0:	2800      	cmp	r0, #0
 80422c2:	bfab      	itete	ge
 80422c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80422c6:	89a3      	ldrhlt	r3, [r4, #12]
 80422c8:	181b      	addge	r3, r3, r0
 80422ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80422ce:	bfac      	ite	ge
 80422d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80422d2:	81a3      	strhlt	r3, [r4, #12]
 80422d4:	bd10      	pop	{r4, pc}

080422d6 <__swrite>:
 80422d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80422da:	461f      	mov	r7, r3
 80422dc:	898b      	ldrh	r3, [r1, #12]
 80422de:	05db      	lsls	r3, r3, #23
 80422e0:	4605      	mov	r5, r0
 80422e2:	460c      	mov	r4, r1
 80422e4:	4616      	mov	r6, r2
 80422e6:	d505      	bpl.n	80422f4 <__swrite+0x1e>
 80422e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80422ec:	2302      	movs	r3, #2
 80422ee:	2200      	movs	r2, #0
 80422f0:	f000 f83c 	bl	804236c <_lseek_r>
 80422f4:	89a3      	ldrh	r3, [r4, #12]
 80422f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80422fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80422fe:	81a3      	strh	r3, [r4, #12]
 8042300:	4632      	mov	r2, r6
 8042302:	463b      	mov	r3, r7
 8042304:	4628      	mov	r0, r5
 8042306:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 804230a:	f000 b853 	b.w	80423b4 <_write_r>

0804230e <__sseek>:
 804230e:	b510      	push	{r4, lr}
 8042310:	460c      	mov	r4, r1
 8042312:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8042316:	f000 f829 	bl	804236c <_lseek_r>
 804231a:	1c43      	adds	r3, r0, #1
 804231c:	89a3      	ldrh	r3, [r4, #12]
 804231e:	bf15      	itete	ne
 8042320:	6560      	strne	r0, [r4, #84]	; 0x54
 8042322:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8042326:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 804232a:	81a3      	strheq	r3, [r4, #12]
 804232c:	bf18      	it	ne
 804232e:	81a3      	strhne	r3, [r4, #12]
 8042330:	bd10      	pop	{r4, pc}

08042332 <__sclose>:
 8042332:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8042336:	f000 b809 	b.w	804234c <_close_r>

0804233a <memset>:
 804233a:	4402      	add	r2, r0
 804233c:	4603      	mov	r3, r0
 804233e:	4293      	cmp	r3, r2
 8042340:	d100      	bne.n	8042344 <memset+0xa>
 8042342:	4770      	bx	lr
 8042344:	f803 1b01 	strb.w	r1, [r3], #1
 8042348:	e7f9      	b.n	804233e <memset+0x4>
	...

0804234c <_close_r>:
 804234c:	b538      	push	{r3, r4, r5, lr}
 804234e:	4d06      	ldr	r5, [pc, #24]	; (8042368 <_close_r+0x1c>)
 8042350:	2300      	movs	r3, #0
 8042352:	4604      	mov	r4, r0
 8042354:	4608      	mov	r0, r1
 8042356:	602b      	str	r3, [r5, #0]
 8042358:	f7fe faf1 	bl	804093e <_close>
 804235c:	1c43      	adds	r3, r0, #1
 804235e:	d102      	bne.n	8042366 <_close_r+0x1a>
 8042360:	682b      	ldr	r3, [r5, #0]
 8042362:	b103      	cbz	r3, 8042366 <_close_r+0x1a>
 8042364:	6023      	str	r3, [r4, #0]
 8042366:	bd38      	pop	{r3, r4, r5, pc}
 8042368:	2000020c 	.word	0x2000020c

0804236c <_lseek_r>:
 804236c:	b538      	push	{r3, r4, r5, lr}
 804236e:	4d07      	ldr	r5, [pc, #28]	; (804238c <_lseek_r+0x20>)
 8042370:	4604      	mov	r4, r0
 8042372:	4608      	mov	r0, r1
 8042374:	4611      	mov	r1, r2
 8042376:	2200      	movs	r2, #0
 8042378:	602a      	str	r2, [r5, #0]
 804237a:	461a      	mov	r2, r3
 804237c:	f7fe fb06 	bl	804098c <_lseek>
 8042380:	1c43      	adds	r3, r0, #1
 8042382:	d102      	bne.n	804238a <_lseek_r+0x1e>
 8042384:	682b      	ldr	r3, [r5, #0]
 8042386:	b103      	cbz	r3, 804238a <_lseek_r+0x1e>
 8042388:	6023      	str	r3, [r4, #0]
 804238a:	bd38      	pop	{r3, r4, r5, pc}
 804238c:	2000020c 	.word	0x2000020c

08042390 <_read_r>:
 8042390:	b538      	push	{r3, r4, r5, lr}
 8042392:	4d07      	ldr	r5, [pc, #28]	; (80423b0 <_read_r+0x20>)
 8042394:	4604      	mov	r4, r0
 8042396:	4608      	mov	r0, r1
 8042398:	4611      	mov	r1, r2
 804239a:	2200      	movs	r2, #0
 804239c:	602a      	str	r2, [r5, #0]
 804239e:	461a      	mov	r2, r3
 80423a0:	f7fe fa94 	bl	80408cc <_read>
 80423a4:	1c43      	adds	r3, r0, #1
 80423a6:	d102      	bne.n	80423ae <_read_r+0x1e>
 80423a8:	682b      	ldr	r3, [r5, #0]
 80423aa:	b103      	cbz	r3, 80423ae <_read_r+0x1e>
 80423ac:	6023      	str	r3, [r4, #0]
 80423ae:	bd38      	pop	{r3, r4, r5, pc}
 80423b0:	2000020c 	.word	0x2000020c

080423b4 <_write_r>:
 80423b4:	b538      	push	{r3, r4, r5, lr}
 80423b6:	4d07      	ldr	r5, [pc, #28]	; (80423d4 <_write_r+0x20>)
 80423b8:	4604      	mov	r4, r0
 80423ba:	4608      	mov	r0, r1
 80423bc:	4611      	mov	r1, r2
 80423be:	2200      	movs	r2, #0
 80423c0:	602a      	str	r2, [r5, #0]
 80423c2:	461a      	mov	r2, r3
 80423c4:	f7fe fa9f 	bl	8040906 <_write>
 80423c8:	1c43      	adds	r3, r0, #1
 80423ca:	d102      	bne.n	80423d2 <_write_r+0x1e>
 80423cc:	682b      	ldr	r3, [r5, #0]
 80423ce:	b103      	cbz	r3, 80423d2 <_write_r+0x1e>
 80423d0:	6023      	str	r3, [r4, #0]
 80423d2:	bd38      	pop	{r3, r4, r5, pc}
 80423d4:	2000020c 	.word	0x2000020c

080423d8 <__errno>:
 80423d8:	4b01      	ldr	r3, [pc, #4]	; (80423e0 <__errno+0x8>)
 80423da:	6818      	ldr	r0, [r3, #0]
 80423dc:	4770      	bx	lr
 80423de:	bf00      	nop
 80423e0:	20000064 	.word	0x20000064

080423e4 <__libc_init_array>:
 80423e4:	b570      	push	{r4, r5, r6, lr}
 80423e6:	4d0d      	ldr	r5, [pc, #52]	; (804241c <__libc_init_array+0x38>)
 80423e8:	4c0d      	ldr	r4, [pc, #52]	; (8042420 <__libc_init_array+0x3c>)
 80423ea:	1b64      	subs	r4, r4, r5
 80423ec:	10a4      	asrs	r4, r4, #2
 80423ee:	2600      	movs	r6, #0
 80423f0:	42a6      	cmp	r6, r4
 80423f2:	d109      	bne.n	8042408 <__libc_init_array+0x24>
 80423f4:	4d0b      	ldr	r5, [pc, #44]	; (8042424 <__libc_init_array+0x40>)
 80423f6:	4c0c      	ldr	r4, [pc, #48]	; (8042428 <__libc_init_array+0x44>)
 80423f8:	f000 fdbe 	bl	8042f78 <_init>
 80423fc:	1b64      	subs	r4, r4, r5
 80423fe:	10a4      	asrs	r4, r4, #2
 8042400:	2600      	movs	r6, #0
 8042402:	42a6      	cmp	r6, r4
 8042404:	d105      	bne.n	8042412 <__libc_init_array+0x2e>
 8042406:	bd70      	pop	{r4, r5, r6, pc}
 8042408:	f855 3b04 	ldr.w	r3, [r5], #4
 804240c:	4798      	blx	r3
 804240e:	3601      	adds	r6, #1
 8042410:	e7ee      	b.n	80423f0 <__libc_init_array+0xc>
 8042412:	f855 3b04 	ldr.w	r3, [r5], #4
 8042416:	4798      	blx	r3
 8042418:	3601      	adds	r6, #1
 804241a:	e7f2      	b.n	8042402 <__libc_init_array+0x1e>
 804241c:	08043004 	.word	0x08043004
 8042420:	08043004 	.word	0x08043004
 8042424:	08043004 	.word	0x08043004
 8042428:	08043008 	.word	0x08043008

0804242c <__retarget_lock_acquire_recursive>:
 804242c:	4770      	bx	lr

0804242e <__retarget_lock_release_recursive>:
 804242e:	4770      	bx	lr

08042430 <_free_r>:
 8042430:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8042432:	2900      	cmp	r1, #0
 8042434:	d044      	beq.n	80424c0 <_free_r+0x90>
 8042436:	f851 3c04 	ldr.w	r3, [r1, #-4]
 804243a:	9001      	str	r0, [sp, #4]
 804243c:	2b00      	cmp	r3, #0
 804243e:	f1a1 0404 	sub.w	r4, r1, #4
 8042442:	bfb8      	it	lt
 8042444:	18e4      	addlt	r4, r4, r3
 8042446:	f000 f8df 	bl	8042608 <__malloc_lock>
 804244a:	4a1e      	ldr	r2, [pc, #120]	; (80424c4 <_free_r+0x94>)
 804244c:	9801      	ldr	r0, [sp, #4]
 804244e:	6813      	ldr	r3, [r2, #0]
 8042450:	b933      	cbnz	r3, 8042460 <_free_r+0x30>
 8042452:	6063      	str	r3, [r4, #4]
 8042454:	6014      	str	r4, [r2, #0]
 8042456:	b003      	add	sp, #12
 8042458:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 804245c:	f000 b8da 	b.w	8042614 <__malloc_unlock>
 8042460:	42a3      	cmp	r3, r4
 8042462:	d908      	bls.n	8042476 <_free_r+0x46>
 8042464:	6825      	ldr	r5, [r4, #0]
 8042466:	1961      	adds	r1, r4, r5
 8042468:	428b      	cmp	r3, r1
 804246a:	bf01      	itttt	eq
 804246c:	6819      	ldreq	r1, [r3, #0]
 804246e:	685b      	ldreq	r3, [r3, #4]
 8042470:	1949      	addeq	r1, r1, r5
 8042472:	6021      	streq	r1, [r4, #0]
 8042474:	e7ed      	b.n	8042452 <_free_r+0x22>
 8042476:	461a      	mov	r2, r3
 8042478:	685b      	ldr	r3, [r3, #4]
 804247a:	b10b      	cbz	r3, 8042480 <_free_r+0x50>
 804247c:	42a3      	cmp	r3, r4
 804247e:	d9fa      	bls.n	8042476 <_free_r+0x46>
 8042480:	6811      	ldr	r1, [r2, #0]
 8042482:	1855      	adds	r5, r2, r1
 8042484:	42a5      	cmp	r5, r4
 8042486:	d10b      	bne.n	80424a0 <_free_r+0x70>
 8042488:	6824      	ldr	r4, [r4, #0]
 804248a:	4421      	add	r1, r4
 804248c:	1854      	adds	r4, r2, r1
 804248e:	42a3      	cmp	r3, r4
 8042490:	6011      	str	r1, [r2, #0]
 8042492:	d1e0      	bne.n	8042456 <_free_r+0x26>
 8042494:	681c      	ldr	r4, [r3, #0]
 8042496:	685b      	ldr	r3, [r3, #4]
 8042498:	6053      	str	r3, [r2, #4]
 804249a:	440c      	add	r4, r1
 804249c:	6014      	str	r4, [r2, #0]
 804249e:	e7da      	b.n	8042456 <_free_r+0x26>
 80424a0:	d902      	bls.n	80424a8 <_free_r+0x78>
 80424a2:	230c      	movs	r3, #12
 80424a4:	6003      	str	r3, [r0, #0]
 80424a6:	e7d6      	b.n	8042456 <_free_r+0x26>
 80424a8:	6825      	ldr	r5, [r4, #0]
 80424aa:	1961      	adds	r1, r4, r5
 80424ac:	428b      	cmp	r3, r1
 80424ae:	bf04      	itt	eq
 80424b0:	6819      	ldreq	r1, [r3, #0]
 80424b2:	685b      	ldreq	r3, [r3, #4]
 80424b4:	6063      	str	r3, [r4, #4]
 80424b6:	bf04      	itt	eq
 80424b8:	1949      	addeq	r1, r1, r5
 80424ba:	6021      	streq	r1, [r4, #0]
 80424bc:	6054      	str	r4, [r2, #4]
 80424be:	e7ca      	b.n	8042456 <_free_r+0x26>
 80424c0:	b003      	add	sp, #12
 80424c2:	bd30      	pop	{r4, r5, pc}
 80424c4:	20000214 	.word	0x20000214

080424c8 <sbrk_aligned>:
 80424c8:	b570      	push	{r4, r5, r6, lr}
 80424ca:	4e0e      	ldr	r6, [pc, #56]	; (8042504 <sbrk_aligned+0x3c>)
 80424cc:	460c      	mov	r4, r1
 80424ce:	6831      	ldr	r1, [r6, #0]
 80424d0:	4605      	mov	r5, r0
 80424d2:	b911      	cbnz	r1, 80424da <sbrk_aligned+0x12>
 80424d4:	f000 fcbc 	bl	8042e50 <_sbrk_r>
 80424d8:	6030      	str	r0, [r6, #0]
 80424da:	4621      	mov	r1, r4
 80424dc:	4628      	mov	r0, r5
 80424de:	f000 fcb7 	bl	8042e50 <_sbrk_r>
 80424e2:	1c43      	adds	r3, r0, #1
 80424e4:	d00a      	beq.n	80424fc <sbrk_aligned+0x34>
 80424e6:	1cc4      	adds	r4, r0, #3
 80424e8:	f024 0403 	bic.w	r4, r4, #3
 80424ec:	42a0      	cmp	r0, r4
 80424ee:	d007      	beq.n	8042500 <sbrk_aligned+0x38>
 80424f0:	1a21      	subs	r1, r4, r0
 80424f2:	4628      	mov	r0, r5
 80424f4:	f000 fcac 	bl	8042e50 <_sbrk_r>
 80424f8:	3001      	adds	r0, #1
 80424fa:	d101      	bne.n	8042500 <sbrk_aligned+0x38>
 80424fc:	f04f 34ff 	mov.w	r4, #4294967295
 8042500:	4620      	mov	r0, r4
 8042502:	bd70      	pop	{r4, r5, r6, pc}
 8042504:	20000218 	.word	0x20000218

08042508 <_malloc_r>:
 8042508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 804250c:	1ccd      	adds	r5, r1, #3
 804250e:	f025 0503 	bic.w	r5, r5, #3
 8042512:	3508      	adds	r5, #8
 8042514:	2d0c      	cmp	r5, #12
 8042516:	bf38      	it	cc
 8042518:	250c      	movcc	r5, #12
 804251a:	2d00      	cmp	r5, #0
 804251c:	4607      	mov	r7, r0
 804251e:	db01      	blt.n	8042524 <_malloc_r+0x1c>
 8042520:	42a9      	cmp	r1, r5
 8042522:	d905      	bls.n	8042530 <_malloc_r+0x28>
 8042524:	230c      	movs	r3, #12
 8042526:	603b      	str	r3, [r7, #0]
 8042528:	2600      	movs	r6, #0
 804252a:	4630      	mov	r0, r6
 804252c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8042530:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8042604 <_malloc_r+0xfc>
 8042534:	f000 f868 	bl	8042608 <__malloc_lock>
 8042538:	f8d8 3000 	ldr.w	r3, [r8]
 804253c:	461c      	mov	r4, r3
 804253e:	bb5c      	cbnz	r4, 8042598 <_malloc_r+0x90>
 8042540:	4629      	mov	r1, r5
 8042542:	4638      	mov	r0, r7
 8042544:	f7ff ffc0 	bl	80424c8 <sbrk_aligned>
 8042548:	1c43      	adds	r3, r0, #1
 804254a:	4604      	mov	r4, r0
 804254c:	d155      	bne.n	80425fa <_malloc_r+0xf2>
 804254e:	f8d8 4000 	ldr.w	r4, [r8]
 8042552:	4626      	mov	r6, r4
 8042554:	2e00      	cmp	r6, #0
 8042556:	d145      	bne.n	80425e4 <_malloc_r+0xdc>
 8042558:	2c00      	cmp	r4, #0
 804255a:	d048      	beq.n	80425ee <_malloc_r+0xe6>
 804255c:	6823      	ldr	r3, [r4, #0]
 804255e:	4631      	mov	r1, r6
 8042560:	4638      	mov	r0, r7
 8042562:	eb04 0903 	add.w	r9, r4, r3
 8042566:	f000 fc73 	bl	8042e50 <_sbrk_r>
 804256a:	4581      	cmp	r9, r0
 804256c:	d13f      	bne.n	80425ee <_malloc_r+0xe6>
 804256e:	6821      	ldr	r1, [r4, #0]
 8042570:	1a6d      	subs	r5, r5, r1
 8042572:	4629      	mov	r1, r5
 8042574:	4638      	mov	r0, r7
 8042576:	f7ff ffa7 	bl	80424c8 <sbrk_aligned>
 804257a:	3001      	adds	r0, #1
 804257c:	d037      	beq.n	80425ee <_malloc_r+0xe6>
 804257e:	6823      	ldr	r3, [r4, #0]
 8042580:	442b      	add	r3, r5
 8042582:	6023      	str	r3, [r4, #0]
 8042584:	f8d8 3000 	ldr.w	r3, [r8]
 8042588:	2b00      	cmp	r3, #0
 804258a:	d038      	beq.n	80425fe <_malloc_r+0xf6>
 804258c:	685a      	ldr	r2, [r3, #4]
 804258e:	42a2      	cmp	r2, r4
 8042590:	d12b      	bne.n	80425ea <_malloc_r+0xe2>
 8042592:	2200      	movs	r2, #0
 8042594:	605a      	str	r2, [r3, #4]
 8042596:	e00f      	b.n	80425b8 <_malloc_r+0xb0>
 8042598:	6822      	ldr	r2, [r4, #0]
 804259a:	1b52      	subs	r2, r2, r5
 804259c:	d41f      	bmi.n	80425de <_malloc_r+0xd6>
 804259e:	2a0b      	cmp	r2, #11
 80425a0:	d917      	bls.n	80425d2 <_malloc_r+0xca>
 80425a2:	1961      	adds	r1, r4, r5
 80425a4:	42a3      	cmp	r3, r4
 80425a6:	6025      	str	r5, [r4, #0]
 80425a8:	bf18      	it	ne
 80425aa:	6059      	strne	r1, [r3, #4]
 80425ac:	6863      	ldr	r3, [r4, #4]
 80425ae:	bf08      	it	eq
 80425b0:	f8c8 1000 	streq.w	r1, [r8]
 80425b4:	5162      	str	r2, [r4, r5]
 80425b6:	604b      	str	r3, [r1, #4]
 80425b8:	4638      	mov	r0, r7
 80425ba:	f104 060b 	add.w	r6, r4, #11
 80425be:	f000 f829 	bl	8042614 <__malloc_unlock>
 80425c2:	f026 0607 	bic.w	r6, r6, #7
 80425c6:	1d23      	adds	r3, r4, #4
 80425c8:	1af2      	subs	r2, r6, r3
 80425ca:	d0ae      	beq.n	804252a <_malloc_r+0x22>
 80425cc:	1b9b      	subs	r3, r3, r6
 80425ce:	50a3      	str	r3, [r4, r2]
 80425d0:	e7ab      	b.n	804252a <_malloc_r+0x22>
 80425d2:	42a3      	cmp	r3, r4
 80425d4:	6862      	ldr	r2, [r4, #4]
 80425d6:	d1dd      	bne.n	8042594 <_malloc_r+0x8c>
 80425d8:	f8c8 2000 	str.w	r2, [r8]
 80425dc:	e7ec      	b.n	80425b8 <_malloc_r+0xb0>
 80425de:	4623      	mov	r3, r4
 80425e0:	6864      	ldr	r4, [r4, #4]
 80425e2:	e7ac      	b.n	804253e <_malloc_r+0x36>
 80425e4:	4634      	mov	r4, r6
 80425e6:	6876      	ldr	r6, [r6, #4]
 80425e8:	e7b4      	b.n	8042554 <_malloc_r+0x4c>
 80425ea:	4613      	mov	r3, r2
 80425ec:	e7cc      	b.n	8042588 <_malloc_r+0x80>
 80425ee:	230c      	movs	r3, #12
 80425f0:	603b      	str	r3, [r7, #0]
 80425f2:	4638      	mov	r0, r7
 80425f4:	f000 f80e 	bl	8042614 <__malloc_unlock>
 80425f8:	e797      	b.n	804252a <_malloc_r+0x22>
 80425fa:	6025      	str	r5, [r4, #0]
 80425fc:	e7dc      	b.n	80425b8 <_malloc_r+0xb0>
 80425fe:	605b      	str	r3, [r3, #4]
 8042600:	deff      	udf	#255	; 0xff
 8042602:	bf00      	nop
 8042604:	20000214 	.word	0x20000214

08042608 <__malloc_lock>:
 8042608:	4801      	ldr	r0, [pc, #4]	; (8042610 <__malloc_lock+0x8>)
 804260a:	f7ff bf0f 	b.w	804242c <__retarget_lock_acquire_recursive>
 804260e:	bf00      	nop
 8042610:	20000210 	.word	0x20000210

08042614 <__malloc_unlock>:
 8042614:	4801      	ldr	r0, [pc, #4]	; (804261c <__malloc_unlock+0x8>)
 8042616:	f7ff bf0a 	b.w	804242e <__retarget_lock_release_recursive>
 804261a:	bf00      	nop
 804261c:	20000210 	.word	0x20000210

08042620 <__sfputc_r>:
 8042620:	6893      	ldr	r3, [r2, #8]
 8042622:	3b01      	subs	r3, #1
 8042624:	2b00      	cmp	r3, #0
 8042626:	b410      	push	{r4}
 8042628:	6093      	str	r3, [r2, #8]
 804262a:	da08      	bge.n	804263e <__sfputc_r+0x1e>
 804262c:	6994      	ldr	r4, [r2, #24]
 804262e:	42a3      	cmp	r3, r4
 8042630:	db01      	blt.n	8042636 <__sfputc_r+0x16>
 8042632:	290a      	cmp	r1, #10
 8042634:	d103      	bne.n	804263e <__sfputc_r+0x1e>
 8042636:	f85d 4b04 	ldr.w	r4, [sp], #4
 804263a:	f000 bb73 	b.w	8042d24 <__swbuf_r>
 804263e:	6813      	ldr	r3, [r2, #0]
 8042640:	1c58      	adds	r0, r3, #1
 8042642:	6010      	str	r0, [r2, #0]
 8042644:	7019      	strb	r1, [r3, #0]
 8042646:	4608      	mov	r0, r1
 8042648:	f85d 4b04 	ldr.w	r4, [sp], #4
 804264c:	4770      	bx	lr

0804264e <__sfputs_r>:
 804264e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8042650:	4606      	mov	r6, r0
 8042652:	460f      	mov	r7, r1
 8042654:	4614      	mov	r4, r2
 8042656:	18d5      	adds	r5, r2, r3
 8042658:	42ac      	cmp	r4, r5
 804265a:	d101      	bne.n	8042660 <__sfputs_r+0x12>
 804265c:	2000      	movs	r0, #0
 804265e:	e007      	b.n	8042670 <__sfputs_r+0x22>
 8042660:	f814 1b01 	ldrb.w	r1, [r4], #1
 8042664:	463a      	mov	r2, r7
 8042666:	4630      	mov	r0, r6
 8042668:	f7ff ffda 	bl	8042620 <__sfputc_r>
 804266c:	1c43      	adds	r3, r0, #1
 804266e:	d1f3      	bne.n	8042658 <__sfputs_r+0xa>
 8042670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08042674 <_vfiprintf_r>:
 8042674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8042678:	460d      	mov	r5, r1
 804267a:	b09d      	sub	sp, #116	; 0x74
 804267c:	4614      	mov	r4, r2
 804267e:	4698      	mov	r8, r3
 8042680:	4606      	mov	r6, r0
 8042682:	b118      	cbz	r0, 804268c <_vfiprintf_r+0x18>
 8042684:	6a03      	ldr	r3, [r0, #32]
 8042686:	b90b      	cbnz	r3, 804268c <_vfiprintf_r+0x18>
 8042688:	f7ff fdcc 	bl	8042224 <__sinit>
 804268c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 804268e:	07d9      	lsls	r1, r3, #31
 8042690:	d405      	bmi.n	804269e <_vfiprintf_r+0x2a>
 8042692:	89ab      	ldrh	r3, [r5, #12]
 8042694:	059a      	lsls	r2, r3, #22
 8042696:	d402      	bmi.n	804269e <_vfiprintf_r+0x2a>
 8042698:	6da8      	ldr	r0, [r5, #88]	; 0x58
 804269a:	f7ff fec7 	bl	804242c <__retarget_lock_acquire_recursive>
 804269e:	89ab      	ldrh	r3, [r5, #12]
 80426a0:	071b      	lsls	r3, r3, #28
 80426a2:	d501      	bpl.n	80426a8 <_vfiprintf_r+0x34>
 80426a4:	692b      	ldr	r3, [r5, #16]
 80426a6:	b99b      	cbnz	r3, 80426d0 <_vfiprintf_r+0x5c>
 80426a8:	4629      	mov	r1, r5
 80426aa:	4630      	mov	r0, r6
 80426ac:	f000 fb78 	bl	8042da0 <__swsetup_r>
 80426b0:	b170      	cbz	r0, 80426d0 <_vfiprintf_r+0x5c>
 80426b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80426b4:	07dc      	lsls	r4, r3, #31
 80426b6:	d504      	bpl.n	80426c2 <_vfiprintf_r+0x4e>
 80426b8:	f04f 30ff 	mov.w	r0, #4294967295
 80426bc:	b01d      	add	sp, #116	; 0x74
 80426be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80426c2:	89ab      	ldrh	r3, [r5, #12]
 80426c4:	0598      	lsls	r0, r3, #22
 80426c6:	d4f7      	bmi.n	80426b8 <_vfiprintf_r+0x44>
 80426c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80426ca:	f7ff feb0 	bl	804242e <__retarget_lock_release_recursive>
 80426ce:	e7f3      	b.n	80426b8 <_vfiprintf_r+0x44>
 80426d0:	2300      	movs	r3, #0
 80426d2:	9309      	str	r3, [sp, #36]	; 0x24
 80426d4:	2320      	movs	r3, #32
 80426d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80426da:	f8cd 800c 	str.w	r8, [sp, #12]
 80426de:	2330      	movs	r3, #48	; 0x30
 80426e0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8042894 <_vfiprintf_r+0x220>
 80426e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80426e8:	f04f 0901 	mov.w	r9, #1
 80426ec:	4623      	mov	r3, r4
 80426ee:	469a      	mov	sl, r3
 80426f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80426f4:	b10a      	cbz	r2, 80426fa <_vfiprintf_r+0x86>
 80426f6:	2a25      	cmp	r2, #37	; 0x25
 80426f8:	d1f9      	bne.n	80426ee <_vfiprintf_r+0x7a>
 80426fa:	ebba 0b04 	subs.w	fp, sl, r4
 80426fe:	d00b      	beq.n	8042718 <_vfiprintf_r+0xa4>
 8042700:	465b      	mov	r3, fp
 8042702:	4622      	mov	r2, r4
 8042704:	4629      	mov	r1, r5
 8042706:	4630      	mov	r0, r6
 8042708:	f7ff ffa1 	bl	804264e <__sfputs_r>
 804270c:	3001      	adds	r0, #1
 804270e:	f000 80a9 	beq.w	8042864 <_vfiprintf_r+0x1f0>
 8042712:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8042714:	445a      	add	r2, fp
 8042716:	9209      	str	r2, [sp, #36]	; 0x24
 8042718:	f89a 3000 	ldrb.w	r3, [sl]
 804271c:	2b00      	cmp	r3, #0
 804271e:	f000 80a1 	beq.w	8042864 <_vfiprintf_r+0x1f0>
 8042722:	2300      	movs	r3, #0
 8042724:	f04f 32ff 	mov.w	r2, #4294967295
 8042728:	e9cd 2305 	strd	r2, r3, [sp, #20]
 804272c:	f10a 0a01 	add.w	sl, sl, #1
 8042730:	9304      	str	r3, [sp, #16]
 8042732:	9307      	str	r3, [sp, #28]
 8042734:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8042738:	931a      	str	r3, [sp, #104]	; 0x68
 804273a:	4654      	mov	r4, sl
 804273c:	2205      	movs	r2, #5
 804273e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8042742:	4854      	ldr	r0, [pc, #336]	; (8042894 <_vfiprintf_r+0x220>)
 8042744:	f7fd fd4c 	bl	80401e0 <memchr>
 8042748:	9a04      	ldr	r2, [sp, #16]
 804274a:	b9d8      	cbnz	r0, 8042784 <_vfiprintf_r+0x110>
 804274c:	06d1      	lsls	r1, r2, #27
 804274e:	bf44      	itt	mi
 8042750:	2320      	movmi	r3, #32
 8042752:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8042756:	0713      	lsls	r3, r2, #28
 8042758:	bf44      	itt	mi
 804275a:	232b      	movmi	r3, #43	; 0x2b
 804275c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8042760:	f89a 3000 	ldrb.w	r3, [sl]
 8042764:	2b2a      	cmp	r3, #42	; 0x2a
 8042766:	d015      	beq.n	8042794 <_vfiprintf_r+0x120>
 8042768:	9a07      	ldr	r2, [sp, #28]
 804276a:	4654      	mov	r4, sl
 804276c:	2000      	movs	r0, #0
 804276e:	f04f 0c0a 	mov.w	ip, #10
 8042772:	4621      	mov	r1, r4
 8042774:	f811 3b01 	ldrb.w	r3, [r1], #1
 8042778:	3b30      	subs	r3, #48	; 0x30
 804277a:	2b09      	cmp	r3, #9
 804277c:	d94d      	bls.n	804281a <_vfiprintf_r+0x1a6>
 804277e:	b1b0      	cbz	r0, 80427ae <_vfiprintf_r+0x13a>
 8042780:	9207      	str	r2, [sp, #28]
 8042782:	e014      	b.n	80427ae <_vfiprintf_r+0x13a>
 8042784:	eba0 0308 	sub.w	r3, r0, r8
 8042788:	fa09 f303 	lsl.w	r3, r9, r3
 804278c:	4313      	orrs	r3, r2
 804278e:	9304      	str	r3, [sp, #16]
 8042790:	46a2      	mov	sl, r4
 8042792:	e7d2      	b.n	804273a <_vfiprintf_r+0xc6>
 8042794:	9b03      	ldr	r3, [sp, #12]
 8042796:	1d19      	adds	r1, r3, #4
 8042798:	681b      	ldr	r3, [r3, #0]
 804279a:	9103      	str	r1, [sp, #12]
 804279c:	2b00      	cmp	r3, #0
 804279e:	bfbb      	ittet	lt
 80427a0:	425b      	neglt	r3, r3
 80427a2:	f042 0202 	orrlt.w	r2, r2, #2
 80427a6:	9307      	strge	r3, [sp, #28]
 80427a8:	9307      	strlt	r3, [sp, #28]
 80427aa:	bfb8      	it	lt
 80427ac:	9204      	strlt	r2, [sp, #16]
 80427ae:	7823      	ldrb	r3, [r4, #0]
 80427b0:	2b2e      	cmp	r3, #46	; 0x2e
 80427b2:	d10c      	bne.n	80427ce <_vfiprintf_r+0x15a>
 80427b4:	7863      	ldrb	r3, [r4, #1]
 80427b6:	2b2a      	cmp	r3, #42	; 0x2a
 80427b8:	d134      	bne.n	8042824 <_vfiprintf_r+0x1b0>
 80427ba:	9b03      	ldr	r3, [sp, #12]
 80427bc:	1d1a      	adds	r2, r3, #4
 80427be:	681b      	ldr	r3, [r3, #0]
 80427c0:	9203      	str	r2, [sp, #12]
 80427c2:	2b00      	cmp	r3, #0
 80427c4:	bfb8      	it	lt
 80427c6:	f04f 33ff 	movlt.w	r3, #4294967295
 80427ca:	3402      	adds	r4, #2
 80427cc:	9305      	str	r3, [sp, #20]
 80427ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80428a4 <_vfiprintf_r+0x230>
 80427d2:	7821      	ldrb	r1, [r4, #0]
 80427d4:	2203      	movs	r2, #3
 80427d6:	4650      	mov	r0, sl
 80427d8:	f7fd fd02 	bl	80401e0 <memchr>
 80427dc:	b138      	cbz	r0, 80427ee <_vfiprintf_r+0x17a>
 80427de:	9b04      	ldr	r3, [sp, #16]
 80427e0:	eba0 000a 	sub.w	r0, r0, sl
 80427e4:	2240      	movs	r2, #64	; 0x40
 80427e6:	4082      	lsls	r2, r0
 80427e8:	4313      	orrs	r3, r2
 80427ea:	3401      	adds	r4, #1
 80427ec:	9304      	str	r3, [sp, #16]
 80427ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80427f2:	4829      	ldr	r0, [pc, #164]	; (8042898 <_vfiprintf_r+0x224>)
 80427f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80427f8:	2206      	movs	r2, #6
 80427fa:	f7fd fcf1 	bl	80401e0 <memchr>
 80427fe:	2800      	cmp	r0, #0
 8042800:	d03f      	beq.n	8042882 <_vfiprintf_r+0x20e>
 8042802:	4b26      	ldr	r3, [pc, #152]	; (804289c <_vfiprintf_r+0x228>)
 8042804:	bb1b      	cbnz	r3, 804284e <_vfiprintf_r+0x1da>
 8042806:	9b03      	ldr	r3, [sp, #12]
 8042808:	3307      	adds	r3, #7
 804280a:	f023 0307 	bic.w	r3, r3, #7
 804280e:	3308      	adds	r3, #8
 8042810:	9303      	str	r3, [sp, #12]
 8042812:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8042814:	443b      	add	r3, r7
 8042816:	9309      	str	r3, [sp, #36]	; 0x24
 8042818:	e768      	b.n	80426ec <_vfiprintf_r+0x78>
 804281a:	fb0c 3202 	mla	r2, ip, r2, r3
 804281e:	460c      	mov	r4, r1
 8042820:	2001      	movs	r0, #1
 8042822:	e7a6      	b.n	8042772 <_vfiprintf_r+0xfe>
 8042824:	2300      	movs	r3, #0
 8042826:	3401      	adds	r4, #1
 8042828:	9305      	str	r3, [sp, #20]
 804282a:	4619      	mov	r1, r3
 804282c:	f04f 0c0a 	mov.w	ip, #10
 8042830:	4620      	mov	r0, r4
 8042832:	f810 2b01 	ldrb.w	r2, [r0], #1
 8042836:	3a30      	subs	r2, #48	; 0x30
 8042838:	2a09      	cmp	r2, #9
 804283a:	d903      	bls.n	8042844 <_vfiprintf_r+0x1d0>
 804283c:	2b00      	cmp	r3, #0
 804283e:	d0c6      	beq.n	80427ce <_vfiprintf_r+0x15a>
 8042840:	9105      	str	r1, [sp, #20]
 8042842:	e7c4      	b.n	80427ce <_vfiprintf_r+0x15a>
 8042844:	fb0c 2101 	mla	r1, ip, r1, r2
 8042848:	4604      	mov	r4, r0
 804284a:	2301      	movs	r3, #1
 804284c:	e7f0      	b.n	8042830 <_vfiprintf_r+0x1bc>
 804284e:	ab03      	add	r3, sp, #12
 8042850:	9300      	str	r3, [sp, #0]
 8042852:	462a      	mov	r2, r5
 8042854:	4b12      	ldr	r3, [pc, #72]	; (80428a0 <_vfiprintf_r+0x22c>)
 8042856:	a904      	add	r1, sp, #16
 8042858:	4630      	mov	r0, r6
 804285a:	f3af 8000 	nop.w
 804285e:	4607      	mov	r7, r0
 8042860:	1c78      	adds	r0, r7, #1
 8042862:	d1d6      	bne.n	8042812 <_vfiprintf_r+0x19e>
 8042864:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8042866:	07d9      	lsls	r1, r3, #31
 8042868:	d405      	bmi.n	8042876 <_vfiprintf_r+0x202>
 804286a:	89ab      	ldrh	r3, [r5, #12]
 804286c:	059a      	lsls	r2, r3, #22
 804286e:	d402      	bmi.n	8042876 <_vfiprintf_r+0x202>
 8042870:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8042872:	f7ff fddc 	bl	804242e <__retarget_lock_release_recursive>
 8042876:	89ab      	ldrh	r3, [r5, #12]
 8042878:	065b      	lsls	r3, r3, #25
 804287a:	f53f af1d 	bmi.w	80426b8 <_vfiprintf_r+0x44>
 804287e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8042880:	e71c      	b.n	80426bc <_vfiprintf_r+0x48>
 8042882:	ab03      	add	r3, sp, #12
 8042884:	9300      	str	r3, [sp, #0]
 8042886:	462a      	mov	r2, r5
 8042888:	4b05      	ldr	r3, [pc, #20]	; (80428a0 <_vfiprintf_r+0x22c>)
 804288a:	a904      	add	r1, sp, #16
 804288c:	4630      	mov	r0, r6
 804288e:	f000 f879 	bl	8042984 <_printf_i>
 8042892:	e7e4      	b.n	804285e <_vfiprintf_r+0x1ea>
 8042894:	08042fc8 	.word	0x08042fc8
 8042898:	08042fd2 	.word	0x08042fd2
 804289c:	00000000 	.word	0x00000000
 80428a0:	0804264f 	.word	0x0804264f
 80428a4:	08042fce 	.word	0x08042fce

080428a8 <_printf_common>:
 80428a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80428ac:	4616      	mov	r6, r2
 80428ae:	4699      	mov	r9, r3
 80428b0:	688a      	ldr	r2, [r1, #8]
 80428b2:	690b      	ldr	r3, [r1, #16]
 80428b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80428b8:	4293      	cmp	r3, r2
 80428ba:	bfb8      	it	lt
 80428bc:	4613      	movlt	r3, r2
 80428be:	6033      	str	r3, [r6, #0]
 80428c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80428c4:	4607      	mov	r7, r0
 80428c6:	460c      	mov	r4, r1
 80428c8:	b10a      	cbz	r2, 80428ce <_printf_common+0x26>
 80428ca:	3301      	adds	r3, #1
 80428cc:	6033      	str	r3, [r6, #0]
 80428ce:	6823      	ldr	r3, [r4, #0]
 80428d0:	0699      	lsls	r1, r3, #26
 80428d2:	bf42      	ittt	mi
 80428d4:	6833      	ldrmi	r3, [r6, #0]
 80428d6:	3302      	addmi	r3, #2
 80428d8:	6033      	strmi	r3, [r6, #0]
 80428da:	6825      	ldr	r5, [r4, #0]
 80428dc:	f015 0506 	ands.w	r5, r5, #6
 80428e0:	d106      	bne.n	80428f0 <_printf_common+0x48>
 80428e2:	f104 0a19 	add.w	sl, r4, #25
 80428e6:	68e3      	ldr	r3, [r4, #12]
 80428e8:	6832      	ldr	r2, [r6, #0]
 80428ea:	1a9b      	subs	r3, r3, r2
 80428ec:	42ab      	cmp	r3, r5
 80428ee:	dc26      	bgt.n	804293e <_printf_common+0x96>
 80428f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80428f4:	1e13      	subs	r3, r2, #0
 80428f6:	6822      	ldr	r2, [r4, #0]
 80428f8:	bf18      	it	ne
 80428fa:	2301      	movne	r3, #1
 80428fc:	0692      	lsls	r2, r2, #26
 80428fe:	d42b      	bmi.n	8042958 <_printf_common+0xb0>
 8042900:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8042904:	4649      	mov	r1, r9
 8042906:	4638      	mov	r0, r7
 8042908:	47c0      	blx	r8
 804290a:	3001      	adds	r0, #1
 804290c:	d01e      	beq.n	804294c <_printf_common+0xa4>
 804290e:	6823      	ldr	r3, [r4, #0]
 8042910:	6922      	ldr	r2, [r4, #16]
 8042912:	f003 0306 	and.w	r3, r3, #6
 8042916:	2b04      	cmp	r3, #4
 8042918:	bf02      	ittt	eq
 804291a:	68e5      	ldreq	r5, [r4, #12]
 804291c:	6833      	ldreq	r3, [r6, #0]
 804291e:	1aed      	subeq	r5, r5, r3
 8042920:	68a3      	ldr	r3, [r4, #8]
 8042922:	bf0c      	ite	eq
 8042924:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8042928:	2500      	movne	r5, #0
 804292a:	4293      	cmp	r3, r2
 804292c:	bfc4      	itt	gt
 804292e:	1a9b      	subgt	r3, r3, r2
 8042930:	18ed      	addgt	r5, r5, r3
 8042932:	2600      	movs	r6, #0
 8042934:	341a      	adds	r4, #26
 8042936:	42b5      	cmp	r5, r6
 8042938:	d11a      	bne.n	8042970 <_printf_common+0xc8>
 804293a:	2000      	movs	r0, #0
 804293c:	e008      	b.n	8042950 <_printf_common+0xa8>
 804293e:	2301      	movs	r3, #1
 8042940:	4652      	mov	r2, sl
 8042942:	4649      	mov	r1, r9
 8042944:	4638      	mov	r0, r7
 8042946:	47c0      	blx	r8
 8042948:	3001      	adds	r0, #1
 804294a:	d103      	bne.n	8042954 <_printf_common+0xac>
 804294c:	f04f 30ff 	mov.w	r0, #4294967295
 8042950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8042954:	3501      	adds	r5, #1
 8042956:	e7c6      	b.n	80428e6 <_printf_common+0x3e>
 8042958:	18e1      	adds	r1, r4, r3
 804295a:	1c5a      	adds	r2, r3, #1
 804295c:	2030      	movs	r0, #48	; 0x30
 804295e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8042962:	4422      	add	r2, r4
 8042964:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8042968:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 804296c:	3302      	adds	r3, #2
 804296e:	e7c7      	b.n	8042900 <_printf_common+0x58>
 8042970:	2301      	movs	r3, #1
 8042972:	4622      	mov	r2, r4
 8042974:	4649      	mov	r1, r9
 8042976:	4638      	mov	r0, r7
 8042978:	47c0      	blx	r8
 804297a:	3001      	adds	r0, #1
 804297c:	d0e6      	beq.n	804294c <_printf_common+0xa4>
 804297e:	3601      	adds	r6, #1
 8042980:	e7d9      	b.n	8042936 <_printf_common+0x8e>
	...

08042984 <_printf_i>:
 8042984:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8042988:	7e0f      	ldrb	r7, [r1, #24]
 804298a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 804298c:	2f78      	cmp	r7, #120	; 0x78
 804298e:	4691      	mov	r9, r2
 8042990:	4680      	mov	r8, r0
 8042992:	460c      	mov	r4, r1
 8042994:	469a      	mov	sl, r3
 8042996:	f101 0243 	add.w	r2, r1, #67	; 0x43
 804299a:	d807      	bhi.n	80429ac <_printf_i+0x28>
 804299c:	2f62      	cmp	r7, #98	; 0x62
 804299e:	d80a      	bhi.n	80429b6 <_printf_i+0x32>
 80429a0:	2f00      	cmp	r7, #0
 80429a2:	f000 80d4 	beq.w	8042b4e <_printf_i+0x1ca>
 80429a6:	2f58      	cmp	r7, #88	; 0x58
 80429a8:	f000 80c0 	beq.w	8042b2c <_printf_i+0x1a8>
 80429ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80429b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80429b4:	e03a      	b.n	8042a2c <_printf_i+0xa8>
 80429b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80429ba:	2b15      	cmp	r3, #21
 80429bc:	d8f6      	bhi.n	80429ac <_printf_i+0x28>
 80429be:	a101      	add	r1, pc, #4	; (adr r1, 80429c4 <_printf_i+0x40>)
 80429c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80429c4:	08042a1d 	.word	0x08042a1d
 80429c8:	08042a31 	.word	0x08042a31
 80429cc:	080429ad 	.word	0x080429ad
 80429d0:	080429ad 	.word	0x080429ad
 80429d4:	080429ad 	.word	0x080429ad
 80429d8:	080429ad 	.word	0x080429ad
 80429dc:	08042a31 	.word	0x08042a31
 80429e0:	080429ad 	.word	0x080429ad
 80429e4:	080429ad 	.word	0x080429ad
 80429e8:	080429ad 	.word	0x080429ad
 80429ec:	080429ad 	.word	0x080429ad
 80429f0:	08042b35 	.word	0x08042b35
 80429f4:	08042a5d 	.word	0x08042a5d
 80429f8:	08042aef 	.word	0x08042aef
 80429fc:	080429ad 	.word	0x080429ad
 8042a00:	080429ad 	.word	0x080429ad
 8042a04:	08042b57 	.word	0x08042b57
 8042a08:	080429ad 	.word	0x080429ad
 8042a0c:	08042a5d 	.word	0x08042a5d
 8042a10:	080429ad 	.word	0x080429ad
 8042a14:	080429ad 	.word	0x080429ad
 8042a18:	08042af7 	.word	0x08042af7
 8042a1c:	682b      	ldr	r3, [r5, #0]
 8042a1e:	1d1a      	adds	r2, r3, #4
 8042a20:	681b      	ldr	r3, [r3, #0]
 8042a22:	602a      	str	r2, [r5, #0]
 8042a24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8042a28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8042a2c:	2301      	movs	r3, #1
 8042a2e:	e09f      	b.n	8042b70 <_printf_i+0x1ec>
 8042a30:	6820      	ldr	r0, [r4, #0]
 8042a32:	682b      	ldr	r3, [r5, #0]
 8042a34:	0607      	lsls	r7, r0, #24
 8042a36:	f103 0104 	add.w	r1, r3, #4
 8042a3a:	6029      	str	r1, [r5, #0]
 8042a3c:	d501      	bpl.n	8042a42 <_printf_i+0xbe>
 8042a3e:	681e      	ldr	r6, [r3, #0]
 8042a40:	e003      	b.n	8042a4a <_printf_i+0xc6>
 8042a42:	0646      	lsls	r6, r0, #25
 8042a44:	d5fb      	bpl.n	8042a3e <_printf_i+0xba>
 8042a46:	f9b3 6000 	ldrsh.w	r6, [r3]
 8042a4a:	2e00      	cmp	r6, #0
 8042a4c:	da03      	bge.n	8042a56 <_printf_i+0xd2>
 8042a4e:	232d      	movs	r3, #45	; 0x2d
 8042a50:	4276      	negs	r6, r6
 8042a52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8042a56:	485a      	ldr	r0, [pc, #360]	; (8042bc0 <_printf_i+0x23c>)
 8042a58:	230a      	movs	r3, #10
 8042a5a:	e012      	b.n	8042a82 <_printf_i+0xfe>
 8042a5c:	682b      	ldr	r3, [r5, #0]
 8042a5e:	6820      	ldr	r0, [r4, #0]
 8042a60:	1d19      	adds	r1, r3, #4
 8042a62:	6029      	str	r1, [r5, #0]
 8042a64:	0605      	lsls	r5, r0, #24
 8042a66:	d501      	bpl.n	8042a6c <_printf_i+0xe8>
 8042a68:	681e      	ldr	r6, [r3, #0]
 8042a6a:	e002      	b.n	8042a72 <_printf_i+0xee>
 8042a6c:	0641      	lsls	r1, r0, #25
 8042a6e:	d5fb      	bpl.n	8042a68 <_printf_i+0xe4>
 8042a70:	881e      	ldrh	r6, [r3, #0]
 8042a72:	4853      	ldr	r0, [pc, #332]	; (8042bc0 <_printf_i+0x23c>)
 8042a74:	2f6f      	cmp	r7, #111	; 0x6f
 8042a76:	bf0c      	ite	eq
 8042a78:	2308      	moveq	r3, #8
 8042a7a:	230a      	movne	r3, #10
 8042a7c:	2100      	movs	r1, #0
 8042a7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8042a82:	6865      	ldr	r5, [r4, #4]
 8042a84:	60a5      	str	r5, [r4, #8]
 8042a86:	2d00      	cmp	r5, #0
 8042a88:	bfa2      	ittt	ge
 8042a8a:	6821      	ldrge	r1, [r4, #0]
 8042a8c:	f021 0104 	bicge.w	r1, r1, #4
 8042a90:	6021      	strge	r1, [r4, #0]
 8042a92:	b90e      	cbnz	r6, 8042a98 <_printf_i+0x114>
 8042a94:	2d00      	cmp	r5, #0
 8042a96:	d04b      	beq.n	8042b30 <_printf_i+0x1ac>
 8042a98:	4615      	mov	r5, r2
 8042a9a:	fbb6 f1f3 	udiv	r1, r6, r3
 8042a9e:	fb03 6711 	mls	r7, r3, r1, r6
 8042aa2:	5dc7      	ldrb	r7, [r0, r7]
 8042aa4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8042aa8:	4637      	mov	r7, r6
 8042aaa:	42bb      	cmp	r3, r7
 8042aac:	460e      	mov	r6, r1
 8042aae:	d9f4      	bls.n	8042a9a <_printf_i+0x116>
 8042ab0:	2b08      	cmp	r3, #8
 8042ab2:	d10b      	bne.n	8042acc <_printf_i+0x148>
 8042ab4:	6823      	ldr	r3, [r4, #0]
 8042ab6:	07de      	lsls	r6, r3, #31
 8042ab8:	d508      	bpl.n	8042acc <_printf_i+0x148>
 8042aba:	6923      	ldr	r3, [r4, #16]
 8042abc:	6861      	ldr	r1, [r4, #4]
 8042abe:	4299      	cmp	r1, r3
 8042ac0:	bfde      	ittt	le
 8042ac2:	2330      	movle	r3, #48	; 0x30
 8042ac4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8042ac8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8042acc:	1b52      	subs	r2, r2, r5
 8042ace:	6122      	str	r2, [r4, #16]
 8042ad0:	f8cd a000 	str.w	sl, [sp]
 8042ad4:	464b      	mov	r3, r9
 8042ad6:	aa03      	add	r2, sp, #12
 8042ad8:	4621      	mov	r1, r4
 8042ada:	4640      	mov	r0, r8
 8042adc:	f7ff fee4 	bl	80428a8 <_printf_common>
 8042ae0:	3001      	adds	r0, #1
 8042ae2:	d14a      	bne.n	8042b7a <_printf_i+0x1f6>
 8042ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8042ae8:	b004      	add	sp, #16
 8042aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8042aee:	6823      	ldr	r3, [r4, #0]
 8042af0:	f043 0320 	orr.w	r3, r3, #32
 8042af4:	6023      	str	r3, [r4, #0]
 8042af6:	4833      	ldr	r0, [pc, #204]	; (8042bc4 <_printf_i+0x240>)
 8042af8:	2778      	movs	r7, #120	; 0x78
 8042afa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8042afe:	6823      	ldr	r3, [r4, #0]
 8042b00:	6829      	ldr	r1, [r5, #0]
 8042b02:	061f      	lsls	r7, r3, #24
 8042b04:	f851 6b04 	ldr.w	r6, [r1], #4
 8042b08:	d402      	bmi.n	8042b10 <_printf_i+0x18c>
 8042b0a:	065f      	lsls	r7, r3, #25
 8042b0c:	bf48      	it	mi
 8042b0e:	b2b6      	uxthmi	r6, r6
 8042b10:	07df      	lsls	r7, r3, #31
 8042b12:	bf48      	it	mi
 8042b14:	f043 0320 	orrmi.w	r3, r3, #32
 8042b18:	6029      	str	r1, [r5, #0]
 8042b1a:	bf48      	it	mi
 8042b1c:	6023      	strmi	r3, [r4, #0]
 8042b1e:	b91e      	cbnz	r6, 8042b28 <_printf_i+0x1a4>
 8042b20:	6823      	ldr	r3, [r4, #0]
 8042b22:	f023 0320 	bic.w	r3, r3, #32
 8042b26:	6023      	str	r3, [r4, #0]
 8042b28:	2310      	movs	r3, #16
 8042b2a:	e7a7      	b.n	8042a7c <_printf_i+0xf8>
 8042b2c:	4824      	ldr	r0, [pc, #144]	; (8042bc0 <_printf_i+0x23c>)
 8042b2e:	e7e4      	b.n	8042afa <_printf_i+0x176>
 8042b30:	4615      	mov	r5, r2
 8042b32:	e7bd      	b.n	8042ab0 <_printf_i+0x12c>
 8042b34:	682b      	ldr	r3, [r5, #0]
 8042b36:	6826      	ldr	r6, [r4, #0]
 8042b38:	6961      	ldr	r1, [r4, #20]
 8042b3a:	1d18      	adds	r0, r3, #4
 8042b3c:	6028      	str	r0, [r5, #0]
 8042b3e:	0635      	lsls	r5, r6, #24
 8042b40:	681b      	ldr	r3, [r3, #0]
 8042b42:	d501      	bpl.n	8042b48 <_printf_i+0x1c4>
 8042b44:	6019      	str	r1, [r3, #0]
 8042b46:	e002      	b.n	8042b4e <_printf_i+0x1ca>
 8042b48:	0670      	lsls	r0, r6, #25
 8042b4a:	d5fb      	bpl.n	8042b44 <_printf_i+0x1c0>
 8042b4c:	8019      	strh	r1, [r3, #0]
 8042b4e:	2300      	movs	r3, #0
 8042b50:	6123      	str	r3, [r4, #16]
 8042b52:	4615      	mov	r5, r2
 8042b54:	e7bc      	b.n	8042ad0 <_printf_i+0x14c>
 8042b56:	682b      	ldr	r3, [r5, #0]
 8042b58:	1d1a      	adds	r2, r3, #4
 8042b5a:	602a      	str	r2, [r5, #0]
 8042b5c:	681d      	ldr	r5, [r3, #0]
 8042b5e:	6862      	ldr	r2, [r4, #4]
 8042b60:	2100      	movs	r1, #0
 8042b62:	4628      	mov	r0, r5
 8042b64:	f7fd fb3c 	bl	80401e0 <memchr>
 8042b68:	b108      	cbz	r0, 8042b6e <_printf_i+0x1ea>
 8042b6a:	1b40      	subs	r0, r0, r5
 8042b6c:	6060      	str	r0, [r4, #4]
 8042b6e:	6863      	ldr	r3, [r4, #4]
 8042b70:	6123      	str	r3, [r4, #16]
 8042b72:	2300      	movs	r3, #0
 8042b74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8042b78:	e7aa      	b.n	8042ad0 <_printf_i+0x14c>
 8042b7a:	6923      	ldr	r3, [r4, #16]
 8042b7c:	462a      	mov	r2, r5
 8042b7e:	4649      	mov	r1, r9
 8042b80:	4640      	mov	r0, r8
 8042b82:	47d0      	blx	sl
 8042b84:	3001      	adds	r0, #1
 8042b86:	d0ad      	beq.n	8042ae4 <_printf_i+0x160>
 8042b88:	6823      	ldr	r3, [r4, #0]
 8042b8a:	079b      	lsls	r3, r3, #30
 8042b8c:	d413      	bmi.n	8042bb6 <_printf_i+0x232>
 8042b8e:	68e0      	ldr	r0, [r4, #12]
 8042b90:	9b03      	ldr	r3, [sp, #12]
 8042b92:	4298      	cmp	r0, r3
 8042b94:	bfb8      	it	lt
 8042b96:	4618      	movlt	r0, r3
 8042b98:	e7a6      	b.n	8042ae8 <_printf_i+0x164>
 8042b9a:	2301      	movs	r3, #1
 8042b9c:	4632      	mov	r2, r6
 8042b9e:	4649      	mov	r1, r9
 8042ba0:	4640      	mov	r0, r8
 8042ba2:	47d0      	blx	sl
 8042ba4:	3001      	adds	r0, #1
 8042ba6:	d09d      	beq.n	8042ae4 <_printf_i+0x160>
 8042ba8:	3501      	adds	r5, #1
 8042baa:	68e3      	ldr	r3, [r4, #12]
 8042bac:	9903      	ldr	r1, [sp, #12]
 8042bae:	1a5b      	subs	r3, r3, r1
 8042bb0:	42ab      	cmp	r3, r5
 8042bb2:	dcf2      	bgt.n	8042b9a <_printf_i+0x216>
 8042bb4:	e7eb      	b.n	8042b8e <_printf_i+0x20a>
 8042bb6:	2500      	movs	r5, #0
 8042bb8:	f104 0619 	add.w	r6, r4, #25
 8042bbc:	e7f5      	b.n	8042baa <_printf_i+0x226>
 8042bbe:	bf00      	nop
 8042bc0:	08042fd9 	.word	0x08042fd9
 8042bc4:	08042fea 	.word	0x08042fea

08042bc8 <__sflush_r>:
 8042bc8:	898a      	ldrh	r2, [r1, #12]
 8042bca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8042bce:	4605      	mov	r5, r0
 8042bd0:	0710      	lsls	r0, r2, #28
 8042bd2:	460c      	mov	r4, r1
 8042bd4:	d458      	bmi.n	8042c88 <__sflush_r+0xc0>
 8042bd6:	684b      	ldr	r3, [r1, #4]
 8042bd8:	2b00      	cmp	r3, #0
 8042bda:	dc05      	bgt.n	8042be8 <__sflush_r+0x20>
 8042bdc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8042bde:	2b00      	cmp	r3, #0
 8042be0:	dc02      	bgt.n	8042be8 <__sflush_r+0x20>
 8042be2:	2000      	movs	r0, #0
 8042be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8042be8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8042bea:	2e00      	cmp	r6, #0
 8042bec:	d0f9      	beq.n	8042be2 <__sflush_r+0x1a>
 8042bee:	2300      	movs	r3, #0
 8042bf0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8042bf4:	682f      	ldr	r7, [r5, #0]
 8042bf6:	6a21      	ldr	r1, [r4, #32]
 8042bf8:	602b      	str	r3, [r5, #0]
 8042bfa:	d032      	beq.n	8042c62 <__sflush_r+0x9a>
 8042bfc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8042bfe:	89a3      	ldrh	r3, [r4, #12]
 8042c00:	075a      	lsls	r2, r3, #29
 8042c02:	d505      	bpl.n	8042c10 <__sflush_r+0x48>
 8042c04:	6863      	ldr	r3, [r4, #4]
 8042c06:	1ac0      	subs	r0, r0, r3
 8042c08:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8042c0a:	b10b      	cbz	r3, 8042c10 <__sflush_r+0x48>
 8042c0c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8042c0e:	1ac0      	subs	r0, r0, r3
 8042c10:	2300      	movs	r3, #0
 8042c12:	4602      	mov	r2, r0
 8042c14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8042c16:	6a21      	ldr	r1, [r4, #32]
 8042c18:	4628      	mov	r0, r5
 8042c1a:	47b0      	blx	r6
 8042c1c:	1c43      	adds	r3, r0, #1
 8042c1e:	89a3      	ldrh	r3, [r4, #12]
 8042c20:	d106      	bne.n	8042c30 <__sflush_r+0x68>
 8042c22:	6829      	ldr	r1, [r5, #0]
 8042c24:	291d      	cmp	r1, #29
 8042c26:	d82b      	bhi.n	8042c80 <__sflush_r+0xb8>
 8042c28:	4a29      	ldr	r2, [pc, #164]	; (8042cd0 <__sflush_r+0x108>)
 8042c2a:	410a      	asrs	r2, r1
 8042c2c:	07d6      	lsls	r6, r2, #31
 8042c2e:	d427      	bmi.n	8042c80 <__sflush_r+0xb8>
 8042c30:	2200      	movs	r2, #0
 8042c32:	6062      	str	r2, [r4, #4]
 8042c34:	04d9      	lsls	r1, r3, #19
 8042c36:	6922      	ldr	r2, [r4, #16]
 8042c38:	6022      	str	r2, [r4, #0]
 8042c3a:	d504      	bpl.n	8042c46 <__sflush_r+0x7e>
 8042c3c:	1c42      	adds	r2, r0, #1
 8042c3e:	d101      	bne.n	8042c44 <__sflush_r+0x7c>
 8042c40:	682b      	ldr	r3, [r5, #0]
 8042c42:	b903      	cbnz	r3, 8042c46 <__sflush_r+0x7e>
 8042c44:	6560      	str	r0, [r4, #84]	; 0x54
 8042c46:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8042c48:	602f      	str	r7, [r5, #0]
 8042c4a:	2900      	cmp	r1, #0
 8042c4c:	d0c9      	beq.n	8042be2 <__sflush_r+0x1a>
 8042c4e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8042c52:	4299      	cmp	r1, r3
 8042c54:	d002      	beq.n	8042c5c <__sflush_r+0x94>
 8042c56:	4628      	mov	r0, r5
 8042c58:	f7ff fbea 	bl	8042430 <_free_r>
 8042c5c:	2000      	movs	r0, #0
 8042c5e:	6360      	str	r0, [r4, #52]	; 0x34
 8042c60:	e7c0      	b.n	8042be4 <__sflush_r+0x1c>
 8042c62:	2301      	movs	r3, #1
 8042c64:	4628      	mov	r0, r5
 8042c66:	47b0      	blx	r6
 8042c68:	1c41      	adds	r1, r0, #1
 8042c6a:	d1c8      	bne.n	8042bfe <__sflush_r+0x36>
 8042c6c:	682b      	ldr	r3, [r5, #0]
 8042c6e:	2b00      	cmp	r3, #0
 8042c70:	d0c5      	beq.n	8042bfe <__sflush_r+0x36>
 8042c72:	2b1d      	cmp	r3, #29
 8042c74:	d001      	beq.n	8042c7a <__sflush_r+0xb2>
 8042c76:	2b16      	cmp	r3, #22
 8042c78:	d101      	bne.n	8042c7e <__sflush_r+0xb6>
 8042c7a:	602f      	str	r7, [r5, #0]
 8042c7c:	e7b1      	b.n	8042be2 <__sflush_r+0x1a>
 8042c7e:	89a3      	ldrh	r3, [r4, #12]
 8042c80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8042c84:	81a3      	strh	r3, [r4, #12]
 8042c86:	e7ad      	b.n	8042be4 <__sflush_r+0x1c>
 8042c88:	690f      	ldr	r7, [r1, #16]
 8042c8a:	2f00      	cmp	r7, #0
 8042c8c:	d0a9      	beq.n	8042be2 <__sflush_r+0x1a>
 8042c8e:	0793      	lsls	r3, r2, #30
 8042c90:	680e      	ldr	r6, [r1, #0]
 8042c92:	bf08      	it	eq
 8042c94:	694b      	ldreq	r3, [r1, #20]
 8042c96:	600f      	str	r7, [r1, #0]
 8042c98:	bf18      	it	ne
 8042c9a:	2300      	movne	r3, #0
 8042c9c:	eba6 0807 	sub.w	r8, r6, r7
 8042ca0:	608b      	str	r3, [r1, #8]
 8042ca2:	f1b8 0f00 	cmp.w	r8, #0
 8042ca6:	dd9c      	ble.n	8042be2 <__sflush_r+0x1a>
 8042ca8:	6a21      	ldr	r1, [r4, #32]
 8042caa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8042cac:	4643      	mov	r3, r8
 8042cae:	463a      	mov	r2, r7
 8042cb0:	4628      	mov	r0, r5
 8042cb2:	47b0      	blx	r6
 8042cb4:	2800      	cmp	r0, #0
 8042cb6:	dc06      	bgt.n	8042cc6 <__sflush_r+0xfe>
 8042cb8:	89a3      	ldrh	r3, [r4, #12]
 8042cba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8042cbe:	81a3      	strh	r3, [r4, #12]
 8042cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8042cc4:	e78e      	b.n	8042be4 <__sflush_r+0x1c>
 8042cc6:	4407      	add	r7, r0
 8042cc8:	eba8 0800 	sub.w	r8, r8, r0
 8042ccc:	e7e9      	b.n	8042ca2 <__sflush_r+0xda>
 8042cce:	bf00      	nop
 8042cd0:	dfbffffe 	.word	0xdfbffffe

08042cd4 <_fflush_r>:
 8042cd4:	b538      	push	{r3, r4, r5, lr}
 8042cd6:	690b      	ldr	r3, [r1, #16]
 8042cd8:	4605      	mov	r5, r0
 8042cda:	460c      	mov	r4, r1
 8042cdc:	b913      	cbnz	r3, 8042ce4 <_fflush_r+0x10>
 8042cde:	2500      	movs	r5, #0
 8042ce0:	4628      	mov	r0, r5
 8042ce2:	bd38      	pop	{r3, r4, r5, pc}
 8042ce4:	b118      	cbz	r0, 8042cee <_fflush_r+0x1a>
 8042ce6:	6a03      	ldr	r3, [r0, #32]
 8042ce8:	b90b      	cbnz	r3, 8042cee <_fflush_r+0x1a>
 8042cea:	f7ff fa9b 	bl	8042224 <__sinit>
 8042cee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8042cf2:	2b00      	cmp	r3, #0
 8042cf4:	d0f3      	beq.n	8042cde <_fflush_r+0xa>
 8042cf6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8042cf8:	07d0      	lsls	r0, r2, #31
 8042cfa:	d404      	bmi.n	8042d06 <_fflush_r+0x32>
 8042cfc:	0599      	lsls	r1, r3, #22
 8042cfe:	d402      	bmi.n	8042d06 <_fflush_r+0x32>
 8042d00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8042d02:	f7ff fb93 	bl	804242c <__retarget_lock_acquire_recursive>
 8042d06:	4628      	mov	r0, r5
 8042d08:	4621      	mov	r1, r4
 8042d0a:	f7ff ff5d 	bl	8042bc8 <__sflush_r>
 8042d0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8042d10:	07da      	lsls	r2, r3, #31
 8042d12:	4605      	mov	r5, r0
 8042d14:	d4e4      	bmi.n	8042ce0 <_fflush_r+0xc>
 8042d16:	89a3      	ldrh	r3, [r4, #12]
 8042d18:	059b      	lsls	r3, r3, #22
 8042d1a:	d4e1      	bmi.n	8042ce0 <_fflush_r+0xc>
 8042d1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8042d1e:	f7ff fb86 	bl	804242e <__retarget_lock_release_recursive>
 8042d22:	e7dd      	b.n	8042ce0 <_fflush_r+0xc>

08042d24 <__swbuf_r>:
 8042d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8042d26:	460e      	mov	r6, r1
 8042d28:	4614      	mov	r4, r2
 8042d2a:	4605      	mov	r5, r0
 8042d2c:	b118      	cbz	r0, 8042d36 <__swbuf_r+0x12>
 8042d2e:	6a03      	ldr	r3, [r0, #32]
 8042d30:	b90b      	cbnz	r3, 8042d36 <__swbuf_r+0x12>
 8042d32:	f7ff fa77 	bl	8042224 <__sinit>
 8042d36:	69a3      	ldr	r3, [r4, #24]
 8042d38:	60a3      	str	r3, [r4, #8]
 8042d3a:	89a3      	ldrh	r3, [r4, #12]
 8042d3c:	071a      	lsls	r2, r3, #28
 8042d3e:	d525      	bpl.n	8042d8c <__swbuf_r+0x68>
 8042d40:	6923      	ldr	r3, [r4, #16]
 8042d42:	b31b      	cbz	r3, 8042d8c <__swbuf_r+0x68>
 8042d44:	6823      	ldr	r3, [r4, #0]
 8042d46:	6922      	ldr	r2, [r4, #16]
 8042d48:	1a98      	subs	r0, r3, r2
 8042d4a:	6963      	ldr	r3, [r4, #20]
 8042d4c:	b2f6      	uxtb	r6, r6
 8042d4e:	4283      	cmp	r3, r0
 8042d50:	4637      	mov	r7, r6
 8042d52:	dc04      	bgt.n	8042d5e <__swbuf_r+0x3a>
 8042d54:	4621      	mov	r1, r4
 8042d56:	4628      	mov	r0, r5
 8042d58:	f7ff ffbc 	bl	8042cd4 <_fflush_r>
 8042d5c:	b9e0      	cbnz	r0, 8042d98 <__swbuf_r+0x74>
 8042d5e:	68a3      	ldr	r3, [r4, #8]
 8042d60:	3b01      	subs	r3, #1
 8042d62:	60a3      	str	r3, [r4, #8]
 8042d64:	6823      	ldr	r3, [r4, #0]
 8042d66:	1c5a      	adds	r2, r3, #1
 8042d68:	6022      	str	r2, [r4, #0]
 8042d6a:	701e      	strb	r6, [r3, #0]
 8042d6c:	6962      	ldr	r2, [r4, #20]
 8042d6e:	1c43      	adds	r3, r0, #1
 8042d70:	429a      	cmp	r2, r3
 8042d72:	d004      	beq.n	8042d7e <__swbuf_r+0x5a>
 8042d74:	89a3      	ldrh	r3, [r4, #12]
 8042d76:	07db      	lsls	r3, r3, #31
 8042d78:	d506      	bpl.n	8042d88 <__swbuf_r+0x64>
 8042d7a:	2e0a      	cmp	r6, #10
 8042d7c:	d104      	bne.n	8042d88 <__swbuf_r+0x64>
 8042d7e:	4621      	mov	r1, r4
 8042d80:	4628      	mov	r0, r5
 8042d82:	f7ff ffa7 	bl	8042cd4 <_fflush_r>
 8042d86:	b938      	cbnz	r0, 8042d98 <__swbuf_r+0x74>
 8042d88:	4638      	mov	r0, r7
 8042d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8042d8c:	4621      	mov	r1, r4
 8042d8e:	4628      	mov	r0, r5
 8042d90:	f000 f806 	bl	8042da0 <__swsetup_r>
 8042d94:	2800      	cmp	r0, #0
 8042d96:	d0d5      	beq.n	8042d44 <__swbuf_r+0x20>
 8042d98:	f04f 37ff 	mov.w	r7, #4294967295
 8042d9c:	e7f4      	b.n	8042d88 <__swbuf_r+0x64>
	...

08042da0 <__swsetup_r>:
 8042da0:	b538      	push	{r3, r4, r5, lr}
 8042da2:	4b2a      	ldr	r3, [pc, #168]	; (8042e4c <__swsetup_r+0xac>)
 8042da4:	4605      	mov	r5, r0
 8042da6:	6818      	ldr	r0, [r3, #0]
 8042da8:	460c      	mov	r4, r1
 8042daa:	b118      	cbz	r0, 8042db4 <__swsetup_r+0x14>
 8042dac:	6a03      	ldr	r3, [r0, #32]
 8042dae:	b90b      	cbnz	r3, 8042db4 <__swsetup_r+0x14>
 8042db0:	f7ff fa38 	bl	8042224 <__sinit>
 8042db4:	89a3      	ldrh	r3, [r4, #12]
 8042db6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8042dba:	0718      	lsls	r0, r3, #28
 8042dbc:	d422      	bmi.n	8042e04 <__swsetup_r+0x64>
 8042dbe:	06d9      	lsls	r1, r3, #27
 8042dc0:	d407      	bmi.n	8042dd2 <__swsetup_r+0x32>
 8042dc2:	2309      	movs	r3, #9
 8042dc4:	602b      	str	r3, [r5, #0]
 8042dc6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8042dca:	81a3      	strh	r3, [r4, #12]
 8042dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8042dd0:	e034      	b.n	8042e3c <__swsetup_r+0x9c>
 8042dd2:	0758      	lsls	r0, r3, #29
 8042dd4:	d512      	bpl.n	8042dfc <__swsetup_r+0x5c>
 8042dd6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8042dd8:	b141      	cbz	r1, 8042dec <__swsetup_r+0x4c>
 8042dda:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8042dde:	4299      	cmp	r1, r3
 8042de0:	d002      	beq.n	8042de8 <__swsetup_r+0x48>
 8042de2:	4628      	mov	r0, r5
 8042de4:	f7ff fb24 	bl	8042430 <_free_r>
 8042de8:	2300      	movs	r3, #0
 8042dea:	6363      	str	r3, [r4, #52]	; 0x34
 8042dec:	89a3      	ldrh	r3, [r4, #12]
 8042dee:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8042df2:	81a3      	strh	r3, [r4, #12]
 8042df4:	2300      	movs	r3, #0
 8042df6:	6063      	str	r3, [r4, #4]
 8042df8:	6923      	ldr	r3, [r4, #16]
 8042dfa:	6023      	str	r3, [r4, #0]
 8042dfc:	89a3      	ldrh	r3, [r4, #12]
 8042dfe:	f043 0308 	orr.w	r3, r3, #8
 8042e02:	81a3      	strh	r3, [r4, #12]
 8042e04:	6923      	ldr	r3, [r4, #16]
 8042e06:	b94b      	cbnz	r3, 8042e1c <__swsetup_r+0x7c>
 8042e08:	89a3      	ldrh	r3, [r4, #12]
 8042e0a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8042e0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8042e12:	d003      	beq.n	8042e1c <__swsetup_r+0x7c>
 8042e14:	4621      	mov	r1, r4
 8042e16:	4628      	mov	r0, r5
 8042e18:	f000 f850 	bl	8042ebc <__smakebuf_r>
 8042e1c:	89a0      	ldrh	r0, [r4, #12]
 8042e1e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8042e22:	f010 0301 	ands.w	r3, r0, #1
 8042e26:	d00a      	beq.n	8042e3e <__swsetup_r+0x9e>
 8042e28:	2300      	movs	r3, #0
 8042e2a:	60a3      	str	r3, [r4, #8]
 8042e2c:	6963      	ldr	r3, [r4, #20]
 8042e2e:	425b      	negs	r3, r3
 8042e30:	61a3      	str	r3, [r4, #24]
 8042e32:	6923      	ldr	r3, [r4, #16]
 8042e34:	b943      	cbnz	r3, 8042e48 <__swsetup_r+0xa8>
 8042e36:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8042e3a:	d1c4      	bne.n	8042dc6 <__swsetup_r+0x26>
 8042e3c:	bd38      	pop	{r3, r4, r5, pc}
 8042e3e:	0781      	lsls	r1, r0, #30
 8042e40:	bf58      	it	pl
 8042e42:	6963      	ldrpl	r3, [r4, #20]
 8042e44:	60a3      	str	r3, [r4, #8]
 8042e46:	e7f4      	b.n	8042e32 <__swsetup_r+0x92>
 8042e48:	2000      	movs	r0, #0
 8042e4a:	e7f7      	b.n	8042e3c <__swsetup_r+0x9c>
 8042e4c:	20000064 	.word	0x20000064

08042e50 <_sbrk_r>:
 8042e50:	b538      	push	{r3, r4, r5, lr}
 8042e52:	4d06      	ldr	r5, [pc, #24]	; (8042e6c <_sbrk_r+0x1c>)
 8042e54:	2300      	movs	r3, #0
 8042e56:	4604      	mov	r4, r0
 8042e58:	4608      	mov	r0, r1
 8042e5a:	602b      	str	r3, [r5, #0]
 8042e5c:	f7fd fda4 	bl	80409a8 <_sbrk>
 8042e60:	1c43      	adds	r3, r0, #1
 8042e62:	d102      	bne.n	8042e6a <_sbrk_r+0x1a>
 8042e64:	682b      	ldr	r3, [r5, #0]
 8042e66:	b103      	cbz	r3, 8042e6a <_sbrk_r+0x1a>
 8042e68:	6023      	str	r3, [r4, #0]
 8042e6a:	bd38      	pop	{r3, r4, r5, pc}
 8042e6c:	2000020c 	.word	0x2000020c

08042e70 <__swhatbuf_r>:
 8042e70:	b570      	push	{r4, r5, r6, lr}
 8042e72:	460c      	mov	r4, r1
 8042e74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8042e78:	2900      	cmp	r1, #0
 8042e7a:	b096      	sub	sp, #88	; 0x58
 8042e7c:	4615      	mov	r5, r2
 8042e7e:	461e      	mov	r6, r3
 8042e80:	da0d      	bge.n	8042e9e <__swhatbuf_r+0x2e>
 8042e82:	89a3      	ldrh	r3, [r4, #12]
 8042e84:	f013 0f80 	tst.w	r3, #128	; 0x80
 8042e88:	f04f 0100 	mov.w	r1, #0
 8042e8c:	bf0c      	ite	eq
 8042e8e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8042e92:	2340      	movne	r3, #64	; 0x40
 8042e94:	2000      	movs	r0, #0
 8042e96:	6031      	str	r1, [r6, #0]
 8042e98:	602b      	str	r3, [r5, #0]
 8042e9a:	b016      	add	sp, #88	; 0x58
 8042e9c:	bd70      	pop	{r4, r5, r6, pc}
 8042e9e:	466a      	mov	r2, sp
 8042ea0:	f000 f848 	bl	8042f34 <_fstat_r>
 8042ea4:	2800      	cmp	r0, #0
 8042ea6:	dbec      	blt.n	8042e82 <__swhatbuf_r+0x12>
 8042ea8:	9901      	ldr	r1, [sp, #4]
 8042eaa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8042eae:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8042eb2:	4259      	negs	r1, r3
 8042eb4:	4159      	adcs	r1, r3
 8042eb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8042eba:	e7eb      	b.n	8042e94 <__swhatbuf_r+0x24>

08042ebc <__smakebuf_r>:
 8042ebc:	898b      	ldrh	r3, [r1, #12]
 8042ebe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8042ec0:	079d      	lsls	r5, r3, #30
 8042ec2:	4606      	mov	r6, r0
 8042ec4:	460c      	mov	r4, r1
 8042ec6:	d507      	bpl.n	8042ed8 <__smakebuf_r+0x1c>
 8042ec8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8042ecc:	6023      	str	r3, [r4, #0]
 8042ece:	6123      	str	r3, [r4, #16]
 8042ed0:	2301      	movs	r3, #1
 8042ed2:	6163      	str	r3, [r4, #20]
 8042ed4:	b002      	add	sp, #8
 8042ed6:	bd70      	pop	{r4, r5, r6, pc}
 8042ed8:	ab01      	add	r3, sp, #4
 8042eda:	466a      	mov	r2, sp
 8042edc:	f7ff ffc8 	bl	8042e70 <__swhatbuf_r>
 8042ee0:	9900      	ldr	r1, [sp, #0]
 8042ee2:	4605      	mov	r5, r0
 8042ee4:	4630      	mov	r0, r6
 8042ee6:	f7ff fb0f 	bl	8042508 <_malloc_r>
 8042eea:	b948      	cbnz	r0, 8042f00 <__smakebuf_r+0x44>
 8042eec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8042ef0:	059a      	lsls	r2, r3, #22
 8042ef2:	d4ef      	bmi.n	8042ed4 <__smakebuf_r+0x18>
 8042ef4:	f023 0303 	bic.w	r3, r3, #3
 8042ef8:	f043 0302 	orr.w	r3, r3, #2
 8042efc:	81a3      	strh	r3, [r4, #12]
 8042efe:	e7e3      	b.n	8042ec8 <__smakebuf_r+0xc>
 8042f00:	89a3      	ldrh	r3, [r4, #12]
 8042f02:	6020      	str	r0, [r4, #0]
 8042f04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8042f08:	81a3      	strh	r3, [r4, #12]
 8042f0a:	9b00      	ldr	r3, [sp, #0]
 8042f0c:	6163      	str	r3, [r4, #20]
 8042f0e:	9b01      	ldr	r3, [sp, #4]
 8042f10:	6120      	str	r0, [r4, #16]
 8042f12:	b15b      	cbz	r3, 8042f2c <__smakebuf_r+0x70>
 8042f14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8042f18:	4630      	mov	r0, r6
 8042f1a:	f000 f81d 	bl	8042f58 <_isatty_r>
 8042f1e:	b128      	cbz	r0, 8042f2c <__smakebuf_r+0x70>
 8042f20:	89a3      	ldrh	r3, [r4, #12]
 8042f22:	f023 0303 	bic.w	r3, r3, #3
 8042f26:	f043 0301 	orr.w	r3, r3, #1
 8042f2a:	81a3      	strh	r3, [r4, #12]
 8042f2c:	89a3      	ldrh	r3, [r4, #12]
 8042f2e:	431d      	orrs	r5, r3
 8042f30:	81a5      	strh	r5, [r4, #12]
 8042f32:	e7cf      	b.n	8042ed4 <__smakebuf_r+0x18>

08042f34 <_fstat_r>:
 8042f34:	b538      	push	{r3, r4, r5, lr}
 8042f36:	4d07      	ldr	r5, [pc, #28]	; (8042f54 <_fstat_r+0x20>)
 8042f38:	2300      	movs	r3, #0
 8042f3a:	4604      	mov	r4, r0
 8042f3c:	4608      	mov	r0, r1
 8042f3e:	4611      	mov	r1, r2
 8042f40:	602b      	str	r3, [r5, #0]
 8042f42:	f7fd fd08 	bl	8040956 <_fstat>
 8042f46:	1c43      	adds	r3, r0, #1
 8042f48:	d102      	bne.n	8042f50 <_fstat_r+0x1c>
 8042f4a:	682b      	ldr	r3, [r5, #0]
 8042f4c:	b103      	cbz	r3, 8042f50 <_fstat_r+0x1c>
 8042f4e:	6023      	str	r3, [r4, #0]
 8042f50:	bd38      	pop	{r3, r4, r5, pc}
 8042f52:	bf00      	nop
 8042f54:	2000020c 	.word	0x2000020c

08042f58 <_isatty_r>:
 8042f58:	b538      	push	{r3, r4, r5, lr}
 8042f5a:	4d06      	ldr	r5, [pc, #24]	; (8042f74 <_isatty_r+0x1c>)
 8042f5c:	2300      	movs	r3, #0
 8042f5e:	4604      	mov	r4, r0
 8042f60:	4608      	mov	r0, r1
 8042f62:	602b      	str	r3, [r5, #0]
 8042f64:	f7fd fd07 	bl	8040976 <_isatty>
 8042f68:	1c43      	adds	r3, r0, #1
 8042f6a:	d102      	bne.n	8042f72 <_isatty_r+0x1a>
 8042f6c:	682b      	ldr	r3, [r5, #0]
 8042f6e:	b103      	cbz	r3, 8042f72 <_isatty_r+0x1a>
 8042f70:	6023      	str	r3, [r4, #0]
 8042f72:	bd38      	pop	{r3, r4, r5, pc}
 8042f74:	2000020c 	.word	0x2000020c

08042f78 <_init>:
 8042f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8042f7a:	bf00      	nop
 8042f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8042f7e:	bc08      	pop	{r3}
 8042f80:	469e      	mov	lr, r3
 8042f82:	4770      	bx	lr

08042f84 <_fini>:
 8042f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8042f86:	bf00      	nop
 8042f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8042f8a:	bc08      	pop	{r3}
 8042f8c:	469e      	mov	lr, r3
 8042f8e:	4770      	bx	lr
